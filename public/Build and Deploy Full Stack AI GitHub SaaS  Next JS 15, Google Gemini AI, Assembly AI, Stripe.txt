00:00 hey everyone in this video we are going
00:02 to build dionysis a full stack says that
00:05 lets developers work and collaborate on
00:07 complex code projects powered by AI we
00:09 will be building an endtoend production
00:11 ready retrieval augmented generation
00:13 Pipeline with length chain and the
00:15 GitHub API let's take a closer look you
00:18 begin by creating a project within
00:20 diagosis linking your GitHub repository
00:22 and giving your project a name you can
00:24 provide a custom GitHub token if you're
00:25 trying to link a private repository in
00:28 this case I'm going to use the sample
00:30 chat PDF project that I did a while
00:33 ago we're using a credit based system to
00:36 keep track of the usage and with that
00:38 can press create project with this we
00:40 will use l chain to scrap the entire
00:42 GitHub repository use Vector embeddings
00:44 to create a retrieval augmented
00:46 generation model within each project
00:48 users can view a summary of all the
00:49 comments that other teammates have made
00:51 in the repository we generate an AI
00:53 summary based on the changes in each
00:55 comit for you to quickly understand what
00:57 has happened while you were gone you can
00:59 ask Diana any question you want and you
01:02 will generate a 100% accurate answer
01:04 with context of your entire code base
01:06 for example I'm trying to figure out
01:08 where in the code am I loading in the
01:13 PDF he will site the files that he has
01:15 used in the code base for you to verify
01:17 and understand the answer that he has
01:18 given you if you're satisfied with the
01:20 answer you can just press save answer
01:23 for you to always refer back to this
01:25 answer when new members onboard the
01:27 project but that's not even the most
01:29 powerful part of this project you can
01:31 actually upload meetings into dionysis
01:33 and you'll be able to generate meeting
01:35 summaries and allow you to ask any
01:37 questions regarding the issues in the
01:38 meeting that you generate this is
01:40 extremely helpful if you're trying to
01:43 process a meeting that you have
01:44 accidentally missed and with that we are
01:46 processing the meeting and it will do in
01:49 the background asynchronously while we
01:50 wait for it to come
01:53 back once the meeting has finished
01:55 processing and I go into the meeting
01:57 notes I'm able to catch up on the
01:58 meeting that I missed by clarifying find
02:00 it with dionysis he will have 100%
02:03 context of the meeting notes you can ask
02:05 anything about the meeting notes here
02:07 and it will give you 100% accurate
02:12 answer last but not least we allow users
02:15 to purchase more credits to process
02:17 their projects through strip payments
02:19 where they can buy however many credits
02:21 they require for their
02:24 project the best part is all the
02:27 Technologies used in this project will
02:28 have a generous free tier so you don't
02:30 need a credit card to follow along and
02:32 build out this project we will be using
02:34 Google's Gemini AI for our AI API
02:36 provider Firebase for file uploads and
02:39 assembly AI for meeting analysis I'll be
02:42 building the entire project out end to
02:44 end with you explaining all the
02:45 technical and Architectural detail as we
02:48 go along so that you always have a full
02:50 understanding of the project that you're
02:51 building with me I will walk you through
02:53 all the code line by line so you have
02:55 the entire project in this video so with
02:58 that let's get started
03:00 hey guys before we actually continue
03:02 with the project initialization I just
03:04 want to share about the update on the
03:05 starter kit that I've been building over
03:06 the past few months even though it has
03:08 only been released for 3 weeks now the
03:11 more of positive reactions and feedback
03:13 of people supporting the tool kit has
03:14 been just mind-blowing to me thank you
03:16 again to those everyone who is
03:18 supporting my channel by purchasing the
03:20 starter kit I took a lot of your
03:22 suggestions and I've now added a new
03:24 setup wizard with this Setup Wizard you
03:26 can come in and customize the exact text
03:28 St that you want to be working with some
03:30 people don't like Clerk and they will
03:32 stick to a custom authentication with
03:33 next off they can also choose either
03:35 Prisma or drizzo for their
03:37 orm and if you're not keen with opening
03:40 AI you can always use Google's vertex AI
03:43 to actually power your AI applications
03:45 and even for file storage if you don't
03:47 want to be lock in with AWS S3 you can
03:49 always just use Firebase fire store to
03:51 just quickly get up and running and
03:53 finally we can also allow you to
03:55 customize your email provider and your
03:57 payment solution with that at the end
03:59 you can either choose to deploy to verel
04:01 or we will give you a Docker file for
04:03 you to self host the project on any VPS
04:06 that you choose and with this you can
04:08 press finish and download and we will
04:09 download an entire zip file of this
04:11 exact starter kit into your computer for
04:14 you to start hacking this tool has truly
04:16 save our Founders days and days of time
04:19 setting up boring project temp templates
04:21 and allow them to dive straight into
04:23 building the micro set and start making
04:25 money I'm still iterating on this
04:27 project every single week and all
04:29 feedback are welcomed
04:30 and with this successful launch the
04:32 price of the starter kit will be back to
04:34 its normal price after two weeks of this
04:36 video being released so if you're
04:38 interested in this project do check it
04:39 out at start- ss.com and with that thank
04:43 you so much and let's us begin with the
04:46 project all right let's actually get
04:48 started so this is a relatively complex
04:51 project and the main part is actually
04:54 how to build a proper retrieval
04:55 augmented generation system to allow you
04:58 to process your GitHub repository and
04:60 we'll be using Lang chain for that and
05:02 the structure of this kind of tutorial
05:03 will be I'm going to show you how to
05:05 build out the the basic UI first and
05:07 then we're going to delve deep into we
05:09 know the functionality and the backend
05:11 processes of processing the GitHub API
05:13 and the the L chain API for you to load
05:16 in the question and after that we're
05:18 going to build out the Q&amp;A pipeline for
05:20 you to ask questions uh to the
05:22 repository and get back the answer
05:24 streaming in from the gini AI API and
05:27 then we're going to show you how to
05:28 build the the me analysis using assembly
05:32 Ai and finally we're going to integrate
05:34 stripe for you to have a credit based
05:36 system for you to start making money on
05:38 this project so let us actually start
05:41 this project to begin with let us
05:43 actually just go into our terminal and
05:47 the stacks that we'll be using is going
05:48 to be uh the T3 stack with trpc next GS
05:52 15 Prisma till win Etc so to begin just
05:56 go into kind of your coding folder
05:59 orever you want to store your Cod code
06:00 and run sud sudo bun X create T3 app at
06:04 latest so in this tutorial I'll be using
06:07 a lot of bun right and you can install
06:09 bun which is a exact replacement for mpm
06:12 to bun. sh so it's just a kind of
06:15 alternative to mpm that runs faster and
06:18 that's the only reason kind of why I'm
06:19 using
06:20 it and I'm going to be using pseudo
06:23 because there's something wrong my
06:24 computer that doesn't kind of allow me
06:25 to uh access fils on my comp on my own
06:28 computer which is weird but that's how
06:30 we're going to roll so if you see bun X
06:32 and you don't to use bun you can just
06:34 simply replace it with sudo MPX creates
06:37 dt3 D app so you can just replace bun
06:39 with MPX and bun for mpm if you want so
06:43 with that let's actually just create um
06:45 the create T3 app and with that we're
06:48 going to give it a name in this case I'm
06:50 going to call it diis YouTube we're
06:53 going to be using typescript uh press
06:55 yes for T in CSS trpc I'm going to be
06:58 using clerk for this I'm going to press
06:60 none for now for or we're going to be
07:02 using
07:03 drizzle uh sorry Prisma we're going to
07:05 be using Prisma for this and we will be
07:07 using next J app router and I'm going to
07:09 go down to choose post grass SQL for
07:11 this and let actually initialize the G
07:13 repository and run but install for
07:16 import Alias I'm going to just choose
07:17 the allias side with that we're going to
07:20 wait for it to generate and it should be
07:21 done in just a
07:23 moment put here and let's actually open
07:25 up in our code editor I'll close down
07:27 the terminal for now and let's actually
07:29 begin in
07:30 coding the first thing I'm going to do
07:32 is just going to I'm just going to run
07:34 sudo Bund def to actually start the
07:36 server right so this is the nextjs
07:39 server we're using nextjs 15 right and
07:42 let's actually visit Local Host 3000 to
07:45 actually view our project it's going to
07:46 True an error right now so let's see the
07:48 error right so the error is because we
07:51 don't have our database yet so what I'm
07:54 going to do is going to come in down to
07:56 my kind ofv example oh sorry myv and
08:00 which need to actually update our
08:01 database URL to use our actual database
08:04 so in this tutorial I'm going to assume
08:05 you are an intermediate kind of a full
08:07 SE developer with knowledge about
08:10 typescript next GS Prisma Etc and the
08:13 main part of this project is really
08:14 teaching you about retrieval augmented
08:16 generation and I'll be running through
08:18 the entire process of how we actually
08:20 process this files and allow you to kind
08:23 of do embeddings and kind of uh PG
08:25 Vector Etc to make this kind of core
08:28 functionality work okay so we're going
08:31 to go into our neon so register neon
08:34 account and we'll be using this for our
08:36 database provider okay and so just
08:40 coming to any of your project I'm going
08:43 to create a new database for this so I'm
08:46 going to just name it um dianosis D
08:49 yoube like this I'm going to create a
08:52 new database and with that it's going to
08:54 give me this connection string just copy
08:57 it into our project here
09:00 so okay see this is the issue that I'm
09:03 talking about my my computer not
09:05 allowing me to own my projects you
09:06 probably don't need to do this right but
09:08 I'm just going to just change my kind of
09:11 uh ownership here I'm going save it so
09:13 now that we have our EnV saved we can
09:15 now uh run Soo bu Prisma DB push to make
09:20 sure that our database and our Prisma
09:22 schema right is synced up so this is our
09:25 representation of our database each
09:27 model is a a table within our database
09:30 so by running DB push we basically sync
09:33 our kind of representation of the
09:35 database and create a tables in our neon
09:39 DB with that I'm going to come down and
09:41 run sudo Bund def again which will then
09:43 run my next J server and finally I can
09:47 come down here and refresh my Local Host
09:48 3000 and hopefully we can see how create
09:51 create teacher app is working I can just
09:53 create a post here right submit we can
09:56 see that it works test boom cool
09:60 everything's working
10:01 perfectly I'm going to come down into my
10:03 page. TSX here I'm going just delete
10:06 everything right here for now and just
10:08 clear out everything I'm going to return
10:10 a cage one that says hello world and to
10:13 test that t is working I'm going to give
10:15 you a text rate of
10:16 600 with that I'm going to save it and
10:18 hopefully we can see the project working
10:20 so my H is rendering that means
10:22 everything is perfect so I'm going how
10:25 I'm going to do this is I'm going to
10:26 split this up into two panes for us to
10:29 to code along right so we can see what's
10:32 happening
10:33 together all right so the first thing
10:36 here is let us go back to our project
10:39 we're going to set up shet CN and clerk
10:41 so shet CN is going to be our kind of UI
10:43 provider today and this is going to give
10:46 us like this component library and then
10:48 we're going to set up clerk as well and
10:50 clerk just gives us that very easy
10:52 authentication provider right we can do
10:54 it custom off but the thing is we're
10:56 trying to focus on the actual project
10:58 here not deal with authentication in
11:01 this project so we're going to try to
11:02 use the simplest and laziest way to get
11:04 off authentication and start building
11:06 the actual meat of this project which is
11:08 the GitHub project
11:10 analyzing cool so let's actually install
11:13 shn first so I'm going to come down into
11:16 my um repository sorry my code editor
11:20 here I'm going to I'm going to open a
11:22 new terminal and what I'm going to do is
11:24 I'm going to run sudo b x sh cn- UI
11:29 latest in it so I'm going to initialize
11:31 a new Shen kind of Library here and
11:35 because something RealD on my computer
11:37 this should work for you but if not you
11:39 can run um pmpm right to actually use
11:43 this instead so PM PM is just kind of
11:45 another package manager and so this is
11:48 exact same command if you run B next so
11:51 let's initialize sh CN and let's choose
11:53 New York for this let's choose a neutral
11:56 style let's use CSS variables Etc so
11:59 initializing and added in our
12:02 configuration and what it did was to
12:04 create it created a new kind of
12:07 components folder for us so if you come
12:08 down to to uh let's see components. Json
12:14 this is where shetan stalls all their
12:16 configuration and then if we come into
12:20 kind of our lip folder this is also SWAT
12:23 has created for us so to actually use
12:27 the components from Shen we need to
12:29 install it from shet Cen so let's do the
12:31 same thing by running pmpm DLX shet CN
12:35 at latest at so if I run this command it
12:40 will ask me what components I want to
12:41 add right it will I can choose to add
12:44 accordians alert buttons cards car out
12:47 Etc and because I want everything here
12:49 I'm going to press a to select
12:50 everything and going press enter and
12:52 what this is going to do is going to
12:53 just copy in all the necessary
12:55 components and code into our project for
12:57 us to begin customizing and using
13:00 so if you see carefully we have a new
13:02 components folder within it there's a UI
13:05 folder that contains all the components
13:07 from
13:08 shn and if you look into button. TSX
13:11 right we can see that it basically
13:12 exports out a file for us that contains
13:16 uh a button component using a red X UI
13:20 start with shed C sorry it start with TN
13:23 CSS and the simplest way of using this
13:25 is just to come down to our page instead
13:28 of returning a H1 what I'm going to do
13:30 is I'm going to return a
13:32 button that says click me and this
13:35 button should actually come from at
13:38 components /i/ button if I save it we
13:41 can now see that our button is showing
13:43 up here which means that everything is
13:45 working perfectly all right so now that
13:48 we have set up sh CN let's actually set
13:49 up cler for authentication provider so
13:52 I'm going come into my clerk.com let's
13:55 go into our dashboard here and please
13:57 create an account if you have not I'm
13:59 going to then come down into my personal
14:01 account here I'm going to create a new
14:04 application I'm going to name it di
14:08 s uh
14:11 YouTube and I'm going to choose just uh
14:14 email and Google for now you can leave
14:15 it as a default you can add in other
14:17 providers if you want I'm going to press
14:19 create
14:21 application and with that I'm going to
14:23 just choose next CH and we're going to
14:24 follow the setup so the first step is
14:26 going to install the club package so I'm
14:28 going just do bun install at clerk
14:32 nextjs right so instead of MPN I'm just
14:35 going to use bun and then what we're
14:38 going to do is we're going to just copy
14:39 this into our environment variables go
14:41 press copy this come into our EnV and
14:45 just kind of Copy in our cler uh EnV and
14:49 also need to update our middleware TS so
14:51 coming down to your Source folder and
14:54 create a middleware dots file in the
14:58 source directory
15:00 and then copy in whatever they given you
15:02 so this is just for cl to kind of
15:04 protect our uh our F our path uh to make
15:08 it everything is public or private Roots
15:10 by default and with that we can then add
15:13 click provider to our app so come down
15:15 to your layout. TSX here at the main
15:17 page here and I'm going to just replace
15:20 the title for now then say YouTube like
15:23 this I'm going to just import the uh
15:27 Club Provider from access click nextjs
15:30 I'm going to just wrap everything here
15:32 with my click provider like
15:35 this and I'm going to save it and with
15:39 that we can then come back to our app
15:41 here and nothing should change for now
15:43 because by default basically clerk makes
15:45 everything a public
15:47 route let's continue on to the next GS
15:49 guide by making every route private by
15:52 default so let's actually create a sign
15:54 up page here so we're going to come down
15:57 here and going to go into my uh app
15:59 folder I'm going to create a sign- up
16:04 and I'm going to create bracket sign- up
16:08 and a page of TSX within this with that
16:11 I'm going to copy this in so this
16:13 creates a sign up page for us and if I
16:16 come back into my app my Local Host 3000
16:20 slsh desk up I should now see a sign up
16:23 component rendered by
16:26 clerk like this okay and let's do do the
16:29 same for the signin page so let's
16:32 continue with the guide so let's build
16:33 the signin page here so it's the same
16:36 process sign Dash in Brackets sign Dash
16:42 in and let's create a ph. TSX here and
16:45 let's copy this in here boom and let's
16:49 actually make the sign up and sign in
16:50 routs public right so by default cler
16:52 makes everything public but let's
16:54 actually make it uh all the routes
16:56 private by default make making sure that
16:58 they have to sign in to visit the
16:60 dashboard Etc so come to our middleware
17:03 TS file and let's copy this code in here
17:07 so what this file does is it creates a a
17:10 variable called is public route that
17:12 just has that is basically a array
17:15 telling you which routes are public and
17:16 these are basically regular expression
17:18 codes so if whatever route we want to
17:21 put here to be we put it in here this
17:22 will signal to kind of clerk that this
17:25 route should be public if not everything
17:27 here is is private by default and then
17:29 we are just running this middleware to
17:31 check whether the route is the kind of
17:34 um the route is public before allowing
17:36 The Click uh to proceed with the next GS
17:39 kind of
17:40 rendering and with that let's actually
17:42 update our environment variables with
17:44 the variables that cler is telling us to
17:46 do so this is basically tells cler uh
17:49 where is our sign in and sign out
17:50 pages and with that let's close this
17:53 down and now if you come back to if you
17:56 try to come back to just Local Host 3000
17:59 right it's going to redirect us to the
18:01 sign in page because by default the the
18:04 slash route is not public if you want to
18:07 make the SL drout public we just have to
18:09 add it like this and if I save it I'm
18:12 going to come back to my slash drout
18:13 again to see my button and now this is a
18:16 public route which I can access even
18:17 though I'm not logged
18:19 in so in this case I'm just going to say
18:21 that the the kind of root route should
18:24 not be um should not be uh public so I'm
18:27 going remove that and if I save this is
18:29 going to redirect me to the sign in page
18:32 cool so with that let's actually come
18:35 down to this so whenever we sign in and
18:37 sign up with clerk the user is actually
18:39 saved on Clerk's database right but we
18:42 actually want to save it to our database
18:44 so to do that I'm going to come down to
18:46 my schema. Prisma here I'm going to just
18:49 create a I'm going to create the the the
18:52 kind of database that we need uh the
18:53 tables that we need to process this
18:55 application I'm going to remove the post
18:57 table for now I'm going to create a new
18:59 table called user model user and a user
19:03 obvious has ID right it's going to have
19:05 a Creator ad and updat AD Fields right
19:09 let's give it a image URL to be an
19:11 optional string so this hopefully comes
19:12 back from clerk right we'll give you a
19:15 first name and the last name and will
19:17 give you an email address right uh this
19:20 has to be uh compulsory and it's a
19:22 unique ID that we kind of can index on
19:26 and lastly let's actually just uh we
19:28 don't need a hash password but let's
19:31 actually give them some
19:32 credits so credits is kind of how much
19:36 uh credits want to give them to use so
19:38 in this case in our project by default
19:40 we're going to give them 150 credits and
19:43 one credit basically means one file that
19:45 we help you process so imagine you load
19:47 in a GitHub repository with 150 files
19:50 that will use up all 150 credits of
19:52 yours so this kind of the free Tri that
19:54 we allow our users to have when creating
19:56 the project okay with that I'm going to
19:59 just run because I updated my database
20:03 taable I'm going to run sudo buan Prisma
20:05 DB push to push the the kind of our
20:09 database changes up so it's telling us
20:11 we got to drop the post table which is
20:13 okay so I'm going to press yes to update
20:15 our database cool with that we can now
20:20 come back here so whenever we sign in so
20:22 imagine I'm going to press continue with
20:23 Google here right I'm going to just
20:25 choose one account here what's going to
20:28 do is going to redirect us to our SL
20:30 page right and what this does is it
20:32 creates um account within clerk so if
20:35 you go into the clerk dashboard we
20:38 should be able to see a new user account
20:40 popping up here and you can see yes I
20:43 just registered for an account but the
20:45 thing is this user is not within my
20:46 database and so how do we actually uh
20:49 sync the the user within clerk into our
20:52 database that's where we will have to to
20:54 do this special thing of um kind of when
20:57 they sign up within Clerk we're going to
20:59 redirect them to a page within our app
21:02 and allow them allow us to write and
21:04 just create that data user within our
21:06 database and to do that we're going to
21:10 just go into
21:11 ourv right and we going to have a new
21:13 variable here called next public
21:16 clerk sign- up
21:19 dforce redirect URL and we'll set this
21:24 to SL sync user like this and so what
21:28 this this URL does is it tells clerk
21:32 that um after a user has signed up with
21:35 clerk we're going to force them to go
21:37 into this page and with this we can then
21:40 take the information out of Clerk and
21:41 save it within our own database okay and
21:44 so how's this going to work is let's
21:46 come back to my excal draw here okay so
21:50 I'll open this let's go up here so this
21:54 is kind of Clerk and this is our
21:57 application our user is going to come
21:59 into our application and they're going
22:01 to sign up with us they're going to sign
22:02 up to clerk right after they sign up to
22:05 clerk clerk is going to send them back
22:07 into our SL sync user route right so
22:10 imagine this user is Elliot like this
22:14 right Elliot has their username has your
22:16 name has your email right CL is going to
22:18 redirect the user to sync user and with
22:20 this we can then take the information
22:22 take my address my first name my last
22:24 name my image and save it within our own
22:26 neon postgress database okay cool right
22:31 and so what we're going to implement
22:32 that now so the first thing is I'm going
22:34 to come down to clerk here I'm going to
22:38 just delete my users from
22:41 clerk okay so I'm going to just click on
22:44 users I'm going to just delete this
22:48 delete the user all right and then I'm
22:51 going to come down to my code let's come
22:54 down to our code level here and let's
22:55 actually create the route that gets
22:57 redirected by the user
22:59 so let's come down to
23:02 app uh app SL sync Das user and let's
23:07 create a page. TSX here right so this
23:12 page. TSX this is where the user will be
23:15 redirected the moment they register an
23:17 account and so what we're going to do is
23:19 just going to export a async component
23:22 called sync user right it's going to be
23:24 Asing page a server side rendered
23:27 component and we're going to get the
23:29 user ID from await off and we can get
23:32 this off from clerk here and so this
23:35 will give a back G give us back with the
23:38 the user ID of the locked in user from
23:41 clerk right and if there's no user ID
23:44 right obviously we're going to just
23:45 throw an error saying that hey there's
23:48 something weird happening here we're
23:50 going to get the cler client by doing
23:52 await uh clerk client from kind of nextg
23:57 server from the cler library
23:59 right like this and then we're going to
24:01 do we're going to get the user to be
24:03 await CLI client do user sorry clip
24:06 client dot uh users. getet all right
24:10 let's see why uh client is trowing
24:15 error okay here this should just rename
24:17 to be client and let's say a wa client.
24:21 users
24:22 doget user passing the user ID so this
24:25 will basically return us with the the
24:27 email the the first name and the last
24:29 name all within Clerk and we're going to
24:32 just check if they do have a username if
24:33 they do have an email something real is
24:35 happening so if there's no user email
24:38 addresses. email address right we're
24:41 going to just return not
24:45 found and if they get to this point
24:47 we're going to then save the information
24:49 within our own database so we'll just do
24:51 await db. user right this DB comes from
24:54 Prisma like this db. user do uh up
24:59 right so upsert basically says that if
25:01 the user exist update that information
25:04 but if the user doesn't exist create a
25:06 new new user so we're going to check on
25:09 whether the email address right equals
25:12 to the user. email
25:14 addresses email address right right and
25:18 if they already have an account within
25:21 with us we're going to update the image
25:23 URL to be the user image URL and the
25:27 first name to be user the first name
25:28 name and last name to be user the last
25:31 name if not going to create a new
25:33 user passing the user ID that we get
25:36 back from this user or from clerk right
25:38 we're going to have the email address to
25:40 be this and then we have the we're going
25:42 to save the image URL first name and
25:44 last name like this okay and then
25:48 finally once we have everything here we
25:51 just going to return a redirect response
25:53 to/ dashboard okay so there's some type
25:57 errors here that we're going to have to
25:60 uh look at look at so this is going to
26:01 be user ID right and some this type
26:05 errors kind of we can ignore by just
26:07 going to our es lint and just let us
26:10 remove all the extends and the rules
26:12 here that is recommended
26:16 right and obviously uh we're removing
26:19 this because we're trying to focus on
26:21 the actual application and not try to
26:22 fix the type errors but everything here
26:25 we know that it's going to be type save
26:27 and we're just trying to get rid of the
26:28 annoying type errors that we know for
26:30 sure that is going to work and if you're
26:33 just learn starting out with typescript
26:34 you can just kind of uh keep this all
26:36 enabled to make sure that you know that
26:39 whatever you're doing here is uh really
26:41 according to typescript standard but in
26:43 this case because I just want to get
26:45 this project uh focused on the actual
26:47 business logic here I'm going to I'm
26:49 just going to remove the esing for now
26:51 okay so with this we're going to save
26:54 the user into our database whenever they
26:56 register with clerk so let's actually
26:57 try out
26:59 so by right if I then register my
27:02 account here it's going to redirect to
27:04 this page where we're going to save the
27:06 user within our database right so I'm
27:09 going to just restart my server first to
27:10 make sure everything works so B def
27:14 right um so if I click on this account
27:17 it should redirect to this page it's
27:19 going to save our user within our
27:20 database and redirect me to dashboard
27:24 and so if I press this account and
27:26 register with clerk hopefully you can
27:28 see that sign up Force redirect is going
27:31 to go into sync user and boom we get
27:34 redirected to the dashboard page so
27:36 let's actually create a dashboard page
27:37 to see actually if we have the user
27:39 saved in our database so I'm going to
27:42 come down to app I'm going to create a
27:44 dashboard folder and create page. TSX
27:46 within this and let's actually just do
27:50 rafc for my dashboard page right and
27:55 let's actually look at how it's going to
27:57 look like so I can get the kind of
27:60 locked in user by
28:02 doing use user from click /
28:05 nextjs I'm going to do user DOT first
28:09 name and hopefully you can see that
28:12 we're going to call client site code so
28:14 this should be a used client file and we
28:17 can now see that the locked in user is
28:18 OT which is my first name so cool that
28:21 means is working from clerk right and to
28:23 see whether it safe into our database we
28:26 can create we can come down to uh we can
28:29 call bun Prisma Studio to open our
28:31 database client in our kind of browser
28:35 and you can see our data our tables
28:37 right we have one user table and inside
28:38 we have one row and within the row we
28:40 can see the user that has been saved
28:43 into our database so with this we can
28:45 now create relations within our
28:46 databases to to link projects and
28:50 questions with this user and this allows
28:52 us to actually be more flexible with our
28:54 relational data modeling cool that means
28:57 our syncing works we have set up
28:58 authentication we have set up kind of
28:60 shed CN right so we are making a
29:02 extremely good start with this project
29:06 here okay so now that we have
29:08 initialized a project I'm going to start
29:11 building out the skeleton UI of this
29:13 which means building out the sidebar
29:14 building out this top navigation and
29:16 building out the main section where
29:18 we'll be kind of storing all the main
29:20 information whenever we navigate around
29:22 the page okay so to do this I'm going to
29:26 come down here and under my app I'm
29:28 going to create a new route segment so
29:31 route segment is purely a semantic way
29:32 of separating your your folders so I'm
29:35 going to name it protected so whatever
29:37 of kind of routes within this protected
29:39 folder is always going to be kind of
29:41 protected which means that you need to
29:42 be signed in to view this protected
29:44 stuff so with here going create a new
29:47 layout. TSX so this layout. TSX kind of
29:50 detects what uh the kind of put the
29:53 layout folder for the protected route so
29:56 when we in the protected route you can
29:58 see that's always the same format we're
30:00 always going to have a side bar on the
30:01 left we're going to have a top menu bar
30:03 on here and then we have a main section
30:06 here and indiv the individual pages will
30:08 only change within the main content here
30:10 so that is the the kind of power of the
30:12 layout files within the next GS app
30:15 router to do this we're going to then
30:17 come down to here I'm going to do RFC
30:20 I'm going to name it Side Bar layout
30:23 like this we're going to take in props
30:26 right and it's going to have a children
30:28 right so the children is basically
30:30 whatever is rendering within uh this
30:32 page here right as we navigate around
30:34 the page there'll be dynamic content
30:36 that
30:36 changes but the overall skeleton of the
30:39 sidebar the top bar will not change
30:42 right so in this case I'm going to just
30:44 return a uh I'm going to build a sidebar
30:46 so we need a sidebar provider so we can
30:49 import all this from the shn that UI
30:52 that we the kind of we install at the
30:53 beginning and then we're going to have a
30:56 app sidebar here right for now we're
30:58 going to comment it out but then we're
30:60 going to have a main uh main here a main
31:03 diff with a class name of with full and
31:05 margin of two okay and then within here
31:08 we're going to have a uh div with a kind
31:12 of class name of flex item Center Gap
31:17 two
31:18 border Das site bar Das border BG Das
31:23 sidebar border Shadow
31:26 rounded rounded medium padding of two
31:30 padding X of four okay and then within
31:33 here we're going to put in uh we're just
31:36 going to put in a a search bar component
31:40 here right we're going to code it out
31:41 later and then in here we're going to
31:43 have a margin left of oo and then here
31:46 we're going to have a user button that
31:47 we can import from clerk so clerk
31:49 already has given us a user button so if
31:52 I save it right now and I refresh it
31:55 right right you can see that nothing has
31:57 changed because I was site our dashboard
31:59 route should actually be brought into
32:01 the route segment here because the
32:02 dashboard is a protected route so the
32:04 moment I bring it in here if I refresh
32:06 the page now we can see that we have a
32:09 kind of sidebar sorry if I zoom out here
32:13 right we have a top n bar here on the
32:15 top here and we'll have a user button on
32:17 top like this right we're going to then
32:20 build the side the Side Bar here so come
32:22 back into your editor here right below
32:25 this main diff sorry inside the main
32:27 diff I'm have a height of four to space
32:30 out the top bar in the main content we
32:32 have main content here we're going to
32:35 have a div here that have a class name
32:37 of Border Das Side Bar border BG of
32:42 sidebar border Shadow rounded medium
32:47 overflow y of
32:50 scroll overflow y of
32:52 scroll right round the medium here and
32:56 then we're going to have a maximum
32:58 height of just calculate of 100 Fu
33:01 height minus 6 Ram like this and will
33:05 give you a padding of four within here
33:07 this is where we can store our children
33:09 so this children is basically whatever
33:11 rout we whatever content we put in the
33:12 dashboard kind of what uh kind of
33:16 content we put in each kind of page
33:18 segment so we can now see that we have
33:20 the main segment here right this is the
33:22 aliot that we see within our dashboard
33:24 page right so if I name it here I can
33:26 have another div here
33:28 right that has that contains let's say
33:32 user the last name you can see it shows
33:33 up within the layout here and now let's
33:36 rebild the sidebar so I'm going to come
33:38 down here sorry to my dashboard here I'm
33:41 going to create a new component called
33:43 app- sidebar. TSX right so this app do
33:46 apps sidebar will kind of contain our
33:49 sidebar component here so we're going to
33:53 then what we're going to do is uh we're
33:55 going to just export a function called f
33:58 sidebar right so this is a new component
34:00 from Shen you can check it out at
34:03 sidebar right so he has a kind of whole
34:07 tutorial of how to build a proper Side
34:08 bar here and so I'm just condensing the
34:10 information for you and we're going to
34:12 build it out together
34:14 okay so there's a few parts to this
34:17 right because a sidebar contains uh the
34:20 top section of the logo and the
34:21 collapsible menu here right and then
34:24 we'll then have uh the route the main
34:26 content here which is the application as
34:28 well as the projects that listed here
34:31 and we have a create project that list
34:32 us to the create page okay and so with
34:35 that what we're going to do here is
34:38 first we're going to have a we're going
34:40 to return a component here and before
34:43 that let's actually mark this as use
34:45 client right we're going to return a
34:47 diff that say sidebar here okay we'll go
34:51 back into our
34:52 layout and let's just uh import the side
34:55 app Side Bar and with that here we can
34:57 see our side bar here so as we code
34:59 along we can see the side bar showing up
35:00 properly so we're going to return inste
35:03 of D we going to return a side bar that
35:04 we import from component slui right and
35:08 let's give you option of collapsible
35:10 equals to Icon and variant equals to
35:15 floating right and within the sidebar
35:19 let's have a uh sidebar header right and
35:24 let's let's put a logo here for now like
35:26 this and within the Side Bar header
35:29 right so if we we zoom out we can see
35:31 the Side Bar right if you zoom in too
35:33 much it becomes the mobile view and you
35:34 will change it you will hide it right so
35:37 I'm going to zoom out a little bit so we
35:38 can still see it while still seeing the
35:41 content we have a placeholder logo here
35:43 and within this after the sidebar hater
35:45 we have the sidebar content right also
35:48 imported from the Shen library and then
35:52 we have a sidebar group
35:54 here okay and within the sidebar group
35:58 we're going to have a sbar group
36:01 label and the sidebar group label is
36:03 going to call
36:04 application and now we can see the
36:06 application showing up here outside of
36:09 the sidebar group label let's have the
36:10 sidebar group content right and then
36:14 we're going to render out a list of
36:15 options so we have this options of
36:18 building meting Q&amp;A and dashboard so
36:21 let's create an array to represent that
36:24 so cons items equals to an array each
36:27 array is going to have a title right
36:29 right the Tittle is going to have
36:31 dashboard right and our we're going to
36:33 give it a URL to be/ dashboard so this
36:36 where I want to bring them to and let's
36:38 give them a icon to be light out
36:41 dashboard from Lucid react so let's
36:45 import this right so we're going to do
36:47 the same for Q&amp;A meeting and building
36:49 I'm just copy this in here since I
36:51 already have the code written out here
36:53 so just import the icons from lucd react
36:56 right so we have meeting and we have
36:58 building so in here we're going to then
37:00 look through the items items. map right
37:04 for each item we what do we want to
37:06 return right so we're going to return a
37:09 sidebar menu
37:12 item right within here we're going to
37:15 pass in as
37:17 child as
37:19 child uh let's see sidebar menu item um
37:24 sorry s men item is not we have give key
37:27 of item. Ty
37:28 right inside the sidebar menu item we
37:30 have a sidebar sidebar menu button right
37:36 and this has the S
37:39 property makes sense within the sidebar
37:42 menu button right we're going to just
37:44 render a uh kind of anchor tag sorry uh
37:49 a link tag from next SL link I'm going
37:51 to just link it to the item. URL we give
37:56 a class name so we're going to have a CN
38:00 variable and we're going to
38:02 conditionally check so we're going to
38:04 give you a background of primary and
38:06 text of white if the path name of what
38:10 we are currently at equals to item. URL
38:13 so how do we get a path name we can get
38:14 it by getting it from cons path name go
38:17 to use path name importing from next SL
38:20 navigation okay within the link we're
38:23 going to render out the item. icon like
38:25 this and then we'll have a span that
38:28 shows the item. title if we save this
38:32 now we can see this starting to work and
38:35 we're going to have an issue here
38:36 because we need to just remove the um
38:39 decoration so we're going to have a link
38:42 sorry uh What's this called list
38:46 none uh and then sorry let's see what's
38:49 the issue here why do I have this list
38:52 icon here um sidebar makes sense let's
38:57 see so if you change it to a does it
38:59 still happen yes it does so I'm
39:22 guessing oh right so Above This sidebar
39:25 inside the sidebar group content you
39:26 also need a sidebar new right like this
39:30 and this wraps the entire list here so
39:33 if I save this now the kind of list
39:34 decorations are gone right so I need to
39:36 wrap it with the sidebar menu in order
39:37 for it to work so now we have this as we
39:40 click on it it's going to redirect us to
39:42 the different pages which we have not
39:43 build out yet right but we'll slowly
39:46 build it out and in this case I'm going
39:48 to Showcase how we going to build build
39:49 out first so let's come down for example
39:52 I'm going to go into my protected route
39:53 segment I'm just going to go into kind
39:55 of let's see um QA right so this is one
39:59 of the path QA route and I'll create my
40:03 page. TSX in here right I'm going to
40:06 just return a empty component q a page
40:11 I'm going to say save this and if I
40:13 press Q and A we can now see that our
40:16 kind of menu changes right and we get to
40:18 render out what is shown here cool so it
40:22 shows that our side bar is starting to
40:24 work right so let's actually continue
40:25 coding it out so we also need the pro
40:27 project section here right so come under
40:30 to your kind of collapse your first
40:33 sidebar group here so we're going to
40:35 create a second sidebar group okay so
40:39 let's actually do the same here so
40:41 underneath the first sidebar group let's
40:42 also create another sidebar
40:44 group sidebar group inside the second
40:47 sidebar group we need a sidebar group
40:51 label right saying your
40:55 projects and then we have a sidebar
40:57 group
40:58 content in here with the sidebar menu
41:02 right and then within the sidebar menu
41:05 we have a sidebar menu item okay so we
41:09 need to list out the list of projects so
41:11 because we don't have any projects for
41:12 now I'm going to just uh hard code some
41:14 projects so we'll give it a kind of um
41:18 let's give it a name of project one and
41:22 then yeah that's basically all we need
41:25 so let's have a list of kind of fake
41:26 projects here to showcase it so we're
41:29 going to just do um kind of for each
41:32 we're going to just into sidebar menu
41:34 let's delete this and we're just going
41:36 to look through the projects right so
41:38 inside sidebar menu we're going to do
41:40 projects. map right let's see projects
41:44 so let's see why we don't have projects
41:46 let's name it plural right so sideb
41:49 projects. map for each project what
41:52 we're going to do is we going to return
41:54 a sidebar menu item
41:58 right with a key of project. name and
42:02 we're going to have a site Bar menu
42:06 button right with s child as a prop and
42:10 we're going to have a div within the div
42:13 we're just going to have a kind of let's
42:15 have a another div here and within this
42:19 div we're going to give you a class name
42:22 of CN right and we're going to have
42:25 rounded DSM border size of six Flex
42:31 items D
42:33 Center justify D center right we have a
42:38 text SM BG white and text primary right
42:43 and then we're going to give you a
42:45 conditional kind of classes so we'll
42:48 give you a BG primary and text of white
42:51 right if my project name right so this
42:55 is if my project name
42:58 equals to project ID but the thing is
43:00 right now we don't have uh sorry we
43:03 don't have the project name so uh sorry
43:06 project. ID right because we have not
43:08 actually created the database object so
43:10 for now I'm just going to set this to
43:12 always always true right always
43:16 true and within this div we're going to
43:19 just set to the project. name do first
43:22 character so you can see that we have
43:24 this kind of square icon thing and the
43:27 the the the text in here is just the
43:28 first letter of the the project name so
43:31 if we save this right now we can see
43:33 that we have the P showing up right so
43:35 actually display the project name here
43:37 and boom now we have the project showing
43:39 up here and that means everything is
43:40 working perfectly awesome so in this
43:44 case if we set this to we can
43:45 conditionally render it to be false or
43:47 true and this will then toggle the state
43:49 so later when we actually have the
43:51 selected project we can conditionally
43:53 render them for the class name and
43:55 lastly I'm just going to build out this
43:57 uh kind of uh create project uh button
44:00 here so come down to your uh collapse
44:04 your sidebar group here right we already
44:06 fin sidebar group and what we're going
44:09 to do is let's
44:12 see let us let us come down
44:15 to actually no unex expand your sidebar
44:18 group again colapse your sidebar kind of
44:22 group um men sidebar menu right let's
44:26 see sidebar menu
44:30 um here the point is that we have to
44:32 come out of this Loop of where where
44:34 We're looping out the projects and let's
44:36 give you a height of two to space it out
44:38 and then we're going to just get uh
44:40 we're going to basically create this
44:42 create project so let's have a button
44:44 here from component button and let's
44:48 just put create project for now so we
44:51 got this big button for but I want it to
44:53 be a little smaller so let's give it a
44:55 variant of outline like this right and
44:59 then we're going to then give you a
45:01 class name of um let's see with of fit
45:06 right and we're also going to wrap this
45:08 in a sidebar menu item like this right
45:12 just wrap this
45:16 button okay and then what we're going to
45:19 do is we're just going to put a link
45:21 wrap this in a
45:22 link right so what does this button
45:24 actually go to it goes to our create
45:26 page so SL create okay and then let's
45:30 give it a button of size of small to
45:32 make it smaller right I'm going to just
45:34 add a plus button beside it like this so
45:37 it looks a little nicer so if I press
45:39 create project now it should lead us to
45:41 SL create which we have not created a
45:43 page yet but now that we have this
45:45 sidebar if I press command B right we
45:47 can see that it collapses like this
45:49 right and the sidebar the kind of this
45:52 button here is going to look a little
45:54 weird but we can we're going to fix the
45:55 issue on later okay
45:58 and
45:59 then with that let's actually we have
46:01 already completed the application sbar
46:04 so we're going to have a logo right so
46:06 this logo I'm just going to copy in from
46:07 my existing kind of logo I'll just pass
46:10 you guys the the public folder uh of
46:13 we're going to just take in the public
46:14 folder here I'm going to copy it and I'm
46:17 going to just delete this public folder
46:19 I'm going to copy it it paste in so
46:23 because I already have this with the
46:24 kind of uh my SVG and my logo here I'm
46:27 going to pass you this file in the
46:29 description below so you can just get
46:30 this assets and put it in your folder
46:32 without downloading anything okay and
46:35 then because we have this logo right we
46:38 can then actually just render it so I'm
46:41 going to come up here where we have this
46:43 placeholder logo I'm going to have a div
46:46 here have a class name of flex items
46:49 that Center gap of two right and I'm
46:52 going to just display our image from
46:55 next SL image the source is GNA be SL
47:00 logo.png right and then let's give it
47:03 out of
47:05 logo and let's give you a width of 40
47:09 and height of
47:11 40 let's save this so let's rename this
47:17 and nice we have this image now so let's
47:20 see cool so we got this image now let's
47:23 also give you a title beside it so uh
47:27 let let's have a H1 that just says
47:30 there's a class name of text XL font Bo
47:33 right and we have a text of primary
47:37 divide by 80 and we'll just give it
47:40 dionis or whatever name you want to give
47:42 it honestly right so this looks good
47:45 this looks good right we can press
47:46 command B to expand it Etc but you can
47:49 see we want to we want to hide this diis
47:51 when the uh command bar is kind of sorry
47:54 the site bar is collapsed so I'm going
47:56 to get the we're going to get the open
47:58 state from use sidebar which is also
48:01 hook that Shan gives us and we're going
48:03 to just render it only when open is true
48:06 so only when the Side Bar is open I'm
48:07 going to render this text and so now if
48:10 I press command B to kind of expand it
48:12 you can see that the text Heights as the
48:14 sidebar expends and closes okay cool
48:18 stuff so with that with that everything
48:21 looks good and our sideb bar is
48:23 officially completed so we actually want
48:26 our kind of text in our color scheme
48:29 instead of black to be blue and what you
48:31 can do is go down to shed cn's website
48:34 and just choose kind of uh themes and
48:37 you can really customize it to whatever
48:39 color you want here right in this case
48:41 I'm going to choose blue I'm going to
48:43 copy the code here I'm going to press
48:45 copy go into your Global SCE CSS and
48:48 just replace everything here with this
48:50 color and the moment I press save we can
48:54 see that if I refresh the page right uh
48:56 let's see sorry I can't I can't just
48:58 delete everything I still need the
49:00 Tailwind classes right so I'm going to
49:02 delete everything up to my Tailwind here
49:05 I'm going to paste in the code from sh
49:06 CN from the code they gave me if I press
49:10 save now you can see that my S bar is
49:13 showing up here and there's one more
49:16 issue with the sidebar is uh with the
49:18 CSS because the CSS doesn't provide us
49:20 with the styling for the sidebar so what
49:23 I'm going to do is I'm going to copy in
49:26 this I'm going to copy in some
49:27 additional styling here right for it to
49:30 work so I'm going to leave this TN CSS
49:33 code within uh the repository for you to
49:35 kind of copy into but the main point is
49:38 I just added the sidebar uh color
49:41 variables in here for the light mode and
49:43 also for the dark mode right and just
49:46 apply the some reset classes so with
49:49 that we got the color here working right
49:52 and one more thing is I'm going to hide
49:54 this create project button when I'm
49:56 actually close
49:57 so I can do that too by just saying that
50:00 hey if only is open then I'm going to
50:03 render the sidebar menu sorry set the
50:05 create
50:07 project so I'm going to do this and boom
50:10 so now only when it's expanded we get to
50:12 see the create project if not we don't
50:15 all right cool so we got the sidebar
50:18 done awesome job
50:20 guys all right with the sidebar done
50:22 let's actually create the let's actually
50:24 start modeling modeling the project and
50:26 actually start being way to create a
50:28 project okay so the first thing we're
50:30 going to do is create the create page so
50:33 come down to your protected segment and
50:34 just create a create folder and with a
50:37 page. TSX let's do our fce say this a
50:41 create page and let Mark this component
50:44 as use
50:45 client and now we have a create page so
50:48 just a reminder the create page is going
50:50 to look like this so we're going to have
50:52 our uh our user here sorry I'm going to
50:55 just zoom out here a little bit but we
50:57 just have a nice image here from undraw
50:59 and we'll have a kind of big text here
51:02 with three inputs asking for the project
51:04 name the repository URL and a GitHub
51:06 token so the GitHub token is used to
51:09 help authenticate the user on behalf of
51:11 them in in case they trying to look for
51:13 a private repository access right and
51:16 then when they key the project like this
51:19 right we can press check credits so this
51:21 check credits function is going to go
51:23 into the repository it's going to look
51:25 at all the files that he has and count
51:27 out how many files there are in total so
51:29 in this case because in this project
51:31 there's 150 files in total right we're
51:33 going to say this is this is going to
51:34 cost 149 credits right I'm going to
51:37 display the the message here but for now
51:39 we just going to create a just going to
51:41 make sure that we can create a row
51:42 within our database we are not going to
51:44 worry about this credit for now we can
51:46 come back to that at the end of the
51:47 project when we have everything built up
51:49 okay so to build this page let's go back
51:51 into our UI right uh I'm going to have a
51:54 use form so we're going to have a
51:57 type of form input right so we're going
52:01 to have a repo URL right which is going
52:03 to be a string we're going to have a
52:05 project name which is also going to be a
52:08 string and have a we're going to have a
52:11 GI Hub token which is going to be an
52:13 optional string so they might have it
52:15 they might not and have it right and
52:17 what I'm going to do is I'm going to
52:18 return we're going to have a uh we're
52:20 going to use use form so this use form
52:23 come from react form and then we're
52:25 going to pass in the generic of form
52:27 input like this and we can destructure a
52:30 few things we can destructure register
52:32 handle submit and reset okay and let's
52:36 Rend up the UI here so with the UI we're
52:39 going to have a
52:41 div with the class name of flex items
52:45 Das
52:46 Center gap of 12 hi of full justify
52:51 Center okay inside here I'm going to
52:54 have an image right that has a source
52:57 of/
52:59 undraw GitHub andore GitHub SVG so this
53:05 is the the kind of SVG I imported just
53:07 now which you can also access in the
53:09 link below okay let's give it a class
53:12 name of height of 56 and width of
53:14 o2 and with that we can see the image
53:16 popping up then below the image let's
53:19 have another diff here within this diff
53:21 we have a upper diff here that reps the
53:23 hit one with a class name of font semi
53:27 text of excel sorry to excel that just
53:31 says link your GitHub
53:34 repository okay I'm going to zoom in
53:37 zoom out a little bit okay under the H1
53:40 let's have a
53:41 paragraph they have a class name of text
53:43 smm and text muted foreground and let's
53:46 just give you a description of enter the
53:49 URL of
53:50 your
53:52 repository to
53:55 link it to
54:00 dionysis cool and then with this
54:03 paragraph let outside of the this diff
54:06 let's give it a height of form for
54:08 spacer and here's where we put the
54:10 actual form so let's have a diff in here
54:12 and a form right so for the form what
54:16 I'm going to do is I'm going to have an
54:17 unsubmit Handler to be handle submit
54:20 right so this handle submit comes from
54:21 our react hook form and let's just
54:23 register a function right this function
54:25 is called onsubmit so what happens on
54:28 onsubmit we get the form input as the
54:30 data right and we're going to just
54:33 return true and just window. alert out
54:38 the data for now okay and so for this
54:41 endle submit we can then pass in the uh
54:44 custom onsubmit
54:46 function within this form let's have a
54:48 input field here from component /ui
54:52 right this can be a self closing
54:54 component let's give it a requir F and
54:58 let us just register it so this register
55:01 comes from react hook form right we
55:03 going to register we see we have a type
55:05 save URL sorry type save object of
55:08 GitHub token project name of repo URL so
55:10 just taking the repo URL right and let
55:13 us make sure that required equals to
55:15 True okay and we placeholder of let's
55:19 say project
55:20 name so let's see what's wrong here
55:25 required like this
55:30 um require a say more than one okay well
55:34 I guess it's fine let's put it afterward
55:36 here okay cool so if I save this here
55:40 there's unexpected div and let's see why
55:43 that is the
55:44 case so image let's
55:48 refresh right let's actually restart our
55:50 server sometimes next J is weird like
55:53 this and if we refresh it hopefully
55:57 okay there is to an error so let's see
55:60 why so I'm going to just have maybe we
56:03 need extra
56:04 div no that's not the case uh oh right
56:08 here
56:09 probably why div with a div div
56:15 div is it here
56:19 maybe is my image not
56:23 working like this wait that's so weird
56:27 it should be working right am I
56:30 tripping so saying that this diff out
56:33 here is not being
56:34 closed right but I am closing it
56:37 here 21 let's see oh I see the error so
56:42 this required field should actually be
56:44 in here required to be true okay and
56:47 let's just remove this and okay now it
56:50 works okay project name so let's give it
56:53 some spacing here cool and so I'm going
56:56 to zoom a little bit here okay we're
56:58 going to do the same right we going to
56:59 give you a height of two just to give
57:01 you some space here I'm going to copy
57:02 the input down here and this time we ins
57:05 repo URL right so here should be project
57:08 name and down here should be the um repo
57:11 URL so I'm going to say GitHub URL right
57:16 and then we're going to say require is
57:17 true and then we have another div sorry
57:20 another input here but this time we're
57:22 asking for the sorry What's this called
57:25 we're asking for the GitHub token here
57:26 so this is not required so remove this
57:29 and let us say GitHub token right and
57:33 we'll see this
57:34 optional and boom now that we have our
57:36 three input boxes we're going to then
57:39 finally have a height of four and put
57:40 our button
57:42 here that says uh kind of check
57:47 credits Well for now we're going to say
57:49 create project right so create project
57:52 cool and this going to have a type of
57:54 submit so if I press create project now
57:57 you can see that we need to enter in the
57:58 fields right so GitHub URL here actually
58:01 we can give it a type of URL to make
58:03 sure that it's a Val URL right and then
58:07 we going to press create project and now
58:09 we can see that it's alerting object
58:12 object which is kind of weird because
58:14 this should be Json the stringify right
58:17 so we should be able to see our kind of
58:19 path in here so we going to press create
58:21 project and boom we can see the GitHub
58:23 token we can see the project name and
58:25 the uo URL and so this data is a type
58:28 save object with all the input FS that
58:30 we have entered in here so with this we
58:32 can actually uh pass into our back end
58:35 and create the project so before that we
58:37 actually need to have a table in our
58:39 database right so let's come down to our
58:41 schema Prisma to actually create that uh
58:44 project data model table thingy okay so
58:48 project right we're going to create a
58:50 new model it's going to have an ID
58:52 obviously Creator at updat app we're
58:55 going to have a name here right we're
58:57 going to have a GitHub URL which is
58:59 going to be a string okay we're going to
59:02 then have um let's see we're going to
59:06 have um a deleted ad view in case we're
59:09 going to Archive it which going to be
59:11 optional date time and then finally
59:13 we're going to have a um I think that's
59:16 pretty much it for now right GitHub URL
59:20 yeah in the most Bas basic form that's
59:22 all we need and obviously later we're
59:24 going to add on more stuff into this but
59:26 for now this is the simplest
59:27 representation of a project so I'm come
59:30 in here to my terminal I'm going to just
59:31 run slow bu Prisma DP push right so this
59:35 will basically allow me to just create
59:37 this new table within my
59:39 database and every time I create a new
59:41 table I'm just going to restart my
59:43 server like this okay and so I'm going
59:46 to close out of SCH Prisma and now let's
59:49 create the trpc route Handler to create
59:51 the project okay so come down into your
59:54 kind of let's see
59:58 app right we're going to go into our
60:00 server under our API under my my routers
60:03 I'm going to create a new route router
60:06 called project. TS so I'm going to
60:09 export a export cons project router
60:13 equals to creates trpc router right I'm
60:17 going to have a
60:18 create create project route here right
60:23 and this is going to have a public
60:25 procedure and and I'm going to just take
60:27 in some inputs and some and make it a
60:30 mutation so I'm going to make sure I'm
60:32 going to explain everything what's
60:33 happening here but for now just call
60:36 along right I'm going to say console
60:39 High I'm going to return true okay so
60:44 before this so a trpc router is just
60:46 exactly like a Express router right
60:48 except that this trpc allows us to have
60:50 a type end to end type save
60:52 communication between our front end and
60:53 our back end and one thing we need to do
60:56 with in our trpc is to integrate our our
60:59 kind of uh authentication right because
61:01 we need to know that we need to create a
61:03 middleware to make sure the person
61:05 hitting our backend apis is
61:07 authenticated and we're able to access
61:09 the the the locked in user data so to do
61:12 that come into your trpc TTS function
61:14 inside your API folder right and we're
61:17 going to create a uh we're going to come
61:20 down in here to let's say line
61:23 85 around here right so above the timing
61:26 middleware right we're going to have
61:28 cons is authenticated check so this
61:31 function is going to be a middleware to
61:33 tell the trpc router whether the user is
61:37 authenticated so this going to be a t
61:39 middleware right so if you're not
61:41 familiar with trpc there are a lot of
61:42 great tutorials out there I'll link one
61:45 uh I'm going to leave one in the
61:46 comments and description if you want to
61:48 brush up on your trpc right so this is a
61:50 more intermediate tutorial I hope you
61:52 understand that so if not you can just
61:54 follow follow along right this is just
61:56 kind of the boiler plate of what we need
61:57 to set up to link Clerk and trpc so the
62:01 middleware is going to accept uh the the
62:03 next function the context function the
62:05 context object right and I'm going to
62:07 get back the user equ goes to a we off
62:09 we're going to get back from uh clerk
62:12 server right so if they're not
62:14 authenticated we're going to just
62:15 obviously throw a new uh trpc error
62:19 right right with the code being
62:21 unauthorized all right and if not we're
62:23 going to just return we're going to call
62:25 the next function but passing in the
62:26 context and the user right and then
62:29 we're going to come down here to our
62:31 procedure I'm export
62:34 cons private oh sorry protected
62:38 procedure so these are procedures that
62:40 only locked in users can use right like
62:42 creating a project we're going to do t.
62:46 procedure. use is
62:50 authenticated right do like this so
62:54 we're basically saying that this
62:55 procedure is a PC procedure and you have
62:57 to be logged in to be able to use it and
62:59 when you use this procedure you can
63:00 access the user object here and so if I
63:04 come into my project. ts right instead
63:06 of public procedure I'm going to use
63:08 protected procedure right and if I look
63:11 into the my context field I can now see
63:13 my user object so this user object comes
63:15 from this user field that we pass in and
63:17 so I can access the CTX user right do
63:21 first name uh sorry user dot let's say
63:25 uh user ID right but I also want to
63:28 access a first name so what we can do
63:30 here is come down to your your route so
63:33 now I can do CTX user. user ID to get in
63:36 the loged in user that's accessing my
63:38 backend function okay so one more thing
63:41 I forgot to add within our database is
63:43 the concept of the relationship between
63:45 a user and a project so a user can be
63:48 part of multiple projects and a project
63:50 can have multiple users so that means we
63:52 are going to create a many to many
63:54 relationship uh bridging table
63:56 so to do that I'm going to create a
63:58 model called um user to project right so
64:02 let's
64:03 see user to project and this is going to
64:07 be a a kind of many to many bridging
64:09 table between user and project so we're
64:11 going to have a ID for this bridging
64:14 table right and we're going to have the
64:16 user ID and the project ID right and
64:18 we'll have the link the user to be the
64:20 user here and we'll have the project
64:23 here and let's actually give you a
64:25 unique View on the user ID and the
64:27 project ID so obviously if you're a user
64:31 you can only have a pairing of one user
64:33 and one project ID this has to be unique
64:35 right so this is a compound key that
64:36 we're creating and let's actually just
64:38 come down here to project so let's just
64:41 do user to projects right this is going
64:44 to be a user. project array right and
64:47 for user we'll do the same so user to
64:50 projects and we get user to project
64:52 array like this so let's save this and
64:55 let's actually do sudu bu Prisma DB push
64:60 to update this right and then let's
65:03 actually restart our server again P
65:06 def right so within our stuffff here
65:10 let's actually just just clear all the
65:12 logic first I'm just going to accept
65:14 this input right so this project router
65:17 the create is going to take in uh three
65:19 things right from what we passed in here
65:21 so we're going to have Z z. object right
65:24 we're going to have the um
65:26 project name to be z. string we're going
65:29 to have a GitHub URL to be z. string as
65:33 well and we're going to have a GitHub
65:36 sorry we're going to have a GitHub token
65:40 right this could be string but it can be
65:42 optional right and for now we're going
65:45 to just console.log the input
65:48 here and return a true statement here so
65:52 I'm going to show you what happens in
65:53 the server when we do this so to
65:55 actually call this function we're going
65:56 to come to our rout we're going to add
65:58 this route we're going to add the
65:60 project router into our trpc route so
66:04 come down to post like below the post
66:06 I'm going to have project to be
66:08 referencing the project router right so
66:11 this is where we can import the project
66:12 router here if I click into it command
66:15 click I can see the router that we
66:17 create here okay and so um what this is
66:21 actually looking like is we have a bunch
66:24 of routes so imagine we have the top
66:26 level this called the trpc root right
66:30 and within uh a trpc router root router
66:32 I can have many sub routes so I can have
66:35 a project route for all my project
66:36 business logic I can have a user route
66:39 for all my kind of user business logic
66:42 right if I have more stuff like I have
66:44 post I can have that a list of post
66:46 routes here so I'm just segregating kind
66:49 of business Lo by their endpoints and
66:51 their kind of modules okay so I'm just
66:55 adding the project to this project
66:57 router and so finally if I come down to
66:59 my create page here I can access the
67:03 mutation I can access this function this
67:05 route by doing create project equals to
67:08 API so this API I'm going to import it
67:11 from at/ trpc react so this is a common
67:14 mistake you can see that API can either
67:16 be imported from trpc server or trpc
67:19 react because we on the front end we're
67:22 going to import the trpc react okay so
67:26 API and if we do dot we can now see that
67:28 we have this project thing here so this
67:31 project is exactly what we we added into
67:34 the root router right so if I name this
67:37 like something weird right we can see it
67:39 instantly pop up here right like this so
67:41 this name will always match the name you
67:43 put in here okay so we save this and we
67:47 going to do project and we can now see
67:49 the list of M points right so we have
67:50 this create project function here I'm
67:53 going to use
67:54 mutation okay
67:56 so this basically gives me a mutation
67:58 function to call my backend function by
68:01 calling this function here so by right
68:03 if I come down here on my submit I'm
68:05 going to call um create project right
68:10 let's
68:11 see I'm going to call create project
68:13 passing in my data so create project.
68:16 mutate passing in the GitHub URL to be
68:20 data. repo
68:22 URL passing in the project name
68:26 to be data. project name and then we're
68:30 going to do GitHub token to be data.
68:32 GitHub token right and we're going to
68:34 have on success right so whenever this
68:37 project this kind of call is successful
68:39 I'm going to just do toast so this toast
68:41 is from soner do success saying that hey
68:44 project created successfully if there's
68:46 any errors I'm going to just going to
68:48 log it out and say that hey there's
68:50 error creating the
68:51 project and so I'm going to call the
68:53 reset function after this as well right
68:55 after we successfully kind of create a
68:57 project so for now I'm going to Showcase
68:59 what it looks like okay so by right when
69:02 I submit this form right if I give a
69:05 name and a URL if I press create project
69:09 firstly we can see that um our input is
69:12 showing up in our server so this
69:14 console. loock comes from this console.
69:16 loock so this is happening on the server
69:18 so this means it's working and so I'm
69:21 just going to remove this window. alert
69:23 for now right and we can see we do have
69:25 a post alert here why is that happening
69:28 right is because we didn't add the
69:30 toaster within our layout so going to
69:33 your layout your roots layout of your
69:35 next share server and under this we just
69:38 add a toaster right so this toaster
69:40 component comes
69:42 from um let's
69:45 see from
69:47 soner okay so this sonor component is
69:49 what gives us our our uh toaster and I'm
69:53 going to give it a rich color
69:56 here I'll save this and if I if I put
69:60 this in again I'm going to press create
70:02 project and you can see project is
70:03 created successfully and we lock it out
70:05 in the server so with we have the name
70:07 and the gab
70:08 URL Okay cool so with this what we're
70:11 going to do is we're going to actually
70:12 create the project okay so instead of
70:15 just logging out and return true right
70:18 what we're going to do is let's see
70:21 um we're going to just say that hey the
70:25 first thing we we're going to do is cons
70:26 project uh we're going to do cons
70:29 project equals to
70:31 await CTX so contact. DB so we get our
70:35 Prisma database through here do do
70:38 project so this is our table project
70:41 table do create right passing the data
70:44 to be um we need the GitHub URL to be
70:48 GitHub URL passing in the name to be
70:51 input the name right and then we have
70:54 the user the projects right right we're
70:56 going to then do
70:59 create right we're going to pass in the
71:03 user ID to be CTX do user. user ID so
71:07 basically this creates the project for
71:08 us and we also need a let's see what
71:12 else do we
71:13 need uh okay so user ID might be now but
71:17 we know that because we are in a
71:18 protected procedure that means that if
71:20 they're unauthorized they should even be
71:22 here so the fact that they can get into
71:24 this endpoint means that the user ID
71:25 will always be true with always with
71:28 always not be now right so we can add
71:30 exclamation to satisfy typescript so now
71:33 that we create a project right we can
71:35 just return kind of uh we can just
71:37 return the project
71:38 here okay so hopefully if I do this and
71:43 I enter a real project we should see a
71:45 new database a new Ro showing up in our
71:48 database and one more thing I'm going to
71:50 add is for this create project button
71:52 right I'm going to have a I'm going to
71:54 disable it while my my create project is
71:57 pending so while while I'm actually
71:60 creating a database and processing it on
72:01 the back end I'm going to disable this
72:03 button right and so now if I do project
72:06 name right so let's say like test let's
72:10 put test and put this I'm going to press
72:13 create
72:13 project and we you see that it's
72:15 disabled and say project created
72:17 successfully okay and I can validate it
72:20 right by going to this terminal I'm
72:22 going to create a new terminal here I'm
72:24 going to go into
72:26 bun Prisma
72:29 Studio to make sure that my uh project
72:32 is being shown up here so you can see
72:34 that my project is created right my test
72:37 and my GitHub URL is correct as well as
72:40 a user to project table has successfully
72:42 link our user and our project ID okay
72:45 cool that means our backend function is
72:47 working and I can exit all of this right
72:50 so now that we have this project I want
72:52 to actually replace this fake data fake
72:54 projects with our real projects okay and
72:57 to do this I'm going to create a new
72:59 hook right called use projects so come
73:02 down here and just come down into our
73:05 app into our hooks folder I'm going to
73:07 create a use use projects use project.
73:12 TS so okay I need to kind of Grant
73:16 myself permission again so I'm going to
73:19 just do this something weird with my
73:24 computer but it's fine
73:26 and now I can go into my hooks here I'm
73:30 going to do use Dash
73:32 project use project.
73:35 TS uh TS like this okay I'm going to
73:38 export a kind of custom hook use project
73:42 right and so instead of returning this
73:45 I'm going to go into my project router
73:47 here I'm going to create a new route
73:49 that gets all the projects get all of my
73:52 locked in projects so it's going to be a
73:54 protected procedure
73:56 right because I'm the one that's logging
73:57 in I need to know what projects I own do
74:01 query right we get the async function
74:03 from
74:04 CTX and we're just going to return
74:06 straight forward await cx.
74:09 DB
74:10 project uh sorry um let's see project
74:15 find
74:16 many
74:18 where let's see how do we actually do
74:21 this get all projects right find many
74:24 where basically my user do to projects I
74:29 I have some user ID equals to CTX user.
74:33 user ID like this so we're basically
74:36 getting all the projects that I own the
74:38 locked in user owns I want to make sure
74:40 that I only want to get the projects
74:42 where uh the deleted ad equals to now
74:45 right so if it's deleted obviously we
74:47 don't want to show that anymore so we
74:49 got this get projects function we can
74:52 now go into our use projects hook and we
74:54 can get out the data
74:57 right from API so import API from
75:01 react project. getet all do usequery
75:06 so let's see project. get projects. use
75:11 Query right so this got to query our
75:14 projects and then we're going to have a
75:17 we're going to just return the list of
75:18 projects
75:20 here projects like this I'm going to
75:23 return the projects like this awesome
75:25 and we also want to keep track of which
75:27 which current project I'm looking at
75:29 right right now right so in our app we
75:31 can see that uh we can see that if I
75:34 click on any of this project I'm
75:36 selecting it so we need to keep a local
75:39 storage State a local storage key to
75:41 make sure that when we refresh the page
75:43 we can see that my selected project ID
75:45 is always intact okay so to have a local
75:48 storage hook right we're going to
75:49 install another package called use hooks
75:54 DTS okay so this use hooks. DTS gives us
75:58 a very handy function called use local
76:02 storage
76:04 from use hooks. TS so the why this
76:08 function is useful is because I can get
76:10 the project
76:12 ID and set project ID right usually I
76:16 can do like equals to react. use state
76:19 right but react use state is not
76:21 persistent that means if I refresh the
76:22 page the data store in memory will be
76:24 gone but but if I store in to local
76:26 storage use local storage here I can
76:29 give you a key down the story in so I
76:31 can say like let's say
76:33 diones project ID right and I can give
76:36 you an initial value of a string so this
76:38 is exactly like you state except that it
76:40 persist the value of the state into your
76:43 local storage so if you leave the tab
76:45 you refresh the tab the value of this
76:47 selected project ID will always be
76:49 intact okay and we're going to get the
76:51 actual selected project by doing cons
76:54 project equals to project s find so
76:57 we're looking through all my projects
76:59 and finding the project that equals to
77:01 the selected project ID like this so
77:04 actually a more appropriate name could
77:06 be selected project ID right uh actually
77:10 we can just name it project ID is fine
77:12 okay and so this project is the actual
77:14 object of the selected project I have
77:17 right and finally what I'm going to do
77:19 is we're going to just return the
77:21 project itself and the project ID right
77:25 like this so now we have this extremely
77:27 extremely useful hook right let's
77:30 actually also export out the set project
77:32 ID function so we can use this hook Now
77:35 everywhere within our app and we are
77:37 able to get access to the list of
77:39 projects and if we click around we can
77:41 always get access to the active project
77:43 ID from anywhere the the app so let's go
77:46 into our sidebar so app sitebar right so
77:50 instead of looping to this fake projects
77:52 right I'm going to delete this projects
77:53 here
77:55 I can access the list of projects by
77:57 just doing projects equals to use
78:00 projects like use project so these are
78:03 custom hook and we can see that we can
78:04 destructure the projects from here and
78:07 so no we no longer need to fake fake it
78:10 so at this and we can now finally add a
78:13 true check here so if only project ID
78:17 equals to project ID so this is a
78:18 selected project ID that we can also get
78:21 from our used
78:23 projects project ID so this are actively
78:25 selected ID so we want we only want the
78:28 BG primary and text right to apply if
78:31 this certain project is the one that is
78:33 actively
78:35 selected so if we save it right now we
78:37 can see that our Test shows up so that's
78:39 cool and if I click on it I should be
78:41 able to select it so I'm also going to
78:43 just destructure this I'm going to
78:45 destructure the set project ID like this
78:48 and so what happens when we click on
78:49 this project project ID so if I click on
78:53 this on click right I'm just going to do
78:56 set project ID to be the project. ID and
79:00 so if I click on this hopefully it will
79:02 turn blue boom that's cool and you can
79:04 see if I refresh the page it's it's
79:06 still going to be selected right so
79:08 let's create more projects right by
79:10 doing let's say uh another one like this
79:13 and give you another URL we'll press
79:15 create project right and we can see that
79:17 it doesn't refresh but if we refresh the
79:19 page we refresh it and now we can see if
79:21 you click around it we can now see the
79:24 actual active project ID change and we
79:26 can see the class names change as well
79:28 okay so that there is one problem which
79:31 is as you saw just now after I enter the
79:33 project and press create it doesn't
79:35 automatically refret the data for me
79:38 which is an issue and so for that I'm
79:40 going to create another custom hook
79:42 called use refresh that we can call to
79:44 invalidate all of our trpc queries so
79:47 that it automatically refreshes all
79:48 queries and make sure our data is always
79:50 updated okay so come now into our custom
79:54 hooks and let's create a use refret hook
79:58 use refresh. TS so how this use refresh.
80:01 TS is really simple right so we'll just
80:04 do RFC we export use refret we're going
80:08 to get the actual let's re remove this
80:10 we're going to get the actual query
80:12 client from use Query client from 10
80:15 stack query and then we're going to
80:17 return a Asing function right that just
80:21 awaits query client. refetch query so
80:24 we're going to fetch all the queries
80:26 right that is of type active like this
80:30 okay and so when we call this function
80:34 right it's going to just refret all
80:35 active queries and so this data will
80:37 always be
80:38 updated so if I come back here to my
80:41 kind of create project form right so I
80:46 can actually get a refetch function by
80:50 calling my use refetch hook right so
80:52 this Hook is the one we just created
80:53 just now like here
80:56 and so after we have successfully uh
80:58 created a project I'm going to just call
80:59 the refet function and hopefully this
81:02 refet function will invalidate the query
81:05 in my use project hook like here use
81:08 project hook here it's going to
81:10 invalidate this query it's going to
81:12 refetch it it's going to update my
81:13 projects and when it updates my projects
81:15 it should update the site bar as well so
81:17 let's test it out so if I come down here
81:20 to my project name I say uh refetch
81:23 right passing a GitHub URL
81:25 I'm going to press create project and
81:27 boom you see project created
81:29 successfully and can see that we've
81:30 instantly updated our side bar right to
81:32 see the refetch item here so I think
81:35 that's super cool that we are able to do
81:37 that and now that we can do that let's
81:40 actually uh create the dashboard page
81:42 right so right now the dashboard we are
81:44 just rendering my name right but let's
81:46 just go to our dashboard page here and
81:49 instead of the user let's actually get
81:51 the uh project from use project right
81:55 let's actually get the selected project
81:57 here and we're going to
81:59 do H1 we're going to render the project.
82:02 name and we can see that as we click
82:04 around the item here the sidebar we can
82:08 see the project updating and that's how
82:10 we properly render it here all through
82:12 our custom hook and you can see that if
82:14 I refresh the page because we are using
82:16 use logo storage my my state is always
82:19 going to be persistent here right so I
82:22 think that's super cool that we're able
82:23 to do that inide a short spin of time
82:25 and I think this is a very clean
82:26 architecture of dealing with State
82:28 Management between the client site and
82:30 the server site all through the power of
82:32 trpc and react Cory so let's actually
82:35 move on to actually creating the
82:36 dashboard page here so we're on great
82:38 track good job
82:40 guys all right so let's actually build
82:42 out the dashboard UI that we see here so
82:45 the dashboard actually is contains a few
82:48 things so I'm going to expand this just
82:50 for us to see
82:51 together this let's see
82:56 okay so let just go to a code here see
83:02 okay so so we involve a kind of the kind
83:06 of banner here showing which GitHub URL
83:08 this project is linked to right and then
83:10 on the right side here we show the list
83:12 of users uh that are in this project so
83:14 you can always invite a team member
83:16 right here you can archive the project
83:18 of course right under the section here
83:20 we have two parts here so we have a
83:22 great layout of you can ask the question
83:24 here
83:25 right we can ask any question and then
83:28 on the right side here is where you
83:29 upload the meeting and then on the
83:31 bottom side here is a kind of scroll
83:34 component of the list of commits and the
83:37 AI summary of each comit history comit
83:39 change okay so let's bu a skeleton of
83:42 this how it looks like so come back to
83:44 your logo host and I'm just going to go
83:47 into my code editor and for now I'm
83:50 going to just expand both because might
83:52 be hard working on uh both on the site
83:54 screen because it's a kind of rather
83:56 large component right so in this project
83:59 I'm going to just remove this diff right
84:02 and we're going to have a first firstly
84:04 a big diff here with a class name of
84:06 flex items that Center justify between
84:11 Flex of rep Gap y of four right within
84:16 here let's have another diff here there
84:19 a class name of width of fit rounded
84:22 medium background of primary
84:25 primary padding X of four padding y of
84:28 three right and then let's have a GitHub
84:31 icon from Lucid react with a class name
84:35 of size of five and text of white okay
84:39 so if we save it right now we just have
84:40 this right there's something wrong with
84:42 our rounded MD cool and beside the
84:46 GitHub URL let's have a default margin
84:48 level of two and we have a p a paragraph
84:52 tag with a class name of SM
84:55 font medium text of white okay and then
85:01 let's say this project is link
85:05 to and then we need to have a link
85:08 obviously and what do we link to we need
85:10 an actual project right so HRA equals to
85:13 project. GitHub URL right and then let's
85:18 have a class name of inline Flex items
85:22 as Center text white of 80
85:26 and when I hover under give you an
85:28 underline and this this within this link
85:30 we will give the GitHub URL and then
85:34 we'll have a external link icon here
85:37 with the class name of imine of one and
85:39 size of four so this will build up this
85:42 thing here okay and the reason why this
85:45 is not working is because we probably
85:48 also need a flex right uh let's see yeah
85:52 so I need to wrap this in a flex. items
85:56 center right and wrap the GitHub and
85:59 this diff in here so it lays side by
86:02 side and nice we got something working
86:04 here so you can see if I click around we
86:06 can see the URL change so that means
86:08 it's working fine okay cool and so I'm
86:11 going to collapse this div right here
86:14 right I'm going to give you a commment
86:15 of GitHub link
86:18 okay okay and let's see below the GitHub
86:22 link GitHub link I'm going to have a
86:25 height of four right to separate up and
86:28 this is where I'm going to give a flex
86:30 of items that Center gap of
86:34 four and in here is going to where we're
86:37 going to put our team
86:39 members team
86:42 members our in sorry like this invite
86:46 button and also our arive
86:50 button like this so this is going to be
86:53 where we going to put our components
86:54 later but I'm going to put a placeholder
86:55 here for now and then out of this diff
86:59 we're going to have a let's see does it
87:01 make
87:03 sense so we're going to collapse this
87:06 item Center here and outside of this
87:08 diff we're going to have a margin top of
87:10 four okay inside this margin top of four
87:13 we're going to have a diff with a class
87:16 name of
87:17 GD grip Das calls of one gap of four
87:21 when is smaller I have grip calls of
87:23 five inside here is where we're going to
87:25 have our ask question card as well as
87:28 our meeting card so this is where we
87:31 have our site off the kind of this one
87:35 card here and the meeting card on the
87:36 right side okay and then outside of this
87:39 outside of the margin top of four we
87:41 have a margin top of
87:43 eight and this is where we'll put our
87:46 comments loog like this so This comit
87:49 lock is going to take out the entire
87:50 bottom of the screen here okay cool so
87:54 now let's should build the commit lock
87:55 component
87:58 here all right so let's actually move on
88:00 to build on build this kind of commment
88:02 lock history so how this how this going
88:05 to work is we're going to use github's
88:07 API and they have a very cute name for
88:09 it called octo kit so octokit is what
88:13 they call the API to interact with a
88:15 GitHub right and so using octokit
88:18 through not GS we can interact with the
88:20 repository and the comet history of a
88:22 certain repository right so we can going
88:24 to use octo kit to basically pull in all
88:27 the list of comments right and I'm going
88:29 to pull for the the comment so whenever
88:31 there's new comments we're going to
88:33 process them for each comment we're
88:35 going to save the author who commented
88:37 it we're going to save the the kind of
88:40 URL of the the person who commented it
88:43 we're going to give the get the comment
88:44 message we're going to get the comment
88:46 time stamp and lastly we're going to get
88:48 the commit we need a commit hash as well
88:51 and we're going to use AI to generate
88:53 this summary of the AI commit diff and
88:57 this is the real magical part that is
88:58 exciting so I'm going to show you how to
89:00 do all that in the next kind of uh kind
89:02 of this section that we're doing in so
89:04 the first step is let's actually just go
89:07 back to our code editor let's clear out
89:10 this part here and we're going to
89:12 install octo kit so octokit is the API
89:17 to interact with GitHub so let's
89:18 actually save this okay and what I'm
89:20 going to do is I'm going to just clear
89:21 out everything here I'm going to come
89:23 down to our source
89:25 and what I'm going to do is I'm going to
89:27 create go into my lip folder Library I'm
89:30 going to create a GitHub TS folder so
89:33 this
89:54 run typescript files so we can just do
89:56 use bun so I think bun is out for
89:59 Windows as well but bun gives you this
90:01 special way of just directly running
90:02 typescript files so I can just do Soo bu
90:05 run source
90:24 and then I'm going to pass in uh I'm
90:26 going to initialize a new octo kit I'm
90:28 going to pass in my GitHub token so how
90:30 do I get my actual GitHub token so come
90:32 to your github.com
90:34 okay go into your kind of settings on
90:37 your right side here come down into
90:40 developer
90:41 setting right and come down into
90:44 personal access tokens and your tokens
90:46 classing okay and what we going to do
90:48 here is going to press generate new
90:49 token and just choose a classic version
90:52 all right then what we going to do is
90:54 just log in uh into your GitHub account
90:57 authorize it and I'm going to just do
90:59 diagosis test so we need this token for
91:03 us to authenticate with GitHub and
91:04 increase our rate limit usage right this
91:06 completely free by the way so you just
91:08 to follow along and allow GitHub to
91:10 authenticate you so I'm going to just
91:12 choose the expiration date I'm going to
91:14 choose uh seven days so after kind of I
91:16 posst this it's going to be
91:18 expired and just choose repo right
91:21 that's all you really need for now right
91:23 so you need to it allows you to gain
91:25 access to your private repos and allow
91:27 you to access the GitHub
91:29 API with that just press generate token
91:32 right and remember to save this token
91:34 okay get this token and this is going to
91:36 be your GitHub token from now on so I'm
91:38 going to go to myv and just going to
91:40 save it as GitHub
91:46 token with this GitHub token right I can
91:49 have this initialization here okay and
91:51 what I'm going to do is one more thing
91:53 is I'm going to create a new model to
91:56 store our comments so we're going to
91:57 have a list of comments for each project
91:59 right so to model that what we're going
92:02 to do is we're going to create a new
92:03 table called comment right pretty
92:06 self-explanatory so for each comment
92:08 obviously we're going to have an ID just
92:10 like every table we have right it's
92:12 going to be linked to a project right so
92:14 for each project we obviously we know
92:16 that it's going to have a list of
92:17 comments which going just an array of
92:19 comments right so for each comment what
92:21 do we actually have we're going have a
92:23 comment message
92:25 which is a
92:27 string string we're going to have a
92:30 commit hash which is all a string we're
92:33 going to have a commit author
92:37 name commit
92:39 author Avatar which is the the kind of
92:42 image
92:43 URL we're going to give you a date when
92:45 it was
92:47 committed we're going to have a summary
92:49 so this the AI summary right it's going
92:52 to be a string as well
92:55 like this and with that we can just save
92:57 this let's actually just push it up so
92:59 you know the drill so prb push oh like
93:05 this push spot correctly after creating
93:07 that let's actually you go back to g. TS
93:10 I'm going to just experiment with
93:11 pulling kind of an experiment URL so I
93:14 going to have a example gab URL to be
93:17 like let's say gab.com
93:20 SL uh let's see let's see docker slj AI
93:24 stack okay and so to actually get the
93:27 list of comments from this right we can
93:30 write a function called we going export
93:32 cons uh get commit
93:35 hashes all right it's going to be async
93:38 we're going to take in a get GitHub URL
93:41 to be a string and we're going to what
93:43 we're going to return is we're going to
93:45 return a response so the type of
93:47 response is going to be a types script
93:48 object of just the comment hashes right
93:51 everything that we have within our
93:53 Prisma okay and so what we're going to
93:56 do is we know that this is going to
93:58 return a
93:59 promise of our
94:04 response so the first step is we're
94:06 going to get the owner and the
94:07 repository from GitHub URL or split
94:11 right okay let's just start with this
94:14 what I'm going to do is I'm going to
94:15 just get cons data equals to await octo
94:18 kit so we have the rest endpoint do
94:22 repost sorry rest. repost we can have a
94:25 function called list
94:26 commit list
94:28 commit and this list commits needs two
94:31 things we need to owner right so who
94:34 owns this repo so the owner will be
94:36 let's say Docker in this case and then
94:38 the repository is going to be gen a
94:41 stack like this and so if you just kind
94:45 of uh console. log out data let's see
94:48 what this how the data looks like so I'm
94:50 going to call the get commit hashes
94:52 right passing in this function and let's
94:55 see if you can actually get the comments
94:58 from this repository so I can run uh sud
95:01 sudo ban
95:02 run s/ so because I'm calling this
95:05 function I should run this right so
95:07 let's see what what we get back so we
95:10 can see that we get back a array and we
95:12 get back all the information here so
95:13 this are really cool data so we can see
95:16 we have the committer right who
95:17 committed it right we can see the the
95:19 event we can see the URL we can see the
95:22 author information the message Etc so we
95:26 can get back all this stuff and I know
95:29 exactly what we need to get back right
95:31 so we're going to have a consorted
95:34 commit equals to dat the sort A and
95:41 B like
95:44 this and then we're going just return
95:47 the new date of b. commit. author.
95:51 dat. getet time minus uh a. com order.
95:56 dat. getet type okay and we going just
95:59 return it as an ARR of any okay and
96:02 finally we're going to return a sorted
96:04 comments do slice 0 to 15 so we're going
96:07 to only get the first 15 comments right
96:09 so the latest shifting commit so for
96:12 each
96:13 commit
96:14 commit we're just going to return a type
96:17 save object of the commit hash to be
96:20 commit Dosh s string we need commit
96:24 message to be commit. commit. message
96:28 right and how do I know this keys I
96:30 basically look into the kind of uh
96:33 object here and just pull it out so I'm
96:34 just doing the kind of work for you and
96:37 we need to commit author name to be
96:40 commit do commit.
96:44 author do
96:46 name we need the commit author Avatar to
96:49 be this right Avatar Avatar URL and the
96:52 last one is author.
96:54 like
96:56 this so let add some optional training
96:59 here just in case this okay cool and so
97:02 right now if we then just console. lock
97:05 out this
97:08 value we should be able to see a list of
97:11 comments with this shape here okay so if
97:14 I expand my terminal and let's run
97:17 this and boom I should now be able to
97:20 see the comet hash the message of the
97:23 comment the name of the author uh the
97:26 author Avatar and the comment date in
97:28 the string cool so we actually got that
97:30 working I'm super happy for that and so
97:33 now we know that this function exists we
97:35 can now uh basically uh link the comit
97:40 whenever we create a new project what
97:41 we're going to do is we're going to
97:43 write a function called pole reos sorry
97:45 poll commit and that's going to take in
97:48 the projects GitHub URL get the list of
97:50 comments we're going to look through
97:51 each comment and we're going to see if
97:53 we have already the comment has we have
97:56 we already saved it so we're going to
97:57 get the new comments every time and we
97:59 going to generate AI summaries for this
98:01 okay and so what I'm going to do here is
98:04 I'm going to just turn this down to 10
98:06 I'm going to remove this hash because we
98:07 know that this function works I'm going
98:09 to export a function called
98:12 pole commit right and this going to be
98:15 Asing function taking in the project ID
98:18 right so the first step here is we're
98:21 going to actually want to get the the
98:24 project and the GitHub URL from await
98:28 fetch project GitHub URL passing the
98:31 project ID so let's write this function
98:35 so um Asing
98:40 function right fetch Project G URL we're
98:43 going to get the database right find
98:46 this and we're literally only just going
98:48 to get the
98:49 Gurl like this and we're going to return
98:53 the project
98:55 we're going to return the project and
98:57 then we're going to return the GitHub
98:59 URL to be like this okay cool so we get
99:02 back this two stuff here and so now if
99:04 we pass in a string a project ID we can
99:06 get back the project and the GitHub URL
99:09 associated with that
99:10 project and with that we can actually
99:12 get the cons commit hashes equals to AWA
99:15 get comit hashes which is the function
99:17 we wrote up here with a GitHub URL so in
99:20 this case if there is no Project G
99:23 GitHub URL we know that there an error
99:25 so we just directly through an error and
99:27 so by the time we get here we can get
99:28 the list of commits okay cool and so
99:32 then at that point we can we going to
99:34 get the we're going to get
99:37 unprocessed comment equals to await
99:40 filter out the unprocessed comments
99:42 passing in the comment hashes and the
99:45 project
99:46 ID okay so we basically get the most
99:49 updated 15 comments and we're going to
99:52 compare it with our database have you
99:54 already saved this comments to our
99:56 database and we're going to compare
99:57 other new comments because we don't want
99:59 to always generate AI summary for all
100:01 the list of 10 comments right it's very
100:03 wasteful because we really did it once
100:04 we save it in our database why should we
100:06 redo the work right so I'm going to
100:09 write a function here Asing function
100:12 filter out Pro unprocessed comments
100:14 right so we taking the project ID and
100:15 the list of comment hashes right and
100:17 what we're going to do is literally
100:18 we're going to get the unprocessed we're
100:20 going to get the processed comments
100:23 right which means means these are the
100:24 commits that we already saved in the
100:26 database right by the project ID I'm
100:28 going to get the unprocessed commits
100:31 equals to the comet hashers that we got
100:34 back from pulling the API we're going to
100:36 filter out the comments that already
100:39 exist by comparing that Comet hashes all
100:41 right and then we're going to just
100:43 return this unprocessed comment okay and
100:45 so now we get this unprocessed Comet and
100:48 so right now if I just console the lck
100:50 and return it right I'm going to call
100:53 this function called po comments and how
100:56 do we know what project I to pass in
100:58 okay so let us actually test it out so
101:01 remember we have we have our kind of
101:03 project here our dashboard so just for
101:06 fun I'm just going to put in our
101:08 project.
101:10 ID so we know that this our project ID
101:13 right so that we can test it out so in
101:15 this case if I just get this if I just
101:17 copy this project ID here and come into
101:20 here and replace it here
101:24 hopefully I should be able to run this
101:26 function right um let's
101:29 see p comments I should await
101:33 this and boom I get to see this again
101:38 so basically what this does was it we
101:41 call this function whole comments on
101:43 this project ID we got the geub URL we
101:46 got the comment hashes we filter out the
101:47 one that we have not processed and we
101:49 just console locked it out and that was
101:51 what you saw here so so this is a list
101:54 of comits for this project right so it
101:56 proves that this works right and so
101:59 after we get the unprocessed comits
102:00 let's actually save them to our database
102:02 right but before we do that we need to
102:04 summarize the comments okay so to
102:07 summarize the comments let's actually
102:08 write a function
102:10 called uh Asing function summarize
102:14 commit right this will take in a GitHub
102:16 URL and the comment
102:19 hash okay and let me show you something
102:23 magical
102:24 so if I get a example comment has here
102:26 right how do I get the actual what what
102:28 change in this comment right because we
102:31 want to get what change this commit and
102:33 pass it into the AI so if I come into
102:36 github.com
102:37 right and
102:39 slash actually if I come
102:42 here to the URL and then if I go into
102:46 here's a secret code right so if I go to
102:47 SL commit I pass in the commit hash div
102:51 and I add div in at the back
102:54 here it say it's not found but what we
102:56 know here is let's see why is this
102:60 failing ah because is not the correct
103:02 project
103:03 so let's come in
103:07 here uh let's go into our project Here
103:11 Local Host
103:13 3000 right so let's go to our
103:17 dashboard page here okay we need to
103:22 actually put uh
103:24 Coalition so this comment this is the
103:28 kind of project ID that we're looking
103:31 for right uh let's
103:34 see if we save this and then actually
103:38 run this
103:42 project so let's see why this is the
103:45 case oh I know why okay this was a
103:48 mistake so because we hardcoded the
103:50 repository owner here right so here what
103:53 I really do is get the owner here so the
103:55 structure of a kind of GitHub URL
103:59 is the first part here is the owner and
104:02 the second part here is always going to
104:03 be the repository so to get it out we're
104:06 going to get GitHub owner right we're
104:08 going to
104:09 just split it by the slash so we split
104:12 by the Slash and we're going to get the
104:13 last two items here and we're going to
104:15 assign it and destructure it to the
104:16 owner and the report right and so we're
104:18 going to say if not owner or not repo
104:21 we're going to just say is an invalid
104:22 GitHub URL if not we're going to just
104:24 pass in to this object here so hopefully
104:28 I remove the heart coding if we run this
104:30 again I should be able to see okay cool
104:33 this is the list of commits for my
104:36 project right and so if I copy in the
104:38 commit hash again and I come into my
104:41 GitHub here and I come into my kind of
104:46 repository URL followed by slomit and
104:49 I'm passing the commit hash do div
104:53 I should be able to get back what has
104:55 actually changed in this comment so this
104:57 is a magical part here I'm going to pass
104:59 in this entire text here into an AI for
105:03 it to generate like the difference for
105:05 me so if I go to like chat gbt right now
105:08 I'm going to just comment here I'm going
105:09 to just copy this div I'm going to say
105:12 tell me
105:14 what tell me what
105:17 changed in this comment I'm going to
105:20 paste in here so AI should be able to
105:23 tell me that hey this is the summary of
105:24 the comment so it says that first name
105:26 and last name were updated by adding a
105:28 question mark to their types so this
105:30 accurate right so I want to
105:32 programmatically do this so to do this
105:35 I'm going to set up gini AI so gini AI
105:39 is free for you guys to use so just come
105:41 down to j. google.com or just search uh
105:45 Google jini AI right AI
105:50 API right so just go into Gemini
105:53 developer here and you can press so
105:56 after logging into Google AI Studio you
105:59 can just create API key so this URL is
106:01 at AI studio. google.com/ apppp API key
106:05 right so just create an API key right so
106:07 this going to be free for you right and
106:10 what I'm going to do is just copy the
106:11 API key into your kind of project so I
106:15 already have a API key so I'm going to
106:16 just reuse that from my previous project
106:19 right and so what you going to do is
106:21 come down to your EnV and just create
106:23 your your Gemini API key and actually
106:26 put in the actual value here okay and so
106:30 in this case I already have one and so
106:31 I'm going to just copy it in here after
106:34 copying the so after loading in the J
106:36 API key you can now officially use the J
106:39 API and to test it out I'm going to
106:41 create a new uh folder a new file within
106:43 lip called
106:45 g.s so this is going to house all our
106:47 Gemini API functions right and all kind
106:50 of interaction with AI and API including
106:53 kind of the embedding vectors that we'll
106:55 be using for retrieval augmented
106:56 generation model okay and so the first
107:00 step here is actually just to install to
107:02 use it we're going to install the at
107:05 Google generative AI uh module okay I'm
107:10 going to
107:11 import Google generative AI from this
107:14 module and I'm going to have a cons gen
107:17 AI equals to new Google generative AI
107:19 pass in your gini API key like this
107:23 and let's see the issue blah blah API
107:26 key actually yeah we don't need this
107:30 because it is just like
107:33 this cool just passing the string and
107:36 we're going to get the model it goes to
107:38 J.G generative model and obviously you
107:41 have a few options right but for now I'm
107:44 going to just choose Gemini
107:47 -1.5 Das flash so this a good balance
107:50 between speed and also U kind of power
107:53 right so this is a model be using from
107:54 germin we're going to export a cons uh
107:58 get a get Comet summary right let's call
108:02 summarize comment okay we're going to
108:05 take in the diff right so this diff is
108:07 going to be a string which is what we
108:09 saw just now in that uh kind of URL so
108:11 this going to be the GitHub
108:14 URL like
108:17 this right passing in the comment and
108:19 then this the comment
108:21 hash right div so if we have this URL we
108:25 are able to get back the actual commit
108:27 difference right we're going to pass
108:29 this div into this function and then I'm
108:32 just going to get the I'm going to have
108:34 a response cons response equals to await
108:37 model do generate content I'm going to
108:40 pass in a huge prom here so I'm going to
108:44 copy this in here right cuz I already
108:47 have refined The Prompt I don't to write
108:49 this entire thing out it's going to be
108:50 super tedious and so the point is that
108:53 you can see that I'm going to say that
108:55 hey you're an expert programmer you're
108:56 trying to summarize a git diff REM
108:59 remind us about G div format and so I'm
109:01 using some f shop prompting methods here
109:03 to just give you some example of what
109:05 divs look like and what the expected
109:07 output is okay and then finally I'm
109:10 going to just in uh template in my div
109:12 into the prompt and ask it to summarize
109:15 it and I'm going to get response. text
109:18 so to just prove that this works I'm
109:20 going to just console console. loock
109:22 await
109:24 summarize commit right and what I'm
109:26 going to do here is I'm going to pass
109:30 in the kind of let's see I'll pass in my
109:34 comment here so I'm copy this in here
109:38 and I'm going to p p this diff in here
109:40 and so if I want to run this file what
109:42 should I do exactly so B run s/ lip but
109:46 this time we are running the Gemini
109:48 folder right if I press this hopefully I
109:50 should get back some a rest respon from
109:54 jite and it works so you can see I'm
109:57 console. logging out the output of
109:59 summarized commit right which was just
110:01 the AI response to the diff right so you
110:04 can see that this is what it generate so
110:06 it's perfect right we are able to get a
110:07 summary of a individual a comit so now
110:11 we have this super convenient function
110:13 that we can use right to get the Su the
110:15 summary of a comit so we're going to go
110:17 back into our GitHub TS file so we
110:20 stopped here right so the summarized
110:22 commit what we're going to do is we're
110:24 going to
110:25 first uh get the div then pass the div
110:30 into eii right so remember what we're
110:34 going to do here we're going to have the
110:36 format right so cons data equals to
110:38 await AOS so we need to import AOS
110:44 right so let's import AOS from a so what
110:48 we're going to do is we're going to do
110:50 get right we're going to get what do we
110:52 want to get we want to get get
110:54 the uh let's
110:56 see GitHub URL right followed by commit
111:00 followed by the commit
111:03 hash that we're looking at right now
111:06 right div okay div and then we're going
111:10 to pass in headers right what we're
111:13 going to accept we're going to accept
111:16 um
111:18 application SLV and. GitHub v.d okay so
111:22 there's their own customer formatting
111:23 here and then this own custom content
111:26 type I mean I'm going to just return a
111:28 wait summarize comment right we're going
111:30 to import this summarize comment from
111:33 our uh kind of let's
111:35 see summarized comit sorry we cannot
111:38 name it the same function here so I'm
111:40 going to I guess I'm going to call it um
111:43 AI summarize comment okay so I'm going
111:47 to re import AI summarized comment right
111:49 which we import from G right our lip
111:52 folder and then finally I can just pass
111:55 in the div the data here and so in this
111:59 case if there's something went wrong I
112:01 just return an empty string okay so we
112:03 got this function called summarize
112:04 commit that takes in the URL and the
112:06 commit hash and now it returns us with a
112:08 summary so we can go back up to our P
112:11 comit function and continue writing the
112:14 the the function right so what we're
112:16 going to do here is let's continue so
112:19 we're going to get the list of summaries
112:23 equals to await promise the all settled
112:27 right we're going to pass in the
112:29 unprocessed comments. map for each has
112:34 here sorry for each
112:36 commit we're going to return the
112:39 summarized comment going to return the
112:41 function uh sorry return the output from
112:44 summarized comment right and we need to
112:46 pass in the GitHub URL as well as the
112:49 commit hash
112:51 here commit hash okay and
112:55 then we got this
112:57 responses summary
112:60 responses right we're going to get the
113:03 summaries equals to summary responses.
113:05 map right so if the response of stles to
113:07 fulfill I'm going to return response.
113:09 value as string right it's not going to
113:12 return empty string and then finally I'm
113:15 going to save this summary and the
113:16 commits into my database so that's the
113:18 commits equals to await db. commit.
113:22 create menu right so I'm going to just
113:25 Loop through the list of summaries that
113:27 I got right so for
113:30 each
113:31 summary and
113:35 Index right for each summary and index
113:38 I'm going to
113:40 return right I need all this stuff right
113:43 so we need the project ID obviously we
113:45 have the project ID right we need the
113:48 commit hash right which is the
113:51 unprocessed commits in index into this
113:54 index here do commit hash
113:57 right and then we're going to just pass
113:59 in everything else here okay so comment
114:02 message and so we know that this will
114:04 definitely exist so just replace it with
114:05 exclamation mark right we'll pass the
114:07 comment message the author name the
114:10 dates the author Avatar and obviously
114:13 the summary here and so this summary
114:15 comes back from our AI summary and
114:17 finally we can just return the
114:21 commits like this
114:23 so in one one F soup what we have done
114:25 is we this function will take in the
114:28 project ID it's going to fetch us the
114:31 URL of the GitHub URL we're going to get
114:34 the comment has cash hases from GitHub
114:36 API we're going to filter out the
114:39 comments that we have already processed
114:41 we're going to then summarize all the
114:42 comments that we the summarize all the
114:44 new comments and then we going to save
114:45 them into our database and so now we
114:47 have this very handy pull comments
114:49 function that we're going to call right
114:51 so we're going to call this function
114:52 function uh let's see let's say we call
114:56 this function every time we create a
114:58 project so here after I create a project
115:01 I'm going a wait P commit right passing
115:04 in the project. ID right and then I'm
115:06 going to return the project and so guess
115:09 what if I now come into my create a new
115:12 project and I give in a kind of name so
115:17 like comments I pass in my let's say gen
115:21 AI stack
115:23 and if I press create projects right I'm
115:26 going to log it out as well so I'm going
115:27 to come to my PO comments and let's just
115:30 say for
115:33 each uh comments
115:36 here I'm just going to say I'm
115:40 processing
115:43 console.log uh processing commit index
115:48 here right like this so we can just have
115:50 some output to see what is happening in
115:52 our console right and so I'm going to
115:55 just comment this out here first
115:58 right and so now if I create a project I
116:01 should call this PO comments function
116:03 that that does all this thing and save
116:05 it into our database and so I'm going to
116:07 try out here I'm going to press create
116:09 project and hopefully as you're able to
116:12 see create cannot read uh prop undefined
116:15 so I updated my Prisma DV so I just need
116:18 to restart my server to make sure that
116:20 my database is in syn with my server
116:23 so I'm going to refresh my server and
116:24 refresh my page and this time it should
116:26 work again say commit test here and so
116:31 if I give it a geub URL of gen St I'm
116:33 going to press create project and if I
116:35 go back into my server hopefully I can
116:37 see my comment is being processed so
116:40 let's wait for it blah blah
116:42 blah so in a bit it's going to take some
116:45 time obviously right it's going to take
116:47 like 10 20 seconds but in a while I can
116:50 see okay processing commit 0 1 2 3 4 5
116:52 79 10 right that means that he has
116:55 already got back the comments and
116:56 summarized it and so if I come into my
116:59 Prisma
117:02 Studio like this I should be able to see
117:06 the list of comments here okay I got 10
117:08 comments that's a good sign and I can
117:10 see my comment message and most
117:12 importantly I get to see the summary
117:14 here right and so this summary is my AI
117:17 summary and that means I have
117:19 successfully saved it and has linked it
117:21 to my project so now let's actually
117:23 display this on the UI okay so let's
117:26 stop
117:27 this let's display this on the UI so
117:30 remember remember we have this uh uh
117:34 let's see dashboard we have this comment
117:37 lock right so come back down to your
117:40 dashboard page I'm going to create a new
117:44 component here called commit Dash loock
117:48 TSX and this is going to be client
117:51 component I'm going to do
117:53 RFC I'm get the commit lock here and I'm
117:57 going to come down to my project and I'm
117:59 going to write another router I'm going
118:01 to write now query procedure that says
118:04 get comments right and so GitHub compil
118:06 already knows what's up I'm going to get
118:08 in the project ID I'm going to just get
118:10 back all the list of comments that that
118:12 belongs to this project ID with this
118:14 function I am now able to get the list
118:17 of comments so I'm going to get my
118:18 project ID from my used project hook
118:21 first right right see so this Ed project
118:23 H is actually super useful and let's see
118:26 why okay I guess it's uh we need to
118:29 import it ourself import use project
118:31 from our
118:33 hook let's see use project okay our
118:35 typescript server is kind of juny so
118:37 let's reload of vs code okay and let's
118:42 just let's see if we can report this
118:44 Okay cool so we got our project ID and
118:47 now we can actually get our comments
118:49 right from
118:50 calling API
118:54 do that project. getet commit passing in
118:58 the project ID here okay cool and so
119:01 then at this point at this point I can
119:05 then just for now I'm going just put in
119:08 a preag and just render out the list of
119:10 comments so let's see if this works so
119:13 if I refresh the page nothing happens
119:15 because we haven't rendered this
119:16 component so instead of just hard coding
119:19 this text why not let's just import the
119:21 comment lock
119:23 and so hopefully if I come down to
119:25 comments test I get to see the list of
119:27 comments here boom perfect so now let's
119:31 actually make the UI nice right so let's
119:34 see oh this is actually a long kind of
119:38 component but we're going to code it out
119:39 together so what I'm going to do is
119:42 going to return a UL right with a class
119:45 of space- Y of six okay we're going to
119:49 Lo Loop over the commit the map passing
119:52 in the comment and comment
119:56 index like this and for each comment
119:59 we're going to
120:00 return a list item here with a key of
120:05 commit. ID and a class name of relative
120:09 Flex Gap X of4 inside here we have a big
120:13 div within this div we're going to give
120:16 you a class name of
120:19 CN and so conditionally render so if
120:22 index equals to zero sorry if it's the
120:24 last Index right so if it's index equals
120:28 to commit. left minus one we're going to
120:31 have a height of six if not we're going
120:33 to have a negative bottom of six right
120:36 let's
120:37 see uh right we going to put this in the
120:40 object
120:42 here let's see what's issue cool and
120:46 then we're going to have just a uh
120:49 normal stuff here let's see m
120:55 okay we're going to have absolute left
120:57 of zero top of zero Flex width of six
121:02 and justify
121:04 Center so once we have this inside this
121:07 diff we're going to just have
121:11 uh clust name of width of
121:14 pixel translate X of 1 and BG gr of 200
121:19 okay so outside of this this div right
121:23 we're going to have a
121:24 fragment
121:26 here we're going to have a image tag
121:29 right so this for the commit author
121:31 image right and this is obviously going
121:34 to have a the commit do commit author
121:37 Avatar right let's close this tag here
121:41 we'll give you out tag of comet
121:44 Avatar we'll give it a class name of
121:48 relative margin top of
121:50 threee size of
121:53 eight uh Flex of
121:57 none like
121:59 this rounded of
122:03 four and BG G of
122:06 50 so if you save it right now we can
122:08 see the list of kind of our line as well
122:11 as the author right below this image
122:14 we're going to have a div with a class
122:16 name of flex D Auto rounded medium
122:19 background of white padding of threee
122:21 Ring of one ring inser ring gray of
122:25 200 and inside this div we're going to
122:28 have another div with a class name of
122:31 flex just defy between Gap X of
122:37 four inside here we're going to have a
122:39 link right this link is going to have a
122:42 target of blank and the hitra of commit
122:46 the
122:46 C and the HRA will be a templated string
122:51 of pro project so we need a project from
122:54 this our active
122:58 project project. GitHub URL followed by
123:02 slomit slomit hash and we'll actually
123:06 put in the uh inside the link we're
123:08 going to have a class name of padding y
123:12 of
123:14 0.5 text XS leading of five and let's
123:19 see text R of 500
123:23 inside here we're going to have a two
123:26 spin right the first span is going to
123:29 just have the comment the author
123:33 name with a class name of font D
123:36 medium text gr of
123:40 900 like this and then underne this span
123:45 with a classing of inline
123:47 Flex items that Center okay inside we
123:51 going have commment
123:52 it and then we have a external link icon
123:57 here class name of margin of one and
123:60 size of four cool so now this is
124:03 starting to look good okay and then
124:07 other than that let's see let's come out
124:09 of this diff and we have a span with a
124:12 class name of font
124:15 semi and we have the commit. commit
124:18 message and under if the span we're
124:21 going to have the pre
124:23 and obviously this pre will have margin
124:24 to of two this is a summary right white
124:27 space of pre
124:29 wrap text
124:31 SM right leading
124:34 of leading of six text gr of 500 right
124:40 and this is where we put our comic.
124:42 summary and boom okay this looks kind of
124:45 weird I think we made a mistake okay I
124:47 think both of these things has to be
124:49 still in the div right okay now that
124:52 looks much better cool so we got the
124:54 summary here so this from Gemini we got
124:56 the actual comment message and we got
124:57 the person who commented as well as the
124:59 Avatar cool we did it so we now have
125:02 this commit uh stuff here and can see
125:04 that it Scrolls all the way down right
125:07 and so okay we're doing extremely
125:08 extremely well and so now we get the
125:11 list of comments right and what we're
125:14 going to do is every time you can see
125:16 that we get this comments right before
125:19 we actually return the comments I'm
125:20 going just do p comments
125:23 comments here right I'm going to do do
125:26 do then.
125:28 catch right passing in the error so
125:31 every time we fetch the comments right
125:33 we're going to just check if there are
125:34 new comments if there are new comments
125:35 we're going to summarize it and we're
125:36 going to display it right so this how
125:38 we're going to do the polling here so
125:40 really great job guys right let us
125:42 actually continue to the next
125:44 part all right so let's go to the next
125:47 part I'm going to create the question
125:48 card so before that I'm going to show
125:51 you the actual key component of getting
125:53 a GitHub project and getting all the
125:56 files and all the contents of the files
125:58 of the repository right so to do that
126:01 we're going to use l chain right so Lang
126:03 chain is just a uh super
126:06 nice uh super nice library that allows
126:09 us to work with large language models as
126:11 well as unstructured data or any kind of
126:13 data right so it's actually a super
126:15 helpful Library I'm going to be using
126:17 that to actually load in the GitHub
126:18 project GitHub repository right so the
126:21 first thing I'm going to do here I'm
126:22 going to install L chain so just do
126:24 install but
126:27 install uh
126:29 at Lang chain Community uh at SL Lang
126:33 chain core and ignore so you need these
126:35 three things here right to make this
126:37 work right so after installing it here
126:40 come down to the project and I'm going
126:42 to create a under lip I'm going to
126:44 create a GitHub D loader. TS so this
126:47 GitHub loader is primarily primarily uh
126:50 going to be a function that allows us to
126:53 take in a GitHub URL and give us back
126:55 the list of files in the URL in the
126:58 repository so let's actually write the
127:01 function
127:02 export uh function load GitHub
127:06 repository right so this is going to
127:09 be an Asing function that takes in the
127:12 GitHub URL and optionally a GitHub token
127:16 right so this GitHub token uh could be
127:20 used to actually access a private
127:21 Repository Tre and so I'm going to
127:24 import the actual loader so I'm going to
127:25 just import this function import from at
127:31 chain SL community/
127:33 document loaders so type in exactly what
127:36 I'm typing in right now and we need the
127:39 GitHub report loader so Lenin kindly
127:42 provided us with this kind of class that
127:45 allows us to just load in the files of
127:48 of the repository so enough talk let's
127:51 actually write write the code so the
127:53 first thing is I'm going to create a
127:55 loader
127:57 instance it go to new GitHub loader
128:00 right passing in the access token so if
128:03 I have a GitHub access token I'm going
128:05 to pass it in if not I'm going to pass
128:06 in my default kind of uh let me see what
128:10 I mean by this I'm going to pass in a uh
128:15 default GitHub token here
128:17 okay and so actually no by default
128:20 there's actually n I'm going pass no
128:22 default token okay and then what we
128:25 going to do is we can pass in a few
128:27 options right so we obviously got the
128:31 branch right which is main or you can
128:33 change to any branch you want right
128:35 we're going to ignore some files so we
128:37 OB ignore some pretty common funs like
128:40 package lock or like some pmpm lock or
128:43 like even bun. loock B so if you got
128:46 some specific requirements here you can
128:47 just ignore it here and you can set
128:49 recursive to be true or false so by
128:51 default is going to be false meaning
128:53 that it's only going to be in the top
128:55 level folders and files but if you want
128:57 really every single folder and file
128:59 inside there you need to set recursive
129:01 to be true right and then you can have
129:04 unknown to be worn so if there's some
129:06 unknown F types like some binary some
129:08 PDFs right we're just going to make sure
129:10 they warn us and then concurrency we're
129:13 going to set to five okay and then we're
129:17 going to get docs equals to await
129:18 loader. load right and then we going to
129:20 return the docs so if I just do console.
129:23 lock
129:25 out uh load GitHub repo what do you
129:29 think will happen so if I just log load
129:31 out my repository like
129:34 alron SL chat PDF YouTube right so let's
129:39 see what actually gets returned us with
129:42 right so how do we actually run this I'm
129:44 sure you guys no
129:47 right z
129:49 z let's see
129:52 YouTube what the hell is
129:55 this uh that's weird why am I note
129:58 modules okay weird but anyways if I run
130:02 this by running Soo bu run s/ li/ GitHub
130:06 loader right theoretically it will run
130:08 this uh loader on my URL which hopefully
130:12 return me with a list of documents which
130:14 are defaults so if I run this let's give
130:16 you some time and if you give it like
130:19 maybe 10 seconds okay that's actually
130:21 super fun
130:22 you can see we get back a list of
130:25 documents so it's an array and each
130:27 document has a document sorry each list
130:29 each item is a document right and it
130:32 will have a metadata which is which has
130:34 a source which is the file name right so
130:36 this case is the sourceip dv/ index.ts
130:40 and I also get back the page content so
130:43 the shape of this Json is actually like
130:44 this so I'm going to just export this
130:46 out so I'm going to get this out like
130:49 this so the return type is actually like
130:52 this so for each document or each item
130:55 in here we get the page content which is
130:57 actually the content of the file we get
130:59 some meta data which has the source
131:01 which is the file name right and some ID
131:03 which we don't really care the only
131:05 thing we care about is the page content
131:07 and the name of the file okay so this a
131:09 super powerful concept right and I'm
131:11 glad we can use this right and now with
131:14 this knowledge I'm going to walk you
131:16 through exactly how we're going to build
131:18 an entire uh production ready retrial
131:21 augmented generation system I'm going to
131:23 walk you through step by step including
131:25 how we're going to actually query it so
131:26 if you're new to AI you're new to Vector
131:28 databases you're new to a retrial
131:30 augmented J generation fret not because
131:32 I'm going to explain to you every single
131:34 step that is to build out this
131:37 system all right so oh my bro I was
131:42 recording for like 30 minutes just now
131:44 and I was like explaining everything and
131:45 like cing it out I realized that like I
131:48 wasn't recording so that's kind of
131:50 frustrating but it's okay we're going to
131:52 go back to where I kind of we stopped
131:54 last time so we talk about loading the
131:57 GitHub repository right and now I'm
131:59 going to give you a high level overview
132:00 of how retrieval augmented generation
132:03 system actually works okay so let us go
132:07 into Skelly draw okay
132:09 so uh Lo gab REO right let's see okay
132:14 yeah so now we stop here we basically
132:16 use Lang chain to get a list of
132:18 documents uh from uh from the GitHub
132:21 repository
132:22 and we've already seen the shape of the
132:23 document right so each document has a
132:26 page content which is the actual source
132:28 code as well as the meta the file name
132:31 stor in the metadata source of uh key
132:34 okay and so the next step is after we
132:36 got this list of documents what we're
132:38 going to do is we're going to call the
132:40 Gemini API to summarize the contents of
132:42 each document so instead of embedding
132:45 each source code directly we're going to
132:47 convert it and pre-process it by getting
132:50 the summary of the document first and so
132:53 if you do get summary and passing the
132:55 page content we get an example output
132:57 like this right so we're going have a
132:59 prompt for this as well so what I'm
133:02 going to do is going to look through
133:02 each document from out the repository
133:05 and just call the get summary function
133:06 on each of them right so we probably do
133:09 a promise. all to Loop through all of
133:11 this and call this function and then I'm
133:13 going to do is I'm going to do a vector
133:15 embeding of each arm me so if you're not
133:17 familiar with what an embedding is uh at
133:20 embedding it just measures the the
133:21 relatedness of text streams
133:24 semantically and really an embedding is
133:26 just a vector of like an array of uh
133:30 numbers okay and so the the easiest way
133:33 to uh explain and understand a vector or
133:36 embedding is just in a 2d space a vector
133:38 is just an arrow in two Dimensions you
133:41 got an X axis and a y axis right and so
133:45 how close an arrow is or how close two
133:47 Vector embeddings are or how close two
133:49 vectors are what this mean means is that
133:53 closer means a more
133:57 similar right and if you are pointing
134:00 very far far away that means
134:02 semantically or in meaning you're not
134:05 similar right so if I have change. Pi
134:08 like I got the summary of change. Pi I
134:10 got the summary of reach me. MD I got
134:12 the summary of env. example I got the
134:14 summary of PDF board right this all of
134:17 these arrows are pointing in this
134:19 general direction which means that on a
134:21 visual L I know that these four files
134:24 are probably talking about very similar
134:25 things okay and you can see index. TSX
134:28 is pointing away which means that the
134:31 the file contents probably is talking
134:33 about something very different and
134:34 that's why it's pointing away okay and
134:37 so what we're going to do is after we we
134:40 create the we get the summary of the
134:42 list of documents we're going to call a
134:44 function called get embeddings to get
134:46 the actual uh array of numbers or the
134:49 vector representation of the summary and
134:52 then we're going to store all of these
134:53 embeddings into our Vector store in this
134:57 case we're going to use postgress SQL
134:58 because postgress also provides us with
135:00 a PG Vector extension that allows us to
135:03 store manipulate and query uh Vector
135:05 data within our SQL so we are killing
135:08 like basically two BS with one stone
135:10 okay and so once we do this process of
135:13 getting the summary of each document
135:14 generating and beddings and saving it
135:16 right what happens when we actually want
135:18 to query the data and ask a question
135:21 right so it's like if I come into our
135:24 app here and I ask like what models if I
135:28 refresh what models slash uh LM does
135:32 this project support okay I ask and you
135:35 can see that it pulls out relevant files
135:37 that it's referring to right how does it
135:40 know which files to refer to how does it
135:43 know which re relevant files it has to
135:45 look up to in order to answer my
135:46 question right how it does that is the
135:49 first step is it's going to take my
135:51 query my question and it's going to
135:53 generate an embedding of it okay it's
135:56 going to take the query Vector it's
135:57 going to place it into the same space as
135:60 all my current files right and in this
136:02 case you can see the query Vector just
136:03 happens to be in this direction as well
136:06 and from a visual glance I can
136:07 immediately tell that these four files
136:10 are probably the most similar to what
136:12 I'm asking about which means that I can
136:14 just take this four files as the most
136:16 relevant files related to my question I
136:19 can then take this uh top 10 relevant
136:21 files right and put it into the AI
136:25 context right I can see that here you're
136:28 an AI code assistant who answers
136:30 questions about uh codebase your target
136:32 audience is a technical intern blah blah
136:34 blah and then I can take all the the
136:36 relevant files to my question and put it
136:38 into the context block of my Ai and then
136:42 I can ask my question of hey Which
136:45 models does this AI support and because
136:48 the AI now has context sorry the an has
136:51 context of the exact relevant files that
136:53 we're asking about is able to gen
136:55 generate something that's actually
136:57 actually super accurate right you can
136:59 see that all of this information from uh
137:02 from sorry all this information from AI
137:06 is directly related to my code base
137:07 which means that uh the AI has full 100%
137:10 accuracy context of the code base which
137:13 is a powerful concept right so it means
137:16 it w't hallucinate and you're able to
137:17 get very good
137:18 answers okay and so that is the high
137:22 level overview we talked about how to
137:24 actually load in the documents we talk
137:27 about how to get the summary we talk
137:28 about how to embed them into vectors and
137:30 store into our database so now let's
137:32 actually implement it because it's
137:34 actually not that hard okay so the first
137:37 step here is literally just trying to uh
137:40 represent that in our database so let's
137:42 go into our schema. Prisma okay and I
137:44 already added a model just now because I
137:46 wasn't recording but it's just this one
137:48 table right and what this table does is
137:51 it's just a row representing one
137:54 document and it means it's a source code
137:56 embedding okay so for each kind of row
137:59 that you see here where we have the
138:01 summary and we got the embedding how do
138:03 we store it how do we represent it in
138:04 the vector store it is in this we are
138:06 storing into this table called source
138:08 code embedding okay this source code
138:11 embedding will have certain FS okay the
138:14 first one is obviously the embedding of
138:15 that summary right which is a vector of
138:18 768 Dimensions right and the reason why
138:22 768 is because of the particular
138:24 embedding model that Gemini provides us
138:26 with
138:28 okay and then obviously each document
138:30 will have the source code represented it
138:32 will have the file name here right and
138:34 then it has the actual summary that we
138:37 that we also generated from AI okay and
138:39 all of these embeddings belong to one
138:42 project right because one project is
138:45 related to one gab repository and one
138:47 repository generates a list of of source
138:50 and settings okay and so one more thing
138:53 you need to add here is you need to go
138:55 up here and you need to add this preview
138:57 features right and this preview features
138:60 you have to put in uh postgress SQL
139:04 extension and then you can come down
139:06 here to our database and in the
139:07 extensions to tell postgress that hey
139:11 I'm going to use the vector extension
139:12 can you help me install it so that I can
139:14 use this Vector array here okay so make
139:18 sure you just have all this and make
139:19 sure that this is a question mark which
139:20 means that this this embedding is
139:22 optional for now and I'll show you why
139:24 in a in in a bit okay so let's actually
139:29 implement the steps right so the first
139:30 step is load it in here right so let's
139:33 actually have a function so this is our
139:34 main function whenever we create a new
139:37 uh project within dionysis right which
139:39 is export cons um index GitHub repo
139:45 right equals to A gith we're going to
139:47 take in a GitHub URL right we're going
139:49 to take in a project ID first right
139:52 we're can take in the GitHub URL and
139:53 also optionally a GitHub token which is
139:56 a string okay and really the first step
139:59 here is we're going to get the bunch of
140:02 documents okay so we're going to get
140:05 cons docs equals to await load GitHub
140:08 repo which is the function we have right
140:11 up here that uses Lang chain to load it
140:13 in passing the GitHub URL and the GitHub
140:15 token
140:17 okay the next step is to get all
140:22 embeddings right a weight generate
140:27 embeddings so we let's write a function
140:30 here uh
140:32 cons generate embeddings so this
140:35 function is going to take in the list of
140:39 documents like this right and it's going
140:41 to do two things the first thing it's
140:43 going to do is going to look through the
140:45 the files it's going to generate a AI
140:48 summary of the file and then it's going
140:50 to then take the summary and create a
140:52 vector embedding of it right and so it's
140:55 going to take in a document and
140:56 hopefully it spits out both the summary
140:59 and the embedding and this document
141:02 right we can actually import the
141:04 document from Lang chain SLC documents
141:07 right and this will have the actual
141:09 proper types here okay so we're going to
141:12 just uh write return a wait promise the
141:17 all we're going to take the docs map
141:22 right and for each dock we're going to
141:25 have a Asing dock right like
141:29 this we're going to get the summary
141:32 equal to await uh summarized code and
141:35 when do we get this summarized code um
141:38 we get the summarized code by going to
141:40 our Gemini file let's write the
141:43 function Asing function summarize code
141:48 we get this document right we can import
141:50 the document from L chain core right so
141:53 we're going to
141:55 just come down here okay I'm just going
141:59 to let's see do I have a relevant thing
142:03 here yeah this will work this will work
142:07 okay so the thing is we're going to say
142:10 we're going to just log out that we're
142:11 getting the summary for the file name
142:13 okay we're going to get the code right
142:15 which is going to be the page content
142:16 I'm going to just limit to the first
142:18 10,000 characters in case our context
142:20 overun
142:22 and then we're going to just put in a
142:23 prompt say hey you're an intelligent
142:25 senior software engineer specializes in
142:28 onboarding people right and then we're
142:30 going to ask them to explain the purpose
142:32 of the code passing in the code here and
142:36 say give a summary of no more than 100
142:37 words or less and we just going to
142:40 return the text here okay so we got this
142:43 summarized code function come back down
142:44 to a gener embedding function we're
142:47 going to import the summarized code from
142:48 Gemini right and now that we got the
142:51 summary remember what's the next step we
142:53 actually need to generate the embeddings
142:55 right and to generate the embeddings
142:57 luckily Gemini also gives us a very
143:00 convenient function called
143:03 generate embedding right and we're going
143:06 to need take in a text a text field or
143:08 string right and this could be the
143:10 summary right we're taking the summary
143:12 and we to generate the vector embedding
143:14 uh representation of it and to do that
143:17 is really simple so you're just going to
143:19 get a model the embedding model from to
143:22 be gen
143:23 ai. get generative model and the model
143:27 we're using is specifically text-
143:29 embedding D o4 so make sure you're
143:32 putting this exactly right okay I'm
143:34 going to get the result equals to be
143:37 await model. embed content passing the
143:41 summary and we'll get the embedding to
143:43 be result. embedding and we just return
143:47 embedding do values right and you can
143:50 see that this is literally just an array
143:52 of numbers right and I can test this out
143:55 I can just do
143:56 console.log await generate embedding
143:59 hello world and if I run this function
144:03 right I should be able to see the output
144:05 of this so if I just run Gemini
144:09 TS you can see that it's literally just
144:12 a array with
144:14 768 numbers right that is all a vector
144:17 is right so this is the representation
144:20 of hello world okay so I'm going to
144:22 delete this we're going to come back
144:24 here we're going to get the embedding to
144:26 be
144:27 await generate
144:30 embedding inut from gmin passing the
144:32 summary like this
144:35 okay and then finally we're going to
144:39 return the summary we'll return the
144:41 embedding we'll return the source code
144:45 right to be Jon the parts Jon the
144:47 stringify the page content in case there
144:49 like some in uh some error in the pitch
144:52 content and then the file name will be
144:54 the metadata The Source okay and that's
144:57 all basically we're going to get all
144:59 embeddings to be gen embeddings passing
145:01 the docs so this does two things right
145:04 so this literally gets the summary as
145:07 well as embed the summary for us okay so
145:09 now the last step is just to store it
145:11 into our database which is easy right so
145:14 all we have to do is we'll come down
145:16 here to we'll do await promise
145:23 the all settled right will get all
145:26 embeddings map right for each
145:29 embedding what do we want to do right we
145:31 just going to console. loock uh
145:35 processing index of all embeddings of
145:39 length just to keep track of it right so
145:41 if there's no
145:43 embedding we just going to return okay
145:46 but now we to insert each embedding so
145:47 we're going to Loop through all the
145:48 embeddings we have and inserted into our
145:51 source code embedding table right so we
145:54 get the source code embedding equals to
145:57 a weight
145:58 DB do source code
146:00 embedding right this should be a Asing
146:04 function do insert right and what's the
146:08 data right we want we know that we have
146:10 the summary to be the embedding the
146:13 summary we have the source code to be
146:15 embedding the source code and we got a
146:17 file name okay and let say create like
146:21 this okay and can you tell me what's
146:24 missing from this insert we got the
146:25 summary we got the source code we got
146:27 the file name and the project ID but if
146:30 you if you realize where is the actual V
146:32 Vector how do we insert the
146:35 vector and just by the nature of Prisma
146:37 Prisma just doesn't support kind of
146:39 inserting our vectors for now that's why
146:41 we need to write a raw SQL query to
146:43 insert the vector after we have created
146:45 the row and so really we just have to do
146:48 await DP do doll sign execute raw right
146:52 and we just write a raw SQL quy we'll
146:54 say update source
146:57 code sorry source code embedding right
147:02 set summary embedding to
147:06 be the
147:08 embedding do embedding so this is the
147:10 actual number actual Vector right so
147:13 number array right and we're going to
147:15 cast it to a vector like
147:18 this right where ID equals to Source
147:22 eding ID so what we did was basically we
147:24 just inserted the Row first without the
147:26 vector and after inserting the row we
147:29 run a raw SQL query to update the same
147:31 row right we update the same row and
147:34 this time we update the vector column
147:36 right this is how it actually works okay
147:39 and so because of this we are basically
147:42 done if I go back into my project
147:45 whenever whenever I create a project now
147:47 right I should also call this a weight
147:50 index GitHub repository passing in my
147:54 project ID GitHub URL and GitHub token
147:57 so this index GitHub reble will load in
147:59 all the documents you'll get the summary
148:02 create the embeddings and then insert it
148:04 into a database for me okay and so let's
148:07 actually try it out to see if it works
148:09 I'm going to exit this and I'm going to
148:11 just restart my server to make sure
148:12 everything is
148:14 working like
148:16 this and so if I come back here to my
148:19 local host
148:21 I'm going to create a new
148:23 project let's try out so let us just say
148:25 test embedding we'll give a GitHub URL
148:28 of gen stack and we have no gab token so
148:33 when I say press create project right we
148:35 can look into our our console we should
148:37 start seeing our summary so you can see
148:40 we going to get back the list of
148:41 documents all the files in the
148:43 repository we're going to slowly get the
148:45 summary for each file blah blah blah and
148:47 then okay candidate was blocked due to
148:49 safety blah blah blah Okay Google
148:51 generative AI error okay so there was
148:53 probably an error here that means that
148:56 Google generative probably like detected
148:58 there was something malicious happening
148:60 which is okay which is okay what we can
149:03 do here is go into our gini model so if
149:06 they don't want to actually give us uh a
149:09 code we're going to put in the try catch
149:12 block
149:14 here and we're just going to literally
149:16 just return empty string okay like this
149:20 so let's try again let's try again so
149:23 I'm going to press create
149:25 project we should get a summary right
149:27 we're getting the summary of all the
149:29 code and we can see that slowly we can
149:33 see
149:34 processing right processing 0 44 one or
149:38 44 blah BL blah and so what this does is
149:41 is getting the summary it's embedding
149:42 the summary and you can see that's
149:44 inserting into our sofcore embedding
149:46 right uh into our vector and that means
149:51 at the end it's successful and we get my
149:53 test embedding back okay that's cool and
149:58 how do we actually verify that it works
149:60 right if I come into my sudo bun Prisma
150:03 Studio let's verify that the source Cod
150:05 embedding has been created right we can
150:08 see that sourcecore embedding has 88
150:10 that was because I had a duplicate test
150:12 but the point is that now we can see
150:14 that we got the source code actual
150:16 source code of the files we got the file
150:18 name we got the summary that the has
150:20 generated for us and we got the project
150:23 ID and there's supposed to be a a kind
150:26 of vector embedding here but I think
150:28 because Prisma doesn't support it it
150:29 doesn't display but trust me when I say
150:31 that we don't have a vector embedding
150:33 column here that goes alongside
150:35 everything here that's a representation
150:37 of the sun R cool so now that we have
150:40 this powerful thing we can now start
150:42 building out some UI to actually
150:46 display uh this stuff right when we ask
150:49 a question how do we actually put in the
150:51 relevant files right as we discussed
150:54 here how do we put in the relevant files
150:56 and actually uh do
150:58 R so the reason why it's called
151:01 retrieval augmented generation because
151:03 you have to think of it in three words
151:04 so retrieval augment retrieval augmented
151:07 and generation augmented just means
151:09 change augmented literally means change
151:11 okay retrieval refers to the retrieval
151:14 of relevant documents based on the query
151:17 and generation here just REM refers to
151:19 normal inference of generation so if you
151:22 break it up into two parts right
151:24 retrieval augmented generation this
151:27 makes more sense because what you're
151:29 doing is you are retrieving relevant
151:31 stuff and you're putting the relevant
151:33 documents into context of the AI and by
151:36 putting this relevant documents into the
151:38 AI you're effectively augmenting the
151:41 generation you're changing the
151:43 generation and therefore it's that's why
151:45 it's called retriever augmented
151:47 generation right so I hope this makes
151:49 sense kind of a tid bit for you but this
151:51 really helped me understand what R is
151:53 really about it's really just about
151:55 getting the right information into the
151:57 AI which allows them to give us a better
151:59 answer so finally let's actually build
152:01 some UI right so if I come back to my
152:03 logo host let's actually replace the ask
152:06 question card okay so let's actually
152:09 just clear out all our stuff let's go
152:10 into our dashboard page again instead of
152:13 this question card let's actually create
152:14 a new component here called ask-
152:17 question- card. TSX right
152:20 and in here let us have a normal use
152:23 client ra fce ask question card right
152:29 and we know we're going to need the
152:30 project right so let's just get it in
152:33 advance use project like this and let us
152:37 just replace this with ask question
152:41 card cool so now we can see everything
152:44 is still normal right but this time
152:48 let's actually bu some UI so the first
152:50 thing here I'm going to do is just
152:51 return a card from component card with a
152:56 card
152:57 header right and a card title that says
153:02 ask a question cool and I the card with
153:07 the card
153:09 content in here we're going to have a
153:11 Syle form right with a text area right
153:16 that says that has a placeholder
153:19 of which file should I edit to change
153:23 the homepage like this and then we'll
153:27 have a spacer and we'll have a button
153:30 from components that says ask
153:34 diis and we type of submit and let's
153:37 have a kind of question State here for
153:41 the text area and we'll just bind it
153:44 here pre-standard stuffff cursor know
153:46 what know what's up right and then what
153:49 we're going to do here is I'm going to
153:50 just have a cons
153:54 onsubmit that prevents the defaults and
153:56 just alert out the
153:59 question and just pass in into here
154:02 unsubmit here so right now we can see we
154:06 got this very basic UI let's give it
154:08 some Styles so this card will have a
154:11 class name of relative and column span
154:13 of
154:14 tree so now it looks better right
154:17 because how it's going to work is this
154:19 is going to be a g right has five
154:21 columns this is going to take up three
154:22 columns and this is going to take up two
154:24 columns so we are SP splitting it by a
154:26 3X two ratio cool so that's how we
154:31 achieve this kind of look okay and so
154:33 I'm going to type this looks good so
154:35 when I press on this button right right
154:38 we're going to see the the kind of
154:40 answer or the question that we're asking
154:43 so for now I'm going to just I just want
154:44 to I want to kind of pop up to show up
154:47 right so what I'm going to do here is
154:50 I'm going to have a dialogue here from
154:53 components UI and I'm going to have a
154:56 open state to track whether the dialog
154:58 is
154:59 open open on open change and we have
155:03 import the dialogue content here so the
155:06 dialog content is literally just a um a
155:08 modo right and then
155:12 the uh let's
155:14 see we have a d let's see does this make
155:18 sense
155:22 um Di has a dialog heer like this dialog
155:28 title right and this is the actual
155:30 question that you that you're
155:32 asking um no actually let's put the our
155:36 logo here
155:38 image of dionis here/
155:42 logo.png and let's give you a height of
155:44 40 like this and then that's pretty much
155:49 good
155:50 and so when I click on this submit I'm
155:54 just going to just set the open to be
155:56 true so hopefully now if I
155:59 press now this pops up right and
156:02 actually here this dialog header had to
156:04 be in the content so that now that this
156:07 works so when I click on it we can see
156:10 that we got a logo here and we got stuff
156:12 happening here so in now next section
156:14 we're going to implement the actual uh
156:16 logic of quering our Vector embedding to
156:20 get the relevant files and stream back
156:22 the answers from Google jite so we're
156:24 doing really good so far right so after
156:26 this section we're going to really have
156:28 some really fun stuff to be working on
156:30 so good job and let's get
156:32 on all right let's
156:34 continue okay so we stopped that
156:37 basically getting in a question and
156:39 getting this model up right so the idea
156:41 effect is we're going to get this
156:43 question right if you come back to my
156:46 excal draw to get real retri augmented
156:49 generation is the first step is to get
156:51 the uh convert the quy to an embedding
156:54 and then do a vector similarity search
156:57 right for top 10 files or top many files
157:00 you want then we're going to take the
157:02 contents of all the top 10 files insert
157:04 into this big prom and then stream back
157:06 the answer into the UI Okay cool so
157:09 let's actually execute on that it's not
157:10 too hard so see what's this
157:14 error uh test embedding oh right cuz I
157:17 have these two names well it's fine I'll
157:19 delete delete one of them later right
157:21 we're going to have archive button later
157:24 um yeah yeah yeah okay so let's go back
157:27 here uh to this and what we're going to
157:30 do here is what we're going to do here
157:32 is we're going to have a let's see how
157:34 we going to do this we're going to have
157:37 a okay when we submit here right now we
157:41 just open the dialogue right I'm going
157:44 to just create a new file called
157:47 actions. TS so this the GS uh server
157:51 action here and what we're going to do
157:53 here is really just Implement that Ral
157:57 augment answering system so the first
157:59 step here is um we need to install a few
158:03 package to make the streaming work so
158:05 install M install AI as well as at ai-
158:10 SDK Google so we need these two things
158:13 right to actually make the streaming
158:15 possible and give us some utility
158:16 function to execute on this cool we're
158:20 going to basically have a uh let's see
158:24 we're going have Google it goes
158:26 to uh create Google generative but let's
158:30 import that so we're going to import a
158:32 few things so we're going to import
158:33 something from
158:34 AI we're going to
158:36 import stream text from AI we're going
158:39 to import create
158:42 streamable value from AI SDK sorry RSC
158:47 reactive a component uh we're going to
158:50 import create Google generative AI from
158:55 at ai- SDK gooogle and that's pretty
158:58 much it so we're going to create Google
158:60 gener generative AI passing in our gini
159:04 API key okay and we're going to
159:06 basically implement the actual question
159:08 answering right so we need a question as
159:11 well as the the project ID in which we
159:13 asking the question in context of so the
159:16 first thing I'm going to do is just
159:17 create a stream equals to create
159:20 streamable value so what I'm doing here
159:22 is purely just to get the effect of the
159:24 tokens coming back into the UI one by
159:26 one as I'm streaming back right so then
159:29 the the first logic they have to do is
159:31 get the query embedding right which we
159:34 discussed here the first step here is to
159:36 convert it into a query Vector so let's
159:39 actually name it query Vector instead to
159:42 be consistent so we're going to do get
159:44 embedding sorry generate embedding which
159:46 can get from our Gemini function pass in
159:50 the question okay and then we have the
159:52 vector query to be a we're going just do
159:57 uh query
159:59 Vector do join let's see does it make
160:02 sense do
160:04 join uh okay we have to put into this
160:07 quote CU we going insert it into a wrong
160:10 SQL do
160:12 join by this comma okay and then we're
160:16 going to get the result so we're going
160:17 can basically compare and get the top 10
160:20 files top 10 in terms of
160:22 similarity and we'll do this by
160:24 executing a raw DB dot raw query raw
160:29 okay we're going to
160:31 select what we're going to select we're
160:34 going to select the file name and the
160:37 actual source code of the top 10 files
160:41 right as well as the summary of the top
160:43 10 files
160:44 right uh and we're going to get one
160:50 minus summary
160:53 embedding right and we're going to do
160:55 this symbol so this is for the a vector
160:58 query comparison cast it to
161:02 vector vector query like this so what
161:06 this does is it converts into vector and
161:08 we're going to get the S cosine
161:09 similarity but we just name it
161:11 similarity so when you do one minus this
161:13 you're basically getting the similarity
161:15 score between all the embeddings and the
161:17 actual vector embeddings and and
161:19 obviously what we do is we're going to
161:21 get it from our source code
161:24 embedding
161:25 table right where one sorry where one
161:31 minus summary embedding
161:35 right and the vector query is greater
161:38 than 0.5 so what this does is this is
161:41 the threshold score so because all the
161:44 all the files like all the vectors will
161:46 be similar it will give you a similarity
161:49 score in regards to your query Vector so
161:52 in this case maybe the cosine change. Pi
161:54 has a very similarity score of let's say
161:56 0.9 so the higher the score the more
161:59 similar it is to it right and the
162:01 further out maybe index.ts has a score
162:03 of 0.3 right just an example and so we
162:06 are basically asking what is the cut off
162:08 point at which point do we say that okay
162:10 A a vector is just not considered
162:12 relevant right so this is what the
162:14 number here means and just for fun I
162:16 just put 05 cuz I experimented with some
162:19 number and this this just seem to work
162:21 best
162:22 okay and with that we're going to do uh
162:26 from this
162:28 and and project ID equals to the project
162:31 ID we passed in here right and I'm going
162:33 to order by
162:36 similarity descending limit 10 so this
162:40 is basically saying that okay we now
162:42 have gotten all the similarity scores
162:44 between all the vectors and our quy
162:46 Vector I want to order by how similar
162:48 they are from the most similar to the
162:51 least similar and we're going to take
162:53 the top 10 right so this actually pretty
162:54 intuitive if you think about it right
162:57 and the output here is going to be as
162:60 file name source code summary and and
163:03 that's pretty much all we want to know
163:06 okay and so with this we can then have
163:10 the cons context it goes to uh left let
163:16 context equals to be empty string we're
163:18 going to Loop through for cons
163:22 um
163:23 uh document of
163:27 result what we're going to do is we're
163:29 going to append the context context plus
163:31 equals to right we're going to get the
163:34 source which is the doc do file name
163:38 right then we have the code content to
163:41 be doc. source code and then we have
163:45 the uh summary of
163:48 file to be docor summary and that's
163:51 pretty much it so we're just appending
163:53 all the list of uh the relevant
163:55 documents appending all the code and the
163:57 summary into this one big context
163:59 payload here that you see right here
164:02 this context block right and now we can
164:04 actually construct The Prompt so I'm
164:06 going to just do aing here forong just
164:09 follow along here just trust me and then
164:12 what I'm going to do here is I'm going
164:14 to copy in this this prompt right and
164:18 here I'm going just quick question and
164:20 this is really the pr I show you right
164:22 so we're going to have this stream text
164:23 function we're going to return a text
164:24 stream the model we're using is Gemini
164:27 1.5 Pro right um and this could be
164:31 actually even like let's see Gemini 1.5
164:34 we can call it flash we can use Flash to
164:36 make it faster okay and so the problem
164:40 is you're an AI code assistant blah blah
164:41 and we got to pass in the contact string
164:43 which is the concatenation of all the
164:45 relevant files and then we're going to
164:47 ask a question here inserting the
164:49 question that we pass in to this
164:51 action and after having this text stream
164:55 right we can then finally come out of
164:58 this and then we're going to do for
165:01 await cons Delta of text stream so this
165:05 is like the the streaming chunking back
165:07 we're going to update the stream with
165:09 the
165:10 Delta and that we're just going to call
165:12 stream DOD I'm going to invoke this
165:14 function immediately so this is just a
165:17 kind of a uh immediately invoked uh
165:19 asynchronous function right so we're
165:21 going to basically call the Gemini model
165:24 in the text stream and slowly update our
165:26 stream with the tokens that starts
165:28 coming back in and then return we can
165:31 return our output to be the stream right
165:36 and we want to return the files that we
165:39 reference to be the result right because
165:42 later what we will have is when we ask
165:45 this question like which Which models
165:49 does this project
165:51 support right not only do we want to get
165:54 back the streaming answer right okay
165:57 this is kind of weird but let's let's
165:58 try which uh where do I edit the PDF
166:05 viewer so you can see that we are get we
166:07 get back the list of files that diagosis
166:10 reference right so we're going to look
166:12 over this and basically just display the
166:14 UI as as well as the answer right so we
166:16 going have two parts here and that's why
166:18 we have the output put the stream which
166:20 is the answer and the file reference
166:22 which the result which is basically the
166:24 file name the source code and the
166:25 summary of the list of documents that
166:27 are relevant cool and with this we can
166:30 save this action and remember the
166:32 function is called ask question so let's
166:34 go back to our ask question card
166:36 whenever we he we have submit I'm going
166:38 to turn this to an Asing function which
166:40 it already is and we're going to just do
166:44 uh if not project. ID we just return
166:47 okay and then we're going to do here
166:52 is uh we're going to have a loading
166:54 State cons loading right we're going to
166:56 set loading to true and then what we're
166:59 going to do is we're going to have the
167:00 output from a wait ask question which we
167:04 get from our actions passing in the
167:07 question that we have as well as the
167:10 project ID right remember that's what we
167:12 need right we need a question the
167:13 project ID and it returns us with a list
167:16 of files that got reference and a
167:18 streamable output okay and that's why we
167:21 can just get the type save object of
167:23 output as and file reference okay and
167:26 with that I can just have a files
167:30 reference references to be uh array of
167:34 file name Source C and summary and I can
167:36 just immediately set my file reference
167:38 to file reference okay and then what
167:41 we're going to have is we're going to St
167:44 we need to have the answer somewhere
167:45 right so we'll start the answer here and
167:47 then we can have for await cons Delta of
167:51 a re streamable
167:53 value of the output right so because
167:57 this output here um let's see why is
168:00 this showing error uh output output I
168:03 will ask question for a weight con Delta
168:07 of re symbol
168:09 value right let's see if
168:14 Delta we should trally set answer to the
168:18 answer un plus Delta so this basically
168:21 creates that streaming effect of seeing
168:23 the tokens come back one by one so let's
168:25 see why this r streamable value is not
168:29 working AI r
168:32 c output as question let's see the
168:38 stream oh my bad so the output here is
168:42 not the stream but stream. value here so
168:44 remember to add a value here and this
168:46 should resolve the error here okay and
168:48 so we basically taking the the tokens
168:50 one by one and just appending it to the
168:52 current answer state that we have in
168:54 memory okay and with that we can after
168:58 everything is done we can just set
168:59 loading to be false okay so let's
169:01 actually just show it right here so
169:03 below this dialog heer let's just show
169:05 the answer and let's actually look
169:08 through the file references. map right
169:11 file and let's just return a span of the
169:16 file do file
169:18 name so just have H1 that says file
169:20 references okay so we're going to ask a
169:24 question right when you submit this
169:26 question we're going to call this ask
169:29 question function this ask question
169:31 function will get the top 10 most
169:33 relevant files related to our question
169:35 feed it into Google Gemini with the
169:37 context here and then it's going to
169:39 return us the token one by one as well
169:41 as the ref the files that he has
169:43 reference we're going to then take the
169:45 file reference and the output and just
169:47 appending it to our state of about
169:49 answer and file references and going to
169:51 display in our UI so let's see if this
169:53 works okay so I'm going to come back to
169:56 my local host
169:57 3000 and okay so now by right it should
170:00 work so if I ask a question like which
170:04 modelm does this project support it
170:08 should be able to give me the answer as
170:09 well as tell me the list of files that
170:12 it it thinks is relevant so let's see
170:15 okay we get the file relevant file which
170:17 is the list of files and we can see that
170:19 slowly our answers are getting packed
170:21 cool so now our our kind of solution
170:24 works now let's actually Implement a
170:26 nice UI to put this inside a a nice
170:30 markdown viewer and actually put this
170:32 into a tab view with a nice syntax
170:34 highlighter so it can reference the
170:35 files properly cool let's build the UI
170:38 now okay so what I'm going to do here is
170:42 uh the first thing here I'm going to
170:43 install a few things okay I'm going to
170:45 install um something called at UI w/
170:50 react D markdown editor so this just a
170:52 nice markdown editor for us to display
170:54 the outputs of the AI okay and we also
170:58 need another thing which is the react
170:59 syntax highlighter to display the code
171:01 blocks so let's also install react
171:04 syntax highlighter
171:06 okay we also need to have the the
171:09 typescript types for this so at types SL
171:11 react D syntax highlighted cool so we
171:14 install a total of three things right so
171:17 now let's just close this down okay
171:19 let's go back to my ask question card
171:21 and instead of just displaying the
171:23 answer like this very ugly ugly okay I'm
171:27 going to display our
171:29 answer like this so I'm going to just
171:33 import my markdown editor
171:35 import uh MD editor from at UIW react
171:40 markdown editor
171:42 and I'll just render a let's
171:47 see let's under the MD editor do do
171:52 markdown right this is a self component
171:55 and the source equals to the answer here
171:59 as it streams back that's a class name
172:01 of Max width of 70 view
172:04 width right height of full Max height of
172:08 40 view
172:10 height overflow
172:12 scroll okay and that's all and then
172:16 we'll have a let's delete this file
172:18 references for now
172:19 and with a button here type of button on
172:23 click I'm just going to set it to just
172:25 close the thing and in this case we can
172:29 also reset everything okay so one more
172:33 thing here is whenever I come here I'm
172:35 going to set the answer to be empty and
172:38 set the file references to be a empty
172:40 array cool so that I can reset it every
172:42 time and then what I'm going to do here
172:46 is let's see let's see whenever I click
172:49 this I'm not going to
172:52 immediately uh set open to be
172:55 true okay I'm going to set open the here
172:58 after I get back some output okay cool
173:01 and with that I'm going to disable the
173:05 button disable it goes to
173:07 loading um yeah that's fine so now if we
173:11 come back here again and let's
173:14 refresh I'm going to ask what models or
173:17 like let's ask a mod a different
173:19 question like
173:23 um how does ama play in this
173:29 project so let's see we should have a
173:31 nice markdown editor cool so you can see
173:34 that we have this Mark editor right that
173:36 gives us the information and might put
173:38 it in a nice kind of format here okay
173:41 and we're going to also give the dialog
173:43 contain a class name of small of Max
173:46 with of 0 view with with to just make it
173:50 bigger right so we got some more space
173:51 to play with all right and so now let's
173:54 actually uh create a new file here to
173:57 display the files that we reference so
173:60 we'll have a uh code references. TSX use
174:05 client we'll have TS r f c right code
174:10 references and we're going to have a
174:12 list of files which is going to be of
174:14 the type of file name source code and
174:16 summary okay and then we receive the
174:19 file
174:21 references and then it's really a simple
174:24 component okay the first thing I'm going
174:26 to do here is just um let's see what
174:28 should I do
174:32 here okay here's I'm going to do I'm
174:35 going to just have a tab and set tab to
174:38 be react.
174:42 state right I'm going to have the
174:45 first first file file name okay and
174:50 then if there is no if there is really
174:53 no file reference return now and the UI
174:56 is going to be a div with a class name
174:59 of Max
175:01 WID of
175:04 70 view
175:06 withd
175:08 right and then we're going to have tabs
175:11 so we can import tabs
175:15 from uh at component /i/ tabs so let's
175:18 refresh RVs cuz it's buggy
175:21 again and this
175:23 tabs Let's see we have
175:26 a value of
175:29 tab on value change to be set
175:33 tab inside here we have a
175:35 div with a class name of overflow
175:40 scroll uh Flex gap of two BG gray of 200
175:45 padding of one and rounded medium okay
175:47 and then I'm just going to look through
175:49 my files references map for each file
175:53 I'm need just returning a vanilla button
175:56 cuz I'm going give it my own style right
175:59 and my own
175:60 key of key is file the file name and the
176:03 name the sorry the class name will
176:06 have um let's
176:08 see um okay we need to have a
176:11 conditional right so we're going to
176:15 have p x of three pending y of
176:21 1.5 text SM font medium rounded MD
176:26 transition colors white space no
176:30 rep and then we're going to have
176:32 additional classes so BG
176:36 primary and text primary foreground
176:40 happens if the tab equals to file the F
176:42 name okay and if not we're just going to
176:46 have a text
176:49 um
176:51 muted foreground and when you hover over
176:54 it we have a background muted like this
176:57 inside here we just put the file. file
176:59 name okay like this and underneath this
177:03 div will map over the file
177:08 references map file okay like this I'm
177:12 going to return a TS
177:15 content with a key of file. file name
177:19 and a value of f the file name the class
177:23 name will have a Max height of 40 view
177:26 height overflow of scroll Max width of 7
177:30 XL and rounded medium like
177:34 this and in here let's see what's the
177:37 issue
177:39 blah oh here should be map cool and in
177:43 here is where we put our syntax
177:45 highlighter with the code block so let's
177:47 import that so we can import prism as
177:51 syntax
177:54 highlighter from react syntax
177:57 highlighter okay and then we're going to
178:00 import a theme from react syntax
178:06 highligher um slash this slash esm slash
178:11 Styles SL prism and there's like a lot
178:14 of themes for you to choose from right
178:16 you got dark you got funky you got
178:17 Lucario I'm going to choose like Lucario
178:20 right just for fun and let's actually
178:23 just render the syntax
178:25 highlighter okay and we'll pass in the
178:28 file. source code in here we'll give you
178:30 a language of J typescript by default
178:34 and the style we'll just pass in the
178:37 theme that we got right which is
178:39 Lucario is it Lucario yeah
178:44 Lucario so with this if you go back to
178:46 ask question card and if you put the
178:48 file code references below here and give
178:53 it some height
178:56 spacing and boom now we got what seems
178:59 to be a working sample
179:02 of something working so as diis you can
179:06 see that it immediately gives you back
179:08 the file reference right and I guess
179:10 something here not working right so when
179:13 I click on this let's see code
179:16 references when I click on this sorry
179:20 not here when I click on the
179:22 button obviously want to set the tab to
179:24 the file name so that we can then move
179:27 around like this and it's perfect right
179:30 you can see that we can now see the
179:32 answer here and we can get to see the
179:34 kind of file that a reference here so
179:37 one more thing is I'm I'm to save this
179:39 question right so let's go back to our
179:41 schema. Prisma and let's create the the
179:44 model to actually save the question so
179:47 that we can reference it later okay
179:50 we're almost there we're almost there
179:52 guys you guys are doing really well so
179:55 inside here obviously has ID Creator ad
179:57 updat ad we got a question and we got
179:59 the answer right we got the files
180:03 reference reference say to be a just a
180:07 Json object okay we got a project ID
180:12 right and then we have the user who
180:15 asked the question right and that's
180:18 pretty much it so for the project let's
180:21 give you the relation so we'll have the
180:24 saved questions to be a list of
180:27 questions and then for the user relation
180:30 we're going to say questions asked like
180:34 this cool and so with this we get to
180:38 have the question each question belongs
180:41 to project and it's asked by a certain
180:43 user so let's just migrate this you
180:46 already know the drill okay press modb
180:49 push like
180:51 this and then I'm going to restart my
180:56 server to update
180:58 it okay and so now I'm going to add a
181:02 button up here so that I can save the
181:04 question but before that I'm just going
181:06 to go into my route Handler and create
181:08 that that function to save the question
181:10 right so it's really simple let's see if
181:15 this makes sense so I'm going to have
181:17 save answer or like save okay save
181:19 answer makes sense we're just lit going
181:21 to have a protected procedure with the
181:24 input being C the object what do we want
181:26 we want the project ID which is a
181:30 string right we want the question which
181:34 is also the c.
181:36 string we want the file
181:40 reference right and this could be Z do
181:42 any like we don't really care cuz we're
181:44 could just save it into a Json right
181:46 we're going to have a we're going to be
181:47 a mutation
181:48 right and what we're going to do is
181:50 Lally just create a question passing in
181:54 the answer to be input the
181:56 answer and input answer we need answer
182:00 from this as well and so the user ID
182:03 obviously is we can get it from the
182:05 context of who's asking the question
182:08 right so now that we have this safe
182:10 answered right let's go back into the
182:12 code uh into ask question card right
182:16 inside here you see where we put the
182:17 logo which means beside the logo we want
182:19 to put the the button to allow them to
182:21 save the answer and so what I'm going to
182:23 do is I'm going to come down
182:25 here inside this dialog heer I'm going
182:29 to have a flex items that Center gap of
182:36 two beside here I'm going to have a
182:39 button that has a uh variant of
182:44 outline that says save answer
182:49 right and then I'm going to get the
182:51 mutation out from our endpoint so save
182:54 answer equals to api. project. save
182:56 answer import API from trpc react
183:01 right and then when I click on the
183:04 button uh let's see what is
183:07 this when I click on the
183:10 button I'm going to call Save answer.
183:13 mutate passing in the project ID
183:16 question answer
183:19 um passing the question the answer and
183:21 the files that we reference and then on
183:24 success we're just going to toast do
183:28 success since the answer is safe if
183:30 there's an error we just toast. error it
183:32 okay and then we're going to disable
183:34 this
183:34 button if the saving answer is pending
183:37 that means when we are still making the
183:38 database call on the back end we're
183:40 going to disable the button so with this
183:43 if we then refresh the page because we
183:44 restarted the
183:46 server right let's see if can save a
183:48 question now so I say how does ama play
183:53 in this
183:56 project I'm ask the Anis it's going to
183:60 return me the answer very fast right
184:02 it's going to give me the code and I'm
184:04 going to press save answer and hopefully
184:06 I get the answer saved which means that
184:08 he has been saved in the database and
184:10 now we can actually display into the Q&amp;A
184:13 part so now let's actually build this
184:14 Q&amp;A page so that we can display the list
184:18 of of Saved answer and we can have this
184:20 nice like super nice uh slide over
184:23 displaying our answer and the code
184:25 references here right I really like this
184:27 UI so now let's actually move on to
184:30 that okay so let's actually create the
184:33 Q&amp;A page to list out all the saved
184:35 questions that we have okay so come down
184:38 to the code editor again let's clear out
184:40 everything we have we did create a QA
184:42 Pages now to test it out right so we can
184:44 reuse it perfect so let's mark this as
184:47 use client and before that actually go
184:50 back into our trpc router and let's
184:52 actually get get questions right so this
184:55 basically we saved the questions into
184:57 our database right so now let's actually
184:58 get it out and list it out so it's going
185:00 to be a protected procedure right do
185:04 input right we want to look at the
185:06 object that we are trying to get project
185:10 ID it's going to be a z. string it's
185:13 going to be a
185:14 mutation we can to get a context and
185:16 input right pretty standard trpc stuff
185:21 right and then uh let's
185:24 see what we going do is Lally very
185:27 simple we're just going to return await
185:29 uh CTX db. question. find many where
185:34 project ID equal to input project ID and
185:37 we want to include the
185:39 user right who created it and also what
185:43 we're going to do is going order by a
185:44 Creator to be ascending right so we can
185:47 look at the the most recent question on
185:49 top right so let's go back to our Q&amp;A
185:52 page let's get the kind of con our our
185:55 project ID from use project and then we
185:59 can get the list of questions from API
186:02 from react. project. getet questions
186:05 sorry get questions do use Query sorry
186:09 use yeah sorry we need to be use Query
186:11 instead of mutation so here instead of
186:14 mutation just REM name query okay and
186:18 here we can then do use Query passing in
186:20 the project ID cool and then now that we
186:25 have that we can now create the UI so
186:28 the first thing is we're going to return
186:31 a big uh sheet from components slui
186:35 sheet so this sheet is what kind of uh
186:39 what looks like this so you can then uh
186:42 slide something over so that's what they
186:43 call a sheet and then inside here we're
186:47 going to have the ask question card
186:50 right so now we have this ask question
186:52 card showing up here and then below here
186:55 we're going to have a spacing of four
186:57 units and then we'll have a kind of H1
187:01 the class name of text Excel for semi
187:05 Bo write the save uh saved
187:09 questions that's another H4 uh sorry H2
187:13 and then let us give a
187:16 grid sorry let's have Flex of flex call
187:20 and gap of
187:21 two
187:23 this and in here let's see can I just
187:27 have Flex
187:28 call well it's fine yeah we'll look
187:31 through all the questions do
187:35 map right for each
187:39 question right what do we need to do we
187:42 got to basically
187:44 return a uh
187:49 react.
187:52 fragment right with the key being the
187:54 index sorry with the key being
187:56 the question. ID okay and then inside
188:01 here we have the sheet trigger right and
188:05 then actually we want to save which
188:07 question we are looking at now so we're
188:09 just going to have a cons question
188:14 index and set question index could be a
188:17 Str us number right and we'll get the
188:19 actual question to be questions uh index
188:22 in the question index Okay cool so then
188:25 on the street street trigger on click
188:28 what we're going to do is just set the
188:29 question index to the index right now
188:31 okay and in here we're going to have a
188:35 div with a class name of flex items D
188:39 center cap of four BG of white rounder
188:43 of large padding of force Shadow and
188:45 border so this is the card in here we
188:49 can have a
188:50 image right with a class name of um
188:54 rounded full right and we have a height
188:57 of 30 and width of 30 and the source is
189:02 going to be question. user image
189:05 URL right and
189:08 then what we're going to do here is uh
189:13 under the image we're going to have
189:14 another div and this going to have a
189:16 class name of text- left Flex Flex of
189:19 call okay inside that we have another
189:21 diff with a class name of flex items D
189:26 center cap of two inside here is where
189:29 we'll have our paragraph tag that sets
189:33 our question. question with a class name
189:36 of text Gray 700 line clamp one text of
189:42 large and font of medium okay and then
189:46 below the P we have a span
189:48 with the class name of
189:50 text- smm sorry XS text grade of 400
189:56 white space of no rep and then we just
189:59 have the kind of when it was created at
190:01 like this cool and then coming of the
190:05 span coming of the div right we have a P
190:08 tag we has a question to answer right
190:11 and we'll give you a line clamp of one
190:12 as well like this
190:15 okay with that I want you to to just
190:18 come down to come outside of this div
190:20 but still within the sheet we're going
190:22 to check if there's a question that
190:23 means you click on a question we're
190:25 going to have a sheet
190:29 content right with a class name of Max
190:32 width of AD view with and then we have a
190:35 sheet
190:37 header and a sheet title of question.
190:42 question and in here we'll have a
190:44 markdown
190:46 editor do edit do markdown passing in
190:49 the source to be the question. answer
190:52 right and then we have the code
190:55 references and we just pass in the file
190:58 references right and we'll do
191:03 this s
191:05 NE right course remember question. file
191:07 reference is got Json value so if we do
191:10 this now if you click on
191:13 this boom so now we still get our code
191:17 references and we still get our qu our
191:19 answer and question but now we have this
191:21 saved questions so I can ask any
191:23 question like um I say let's look at
191:27 this team index let's look at this so
191:30 let's ask another question like
191:36 um let's go into here and see what
191:39 services is in the docker compos
191:42 question mark so it should give us an
191:45 answer right so you see can able to pull
191:47 out the docker compos of yo because
191:49 that's obviously the most relevant file
191:52 it's able to generate the answer right
191:54 this is pretty accurate right I'll save
191:56 the answer right after I save the answer
191:60 I should be able to come down to this
192:01 project and now I can see what services
192:04 is in the docker compos because we saved
192:05 into our database right and actually
192:08 after we save our code sorry after we
192:11 save our ask question card we should
192:13 refret as well so let's get the refetch
192:16 object from use refetch
192:19 and after we success we should just
192:21 refresh
192:22 it and now I can see my stuff here I can
192:26 scroll and can see the code I can see
192:28 the answer right so that's perfect we
192:31 built out the UI for the question and
192:33 answer part so now we have basically
192:36 completed everything regarding the uh
192:38 asking a question to our AI so actually
192:41 let's remove this ID I'm not sure why we
192:43 still have it there right it was helpful
192:45 to debug but we can remove it now right
192:48 and nice so we're actually closing in
192:51 let's actually continue and now let's
192:53 actually move on to a new segment of
192:54 working on the meeting card right so the
192:57 main part of this meeting card is the
192:60 fact that you're able to uh upload
193:02 meetings right upload MB trees of your
193:04 meetings and we're going to use a
193:06 special service called assembly AI that
193:09 helps us transform um that takes Beach
193:11 or mb3 and convert it into um kind of
193:15 text and kind of uh issues and summaries
193:18 for us to then query on so it's going to
193:20 be a very similar retriever augmented
193:22 generation model as our question but
193:25 this time instead of looking at code we
193:27 are looking at meeting notes so let's
193:29 actually get working on uploading the
193:31 file all right to get started with the
193:34 meeting card we obviously need to upload
193:35 our MP3 somewhere right so for that
193:38 we're going to be using Firebase fire
193:40 store uh sorry Firebase storage which
193:42 honestly is dead simple to use and so
193:46 why not just use something that's easy
193:48 right so let's just get started with
193:50 Firebase so coming to Firebase uh
193:53 console. firebase.com register an
193:56 account if you haven't it's completely
193:57 free let's call it diis D YouTube accept
194:01 the terms blah blah blah and press
194:04 continue disable analytics or enable it
194:07 if you want to it's up to you okay so
194:10 while that is waiting come back to your
194:12 code right so come back to your code in
194:15 a second let's see we're going to just
194:18 close out everything we have right now
194:21 and come down to the terminal and just
194:22 install B install
194:25 Firebase uh and let me see if yeah
194:29 install Firebase and one more thing is
194:31 assembly AI so we're going to be using
194:33 assembly AI uh as our kind of audio API
194:37 provider right so while you're waiting
194:40 for the Firebase thing to load okay it's
194:43 done I guess uh let's actually just get
194:45 started so I'm going to create a new web
194:47 project here by clicking web and just
194:50 name it whatever you want I'll just call
194:51 it like
194:52 nextjs and just Press Register App here
194:56 okay and then in a minute it's going to
194:59 give us some code snippet right so we
195:02 already installed Firebase right uh then
195:04 copy this code snipper here come back
195:07 down to your code and basically what we
195:10 got to do is come down to your lip and
195:12 create a new code called fire base. TS
195:16 and paste the code in here
195:18 so basically what it does is it just
195:19 initializes your app with your API key
195:22 and things like that and your app ID
195:24 obviously and one more thing to import
195:26 is uh the actual uh storage right so
195:29 import get storage from Firebase SL
195:31 storage and you just have to export cons
195:33 storage equals to get
195:36 storage uh passing in the App
195:39 application here okay cool and in the
195:43 meantime uh what we're going to do here
195:45 is I'm going to export out a function
195:48 that allows you to upload your files
195:50 okay so I'm going to export a asyn
195:54 function called upload file right it's
195:57 going to take in a native file object
195:59 from the web browser API and we'll take
196:02 in a uh set progress right parameter
196:08 which you can pass in basically how it
196:10 works is as we uploading to Firebase we
196:12 will keep track of the percentage of how
196:15 much of the file has been uploaded and
196:16 we're going to basically
196:18 set the state and call this callback
196:19 function whenever we get a new update on
196:21 the percentage so on the UI we can
196:23 display that nice Circle icon of the
196:26 progress of uploading the file okay and
196:29 then in this function really what we're
196:31 going to do is we going to return in
196:33 return a new
196:35 promise okay and new promise is going to
196:38 have a resolve and reject okay and I'm
196:42 going to do a try catch block and so if
196:44 there's an error obviously we're just
196:45 going to console. error
196:48 and we going just reject with the error
196:51 right but what we're going to try to do
196:52 what we're going to try to do is we're
196:53 going to get the storage
196:56 ref to be ref so ref comes from Firebase
196:60 storage so we're getting a reference to
197:02 that file right passing in the storage
197:04 object that we got up here and we're
197:06 passing the file. name the name of the
197:09 file okay and then what we're going to
197:12 do is we're going to have a upload task
197:14 which is going to be upload Byes
197:16 resumable from Firebase
197:18 storage passing in the storage ref as
197:21 well as the file that we want to upload
197:23 okay and this upload task give us a few
197:26 callback function to call on so whenever
197:29 the state changes right it's going to
197:30 give us a
197:31 snapshot of the of the state snapshot
197:36 right and this snapshot contains the
197:38 information like the progress right so
197:41 we're going to do progress equals to
197:42 snapshot. B transferred versus the total
197:45 bytes time 100 this gives us a
197:48 percentage and let's just round it to
197:51 like to the nearest number okay and then
197:53 if set progress so that means if you
197:55 pass in a callback function I'll just
197:57 call the Callback function with the
197:59 updated progress that I received cool
198:02 and then what we going to do is I'm just
198:04 going to switch on the snapshot. state
198:09 okay so if it's paused what I'm going to
198:13 do is I'm just console. loock upload is
198:15 pause
198:17 angle break of
198:19 this if it's running I'll just say it's
198:22 running and then uh other the snapshot I
198:26 also get by an error object and so if
198:28 there's an error I'm just going to
198:29 reject the promise with the error object
198:32 obviously cool and after everything
198:35 we're going to get the kind of file
198:37 object that means this callback will be
198:39 called when the download is finished or
198:42 sorry when the upload is finished so
198:43 we're can just call the get download URL
198:45 from Firebase storage passing in the
198:48 upload upload task do snapshot. ref
198:52 right and then we're going to get the
198:54 you the download URL right that means
198:57 after we have uploaded our MP3 to
198:59 Firebase storage they're going to give
199:01 us a URL in which we can access that
199:03 that that MP3 right and then what I'm
199:07 going to do is with this download URL
199:09 we're going to say just resolve with the
199:12 download URL okay so to call this
199:15 function is very easy we can can call it
199:17 from the front end right so what I'm
199:19 going to do here is I'm going to come
199:21 down to our dashboard page instead of
199:25 this meeting card let's create a new
199:26 component called meeting card.
199:29 TSX is a used client component obviously
199:33 okay and what we going to do here is
199:36 just uh
199:38 rafc call it meeting card okay and then
199:42 we're going to have a progress state to
199:44 upload the progress of our file
199:48 and one more package that we need is
199:51 actually but install react d drop zone
199:54 so this is gives us that UI to be able
199:56 to drag and drop and upload files and
199:58 allow us to handle it much more easily
200:00 okay make sense uh cool so then at this
200:06 point uh how it's going to work I'm
200:08 going to give you the high level
200:09 overview of how it's going to work first
200:11 so there's going to be a UI where people
200:15 can upload their file right so upload
200:18 here when they upload here the first
200:21 step here is upload to
200:25 Firebase right so that we can then store
200:29 in the filebase server Firebase server
200:32 on by Google and then Firebase server is
200:35 going to return us with
200:37 a um download uh uh URL so this is the
200:41 URL of the video of the audio stored on
200:44 the Firebase server then what we're
200:46 going to do is we're going to going to
200:47 save this URL in our database
200:49 immediately so we're going to create a
200:51 new we're going to create uh create a
200:55 meeting uh object in our database right
200:59 and this meeting object is very simple
201:00 it basically has a name and a URL and a
201:03 bunch of summaries right so because a
201:06 meeting what we're going to do is we're
201:07 going to break it down so if I come back
201:09 to our example here let's see if I can
201:12 find one
201:14 here this processing
201:17 here so this meeting has a name it has
201:21 uh kind of the date right and he has a
201:23 list of issues so what are issues an
201:26 issue is
201:27 just a one topic that happened within
201:30 the meeting so we're going to use
201:33 assembly Ai and AI to basically break
201:35 down the meeting URL into many issues
201:38 there there is and so for each issue I
201:42 can see the title the date and a
201:45 specific quote for there's a highlight
201:47 of this issue right so the first step
201:50 here is we're going to just immediately
201:52 create a meeting but we're not going to
201:53 process it yet because what we're going
201:55 to do here is we're going to just uh
201:58 show a processing icon here so
202:01 immediately after I upload a meeting to
202:03 Firebase I'm going to create a database
202:05 row I'm going to set the status to
202:08 processing right so there's going to be
202:10 additional status and this can either be
202:13 uh
202:15 processing or it could be completed
202:20 right so we're going to first initially
202:21 set to processing and then we're going
202:23 to kick off a API route at/ API process
202:28 meeting and this one is going to take in
202:30 a meeting
202:32 ID that is a reference to the new
202:34 meeting here we're going to then take
202:37 the URL of the
202:39 MP3 we're can then take this URL and
202:42 then we're going to put it
202:43 into uh assembly AI
202:47 how do I tpe here Asam B AI which will
202:51 then give us back a list of issues right
202:56 and then when we have this list of
202:57 issues and the summary we can then
202:59 update the meeting again to fulfill the
203:03 the status so then here we have we put
203:06 in the real issues and then we can set
203:07 the status to be completed right because
203:11 this
203:12 thing this process of processing the
203:14 meeting and uploading to assembly AI
203:17 this could take like one or two minutes
203:19 right and obviously we don't want our
203:21 users to just be to be sitting here
203:24 looking at the loading spinner for 2
203:25 minutes we want it to just be show up
203:27 processing so that they can leave the
203:29 tab and when they come back in like one
203:30 or two minutes or 3 minutes or 5 minutes
203:32 they can just directly access this and
203:34 they can always quit and do something
203:35 else so that's the kind of the
203:38 architecture of how we're going to do it
203:39 asynchronously so let's actually
203:41 continue executing it okay so for now
203:45 let's come back to our app
203:48 application okay and for the meeting
203:50 card I'm going to just save this first
203:53 and I'm going to replace the meeting
203:55 card with
203:57 this and for the meeting card is really
203:59 simple okay we're going to just return a
204:03 card from components
204:05 UI and you have a class name of call
204:09 db-2 Flex Flex of call items as Center
204:13 justify as
204:15 Center uh and then we have padding of 10
204:18 actually no no need padding and then
204:21 what we're going to do here is we're
204:22 going to have a state here so we're
204:24 going to get a few
204:26 things from use drop
204:30 zone and this use Drop Zone we can
204:32 import it from react drop zone so this
204:35 Ro Drop Zone mainly gets us the root
204:37 props and the input props but the thing
204:40 is this Drop Zone also allows us to
204:41 customize what kind of files we accept
204:44 so in this case we only accept audio
204:47 files so we'll just have a audio slash
204:52 star right this is going to just be a uh
204:57 let's
204:58 see weing accept MP3 we and M4 a files
205:02 right and I'm going to set that we only
205:04 want one file at a time so multiple be
205:06 set to false right and say the max size
205:09 we want is let's say what's this number
205:13 15 megabytes right so this is going to
205:15 be 50 megabytes so so let's split it up
205:17 like
205:18 this so 50 mil 50 million bytes right
205:23 and then what we're going to do is on
205:25 drop so when they drop the file we're
205:27 going to get the accepted
205:29 files right and then what we're going to
205:32 do is just console the log out So
205:34 eventually what we're going to do is
205:35 just call upload file from Firebase and
205:39 just pass in the file into here right so
205:44 let's see this file is T
205:47 undefine so this is going to
205:51 be s file like this right and then we're
205:55 going to get back the download
205:58 URL something like this right so
206:01 obviously this has to be acing in this
206:03 case so let's bu out the UI first okay
206:07 so this card we're going to just
206:11 destructure do get root props like
206:14 this and then we're going to have one
206:17 more State here called is
206:20 uploading right and then here when we
206:23 drop here we're going to set is
206:25 uploading to be true and then finally
206:26 we're going to set is uploading to be
206:29 false and then we're going to have uh
206:33 we're going to have this
206:35 so if we're not uploading right we're
206:38 going to show this UI of uh presentation
206:41 icon asking us to create a new meeting
206:44 we got import a button
206:45 here and and we're going to have this
206:47 upload icon here from lucd
206:50 react I'm going to disable this button
206:52 when we're uploading so right now this
206:55 is how it looks like we have this thing
206:57 happening here right and let's see if we
207:00 can fix there's something wrong with
207:02 this obviously padding of 10 does this
207:04 fix it okay cool so we had to add this
207:07 padding of 10 here let's remove this
207:09 meeting card component here so you can
207:12 now see that when I click on anywhere
207:13 within here it's going to open up a file
207:16 viewer and it's only going to accept MP3
207:18 files so this that shows that our use
207:21 drop zone is working
207:24 okay at this point if we're not
207:26 uploading I'm going to show this but the
207:28 thing is if we are uploading I want to
207:30 show a different UI of the circle going
207:33 to full to show the percentage and is
207:36 actually a library to show that nice
207:38 Circle progress bar and that is install
207:42 B install react that's circular D
207:46 progress bar okay so we're going to
207:49 import
207:50 this and then we're going to do is we're
207:52 going to come up here and import
207:54 circular progress bar and build styles
207:56 from this package Library okay we're
207:59 going to come down here is so if it's
208:01 uploading what do we want to show we
208:03 want to show a
208:05 div inside here we want to show the
208:07 secular progress bar right and then uh
208:10 the value will be obviously the
208:13 progress and then the text will be the
208:16 progress percentage and let's give you a
208:18 class name of size of
208:19 20 like
208:21 this okay and then inside this div under
208:25 the the P uh in under the circular
208:28 progress let's have a paragraph that
208:30 just says uploading your meeting
208:33 okay and yeah that looks good that looks
208:35 good let's give it a a text
208:39 Center
208:40 cool so right
208:43 now if I just what happened is if I
208:47 upload a file we're going to set
208:49 uploading to be true which will kick off
208:51 the progress the progress bar we're
208:53 going to then upload the file to
208:55 Firebase and then we're going to alert
208:57 the download URL so let's see if this
208:59 works so I'm going to press upload file
209:02 I'll upload my MP3 and now you can see
209:05 it's happening at 0% but slowly
209:08 slowly let's see if there's a there's a
209:11 error okay looks like there's an error
209:14 from origin has been blocked by
209:17 course let's look at the issue okay I
209:20 know the issue we haven't configured our
209:23 Firebase storage so come back to your
209:25 Firebase right we we skip a few steps
209:28 we're going to press continue
209:29 console we're going to go into storage
209:32 here and then we're going to press uh
209:35 upgrade project so for you it's going to
209:37 be free but because I already have a few
209:38 projects running it's going to um how it
209:42 ask me to upgrade my project so if
209:46 you're able to to collect a cloud
209:47 building account right it's going to ask
209:49 you to what whether you want to go in
209:50 test mode or production mode you going
209:52 to choose test mode for now so after you
209:54 set up the storage right you should be
209:56 able to do try this again so let's come
209:59 back to our thing here there's one more
210:02 sty I forgot to apply which is that this
210:06 let's see if this makes
210:08 sense there shouldn't be an item Center
210:10 here I'm not sure why that is here okay
210:14 so I'm going to upload a meeting and now
210:16 it should slowly show 1% 2% 3% Etc right
210:24 8%
210:25 177% I'm going to fix the Styles I'm not
210:27 sure why it's not showing up it should
210:29 show
210:30 up so 100% it uploads it and in a while
210:33 it should alert us without download URL
210:35 and we do so now if you copy this
210:37 download URL and visit it I should be
210:41 able to see my MP3 file and I do all
210:45 right hello everybody file of a meeting
210:49 Eng um so that means it
210:51 works and I'm going to just fix this
210:53 because I'm not sure why there the
210:54 styles are not showing so the
210:57 Styles is going to be build Styles and
211:01 we'll just have a puff color of black
211:04 like this or whatever color you like
211:08 okay I know I like this color which is
211:09 the blue color we have that's why this
211:11 works so if we try
211:14 again uh yeah now you can see our pu
211:17 color slowly turning four five 7% so it
211:21 proves that we're going to show the
211:22 upload progress right and it proves that
211:25 everything works
211:26 cool and then at this point after you
211:28 has uploaded it's going to show that
211:31 show our download URL
211:34 cool so let's actually go back to our
211:36 schema and let's create our table to
211:39 store the
211:40 meetings so let's go into meeting right
211:44 here let's create a meeting
211:47 what we're going to do is we're going to
211:48 have ID obviously we have a creat ad
211:51 we're going to have the meeting URL
211:52 which is our filebase storage URL right
211:56 we're going it belongs to a project ID
211:58 obviously and then uh we're going to
212:01 have a
212:04 status so this status can be in two
212:08 states it can either be pending or
212:11 completed sorry processing or completed
212:14 so let's give it a default of processing
212:16 for now so by default when you create a
212:19 project it's going to be
212:20 processing and then lastly let's see if
212:23 this makes
212:26 sense uh we need a list of issues right
212:31 so let's create issue that is returned
212:34 from assembly AI so issue has ID Creator
212:38 end that uh it's going to have a
212:41 start it's going to have a ending
212:44 time right it's is going to have a
212:48 gist a
212:51 hline a
212:53 summary and then we have it belongs to
212:55 meeting
212:56 ID okay and so a meeting has a bunch of
212:60 issues that we can connect with and then
213:02 for a project a project can have a bunch
213:05 of meetings like this so we created two
213:09 new tables a meeting table and the issue
213:11 table so you know the drill we need to
213:13 push up our tables up to our database
213:17 and let's also restart our database our
213:19 next share
213:23 server cool and so with
213:27 this after uploading a meeting right
213:30 right now we are just windowed alert
213:32 right we don't want that to happen we
213:34 want to actually create a meeting so
213:37 let's see if we can just go into our
213:38 project
213:40 router and let's have a new function
213:42 called upload
213:44 meeting it's going to be a protected
213:48 procedure right do
213:52 input is going to have a project
213:58 ID it's going to have a
214:02 um meeting
214:06 URL and we have a default name by
214:12 default it's going to be a mutation
214:18 okay think this context and the
214:21 input okay and what we're going to do is
214:24 literally just create a meeting cons
214:26 meeting equals await cx.
214:32 DB
214:34 meeting do
214:37 create and the data that we pass in is
214:41 uh the meeting URL the project ID the
214:44 name right do we have a name
214:47 um I guess we need a name as well so
214:49 that's my bet come down to your meeting
214:52 again and let's have a name
214:55 here and let's also push it up
214:60 here
215:01 cool we start our def
215:06 server so we have a name
215:09 here and then that's pretty much it so
215:13 we're going to immediately create a
215:14 meeting and we're going to set the
215:16 status to processing by default okay and
215:21 so now what's going to happen is let's
215:23 also in the meantime let's also write a
215:25 function to get meetings right so we
215:30 literally just do the same we just
215:32 getting a protected procedure getting
215:34 the project ID and reiring our our
215:36 database for the list of meetings that
215:39 belong to this project okay cool and so
215:42 at this point I'm going to save this
215:44 come back to my meeting card all right
215:47 I'm going to get
215:49 the upload meeting mutation from
215:53 API project. upload meeting. use
215:58 mutation right so after the URL I'm L
216:03 just going to do upload meeting
216:07 mutate passing in the project ID the the
216:10 meeting
216:11 URL so if there's no project I'm going
216:13 to return it uh let's get the project
216:17 actually from use
216:19 project the meeting URL is download URL
216:22 so we just have to give it at some type
216:25 so a
216:26 string so we know that this is going to
216:29 be a string
216:31 right okay and then the file could be
216:35 undefined so if there's no file get
216:37 returned so now we C all the errors we
216:39 got to remove the
216:40 alert and then on success we're going to
216:43 say we uploaded the S the meeting
216:46 successfully if there's any error we're
216:48 going to error out and then what we're
216:50 going to do here is we're going to just
216:53 get the
216:54 router we can get used
216:57 router and then we can to return them to
217:01 push them to SL
217:03 meetings right so that they can see
217:05 their list of meetings and see that
217:07 they're
217:08 processing right so with this hopefully
217:12 if we come down here and press upload
217:13 meeting
217:16 here actually this is too big um
217:21 H let's see if there's one shorter one
217:25 okay yeah 1.4 Max okay this going to be
217:27 fast upload meeting and then it should
217:30 then redirect me to
217:32 the kind of okay I need to refresh the
217:35 page because I restarted the dev server
217:37 but I is using the old code so I'm going
217:40 to try again I'll upload my short uh
217:43 clip
217:49 like
217:50 this so it's going to be uploading
217:53 uploading and then it should direct me
217:55 to SL meeting cool so now let's should
217:58 be out the SL meetings list okay so come
218:01 back to your code come back to protect
218:04 it create a new
218:06 meetings and let's create a new uh p.
218:11 TSX okay and use client r CE meetings
218:17 page right we did kind of know what's
218:20 going to happen we're going to get the
218:21 project from use
218:23 project right and then obviously vs Cod
218:25 is going to like play with us but we're
218:28 going to import use
218:29 project and then we're going to get the
218:33 data we can get the
218:36 meetings from from API react do
218:42 project do meet get meetings. use Query
218:46 passing in the project
218:48 ID right uh we can just get a project ID
218:54 here and then since we're on the
218:57 meetings page we can just Loop through
218:59 it right so I'm just going to have a
219:01 refr interval refret interval to be
219:04 4,000 milliseconds so basically this
219:06 function is going to keep refreshing on
219:07 the background every 4 seconds to check
219:09 whether the meetings have finished
219:11 processing okay we're going to return
219:14 something pretty standard so the first
219:15 thing we got return is just a meeting
219:17 card right like this so at this point if
219:20 we come back here we can now see our
219:22 meeting card here and below that I'm
219:25 going to give you a height of six and
219:27 then I'm going to have a h one that says
219:29 meetings right we give you a text of
219:32 excel font of semi board right and so if
219:36 the meetings and meetings. length equals
219:38 to
219:39 zero we're going to say no meetings
219:41 found and if it's loading we're going to
219:44 show a loading spinner and finally we're
219:46 going to have a
219:48 UR with a class name I guess each
219:51 loading needs to come from this as
219:53 well our Untitled list sorry un What's
219:56 this called unordered list will have a
219:59 class of divide that's y divide gray of
220:02 200 and then we can finally map over our
220:09 meeting and we can return a list item
220:12 with a
220:13 key of meeting ID
220:16 okay and then we have a div inside
220:20 here um let's see does this make sense
220:23 does it make sense okay the list item
220:25 has a class name okay and the class name
220:27 is flex item Center
220:31 justify
220:33 between padding y of five Gap DX of
220:37 six inside this div we're going to have
220:40 another
220:43 diff and So within this diff here the
220:45 class name of minwidth of zero okay
220:49 inside here I have a flex item Center
220:52 Gap two okay and in here I will have a
220:56 link to the meeting right and the hitra
221:00 is going to be slash
221:05 meeting slash meeting. ID okay and then
221:10 we're going to just have a let's see a
221:12 class name of text smm font semi Bol and
221:16 text and that's all yep in the link we
221:19 just have the meeting. name makes sense
221:22 here and below the link we're going to
221:26 check for the meeting.
221:30 status
221:32 uh
221:34 meeting am I
221:36 tripping oh meeting oh my
221:40 God meeting okay meeting do status if
221:46 it's still processing we're going to
221:47 show a UI right that is going to be a
221:50 batch from component batch we'll give
221:53 you a class name of background yellow of
221:57 500 text white and we just say is
222:01 processing dot dot
222:03 dot so if we come back to our UI now we
222:06 can now see something happening here
222:08 right uh let's see what's wrong with our
222:10 UI um there should be some card right
222:14 yeah it's fine so after this div just
222:18 above the last closing diff right above
222:20 the last closing diff we're going to
222:22 have a let's see we're going to have a
222:25 diff here and this diff will have a
222:27 class name of flex item
222:30 Center text XS text grade of
222:34 500 and GAP X of two in here we have a
222:40 paragraph with white space no WP that
222:43 just tells the meeting do kind of
222:45 created at when it was
222:48 created and then below the pag we just
222:51 have another pag right with a class name
222:55 of trate and here is where we just put
222:59 meeting do
223:01 issues do length issues so we need the
223:05 issues included in the query so just
223:08 come back into the get meetings query
223:11 and just include the issues to be true
223:14 this way that we can get the the actual
223:16 issues from the
223:17 meeting so right now we can see that if
223:20 you refresh this you has zero issues
223:22 which is which is kind of
223:24 expected and finally now underneath here
223:28 uh underneath all the the div here just
223:32 kind of above the the last list item
223:35 with have a diff final diff here with a
223:37 class name of flex items Center Flex
223:41 none Gap X of
223:44 four and then here there's a link right
223:47 to the same kind of meeting ID and we
223:50 have a button
223:51 here that
223:53 just
223:55 um says view
223:59 meeting cool so now if I press on this
224:02 me view meeting it should bring me to
224:03 the meeting page which we have not done
224:05 yet which is okay so now we have
224:07 successfully shown the list of meetings
224:09 and we have shown that is processing so
224:11 now let's actually set up the assembly
224:12 AI to start processing this meetings and
224:15 create the issues so that we can go into
224:17 the final part of viewing these meetings
224:20 and viewing the issues that come out of
224:21 this meetings cool good job guys we are
224:24 almost there keep crashing it we'll get
224:26 there
224:27 soon okay we're on the last stretch here
224:31 so now we're going to implement assembly
224:33 AI so go to assembly AI if you have not
224:36 done so and just create a free account
224:38 right and completely free they give you
224:40 a very generous free tier right that
224:42 even I have not like finished using yet
224:45 right right you see I'm on the free
224:47 offer they have given me 50 credits I've
224:49 only spent like two bucks right so this
224:51 really worth it and so the main point
224:54 here is you just need to get the API key
224:57 so once you have the API key just go
224:59 into your n
225:01 folder and just come down here and put
225:03 in your assembly API key right with this
225:07 assembly API key I going to clear out
225:09 all your files and let's start a fresh
225:11 let's start a new okay come down into
225:14 your lip folder
225:16 and just create a new file called
225:18 assembly uhts so this is where we're
225:21 going to house all our assembly logic
225:23 assembly AI logic and this is a really
225:26 kind of easy uh library to use because
225:29 all you really need to do let me show
225:31 you the magic okay uh let's see let's
225:33 see let's see let me show you the magic
225:36 of this so what you going to do is
225:37 because you need install ASM AI if you
225:40 have not just do so by install a Zam uh
225:44 sorry in install assembly AI right but
225:48 we already done it so that's fine so
225:51 what we going to do is just import
225:53 assembly AI from assembly Ai and then
225:56 I'm going to have a new Clan with
225:58 initialize with assembly AI passing in
226:00 the API key and making sure that you
226:02 have the assembly AI API key named the
226:05 same here right and then what we're
226:08 going to do is just have
226:10 a function called M milliseconds to time
226:14 taking in a Mill second is a number and
226:17 what you can do is just take the seconds
226:20 equals to mide 1,000 cons minutes equals
226:24 to math. floor seconds by 60 cons
226:28 remaining seconds equals to math. floor
226:31 a mod mod 60 and lastly you just want to
226:34 return a templated string of
226:37 minutes minutes. to
226:40 string to
226:42 string pet start two Z and then putting
226:46 in the remaining seconds P start to zero
226:48 like this okay and then what the main
226:52 function here is the process meeting
226:54 function right it's going to take in a
226:57 meeting URL right and let me show you
226:60 how de simple the API is you can just
227:02 get the whole transcript of the audio by
227:04 doing AWA client the zambie AI
227:07 client. transcripts do transcribe right
227:12 passing in the
227:13 audio to be audio
227:16 URL right and then passing in Auto
227:19 chapters to be true like this sorry
227:22 meeting URL right by passing these Auto
227:25 chapters to be true I mean there are a
227:26 lot of other options right sentiment
227:29 analysis speakers expect uh like
227:31 summarization but by passing Auto
227:33 chapters to be true it will
227:34 automatically help you classify
227:36 different issues and summarize what
227:38 happened during the meeting okay and
227:41 then what we're going to do is just
227:42 we're going to get the
227:43 summaries the summar is going to be
227:46 transcript.
227:48 chapters do map for each chapter we're
227:51 just going to straight up return a
227:53 object the where the start is the
227:56 milliseconds to time passing the chapter
227:57 the start the same for end we going get
227:60 the gist to be the chapter. gist we're
228:02 going to get the headline to be chapter.
228:06 hitline right and that's all and in case
228:10 there's nothing we're just going to
228:10 return empty array right and so and also
228:13 if there's no transcript about text
228:16 right we're also going to just return
228:18 we're going to just return we're going
228:19 to show an
228:21 error lastly we're just going to return
228:23 the
228:24 transcript right as well as the
228:27 summaries like
228:29 this so we are literally just passing in
228:32 a meeting URL into examply Ai and ultim
228:35 gives us AI summarization of why has
228:38 found and to test this out uh to test
228:41 this out they have kindly given us a
228:44 example file here right like this and so
228:48 I can just
228:50 call if I do cons response equals to
228:53 await process meeting passing the file
228:55 URL let's look at what the response look
228:58 like okay so the same thing I'm going to
228:59 run slow but run Source SL liip assembly
229:04 right if I run this hopefully it will
229:06 take a few seconds to process but then
229:09 it's going to return us with kind of the
229:12 summaries and the transcript so this is
229:14 the longest part of this running because
229:16 we're going to send the AO to ja servers
229:18 they have to download it they're going
229:19 to like run it to their AI model but in
229:22 the end we do get get it back so we can
229:25 see that we get back the transcript as
229:28 well as the summaries so the summaries
229:30 is literally you can see we have the
229:31 start time the end time the gist the
229:34 headline and the summary and we get the
229:36 summary back in in an array and that's
229:39 already so good right so with that
229:42 that's all we wanted to test right so we
229:44 can just just even remove the transcript
229:46 here and just stra up return the
229:48 summaries which is just going to be an
229:49 array of start and gist hline and
229:53 summary so that exactly syns up with
229:57 our issue here start and just headline
230:01 summary see that's why I created this
230:03 table to fit exactly what assembly AI
230:05 has returned us so with that I'm going
230:07 to delete this testing and now whenever
230:10 we kind of we're going to create a new
230:13 API R so come down to app right come
230:15 down to API so remember the drawing that
230:19 we were having just now the first step
230:21 is to upload to Firebase then we can
230:23 create a meeting which we have done
230:25 right and now what we have to do is we
230:27 have to hit this/ API process meeting
230:30 route right getting the URL and creating
230:32 the assembly Ai and getting the issues
230:35 so now we at this current phase so let's
230:37 go down to API and let's create a new
230:39 route called create oh sorry process D
230:42 meeting and we will create a root. TS
230:44 file
230:45 okay with this r. TS file is actually
230:48 really simple all we need to do is come
230:51 down here and uh what we're going to
230:54 have is okay so this ro we're just going
230:57 to export a Asing function called post
231:01 cuz we're going to make a post request
231:02 to uh we're going to make a post request
231:05 to uh / API process meeting right so the
231:09 request is going to be of type next
231:12 request right let's reload the window
231:16 okay and then we're going to have a body
231:18 parser cons body parser equals to Z
231:23 zob right we need a few things we need
231:26 the meeting um
231:29 URL we need the project
231:34 ID and last but not least we need the
231:36 meeting
231:39 ID okay and so what we going to do here
231:43 is this next request can imported
231:45 and then we're going to get the user ID
231:48 from await off first right so if you're
231:51 not authenticated it doesn't make sense
231:53 for us to even process this route so
231:54 we're just going to kick you off saying
231:56 that you're unauthorized right but if
231:58 not what we're going to do is we're
231:60 going to put everything in the TR catch
232:01 block and return a next response in case
232:04 something happens and just error it out
232:06 so the first thing is just get the
232:08 response Body by doing AWA request. Json
232:11 then we can actually
232:13 destructure a few things from body
232:15 parser pars the body right and then we
232:19 can get the TR the summaries from await
232:23 process meeting from assembly AI passing
232:27 in the meeting
232:30 URL so this just gives us back the
232:32 summaries right and we can see the shape
232:34 of the summaries is start end just
232:36 hitline and
232:37 summary and with this all we have to do
232:40 is just do await promise the all
232:47 summaries map actually no we can just
232:51 await DB
232:53 dot uh issue do create many right the
232:58 data will be summaries map for each
233:02 summary we're just returning a a
233:06 start for summary the start with the N
233:09 the gist the hit line and finally the
233:11 meeting ID like this boom so
233:15 in this way we're going to wait for this
233:17 this is going to take like one or two
233:18 minutes but the moment we have that
233:19 we're going to create all the issues and
233:21 we're going to link it to the meeting ID
233:23 right make sense and then we'll just
233:25 return a next response saying that they
233:26 is successful and one more thing when we
233:28 deploy to a cell by default this
233:30 function will time out after like 10
233:33 seconds right which you don't want to
233:35 and that's why we're going to export a
233:36 cons Max duration and this is Free by
233:39 the way and this will set to 5 minutes
233:42 so the function won't time out until 5
233:44 minutes later which is
233:46 ideal so at this point we are basically
233:48 done with this right and so now we just
233:50 have to go back into our uh right here
233:54 and after we have that we have to update
233:55 our meeting remember so we have to
233:57 update the um meeting
234:01 ID such that the status is now completed
234:05 and we want to give you a new name to be
234:07 summaries uh the summaries at index zero
234:11 we want to give it the the headline so
234:14 we're just going to rename the meeting
234:16 based on the AI generated summary okay
234:18 and we're going to set it to complete as
234:20 well and so with that everything looks
234:22 good everything looks good we just need
234:24 to call this function right so come down
234:27 into your meeting card
234:30 okay at this point at this point what do
234:32 we need to do we need to create a new uh
234:36 mutation in here called cons process
234:40 meeting it goes to use mutation so we're
234:43 importing this directly from 10 set
234:45 query right the mutation function is
234:48 going to be an ASN right and we need a
234:52 few things right we need the Let's see
234:56 we need the uh meeting URL to be a
234:58 string we need the meeting ID and OB we
235:01 need the project
235:04 ID what we're going to do is then we're
235:06 going we're going to call uh cons
235:09 response equals to await
235:11 exuse poost SL API process meeting
235:15 passing in our meeting URL right so we
235:18 can see we need meeting URL project ID
235:19 and meeting ID so meeting URL meeting ID
235:22 and project ID makes sense and then we
235:24 just return respons all data like this
235:28 so let's see what's the issue here uh
235:30 here actually we just we have to wrap
235:32 everything in a data block like this and
235:35 then we destructure
235:37 everything from this data make
235:40 sense so then to call this process
235:42 meeting function we call it after we
235:44 have gotten the U after we have pushed
235:47 them to SL meetings so immediately we're
235:49 going to call Process
235:51 meeting do mutate async right passing in
235:55 the meeting URL the meeting ID right so
235:59 on success here uh unsuccess here let's
236:03 see do we get a meeting ID uh we do
236:07 let's see where do we get a meeting
236:10 ID uh I'm not meeting
236:14 does it make sense y yep yep okay so
236:18 upload meeting it returns us with a
236:19 meeting right so this meeting uh let's
236:22 see we have to go into upload
236:24 meeting we have to return the meeting
236:27 itself so that we can access it here
236:30 this
236:33 meeting and then we can pass in here
236:36 meeting. ID and project. ID cool so then
236:41 so after we upload to Firebase you
236:42 immediately kick us to SL meetings but
236:44 but it will also immediately kick off
236:46 the process meeting function right and
236:48 so now if we come back here let's
236:50 actually restart our server and let's
236:51 try out this
236:53 time let's restart this and let's come
236:57 back to our Local Host 3000 let's try
237:01 it so let's ignore this okay and what
237:04 I'm going to do is just going to press
237:05 upload meeting I'm going to upload my
237:08 short summary
237:10 here let's see do I have it here cool if
237:15 I upload this you can see 19% so this
237:17 uploads to Firebase right it click us
237:20 to/ meeting and we should be able to see
237:22 our new meeting here and you can see
237:24 that we are rendering our slash process
237:27 meeting right we should be able to see/
237:32 API slpress meeting
237:34 here uh okay I guess we make a error
237:37 here so this a 404 so let's see why so
237:41 route
237:43 process process me
237:45 meeting ah wait did I make a
237:49 typ /i/ process
237:52 meeting oh silly Mystic so you see I put
237:56 it into the servers API it shouldn't be
237:59 in the server API it should be the app
238:01 directories API so come down to your app
238:03 this API folder
238:05 here uh mod not found let's see why this
238:09 is the case so let's just create the
238:11 process meeting here instead
238:13 manually okay that's a Sil mistake root.
238:16 TS let's just copy over the current
238:19 root.
238:20 TS uh here let copy this over right we
238:24 don't need this function anymore and so
238:26 now let's try again so if I upload a
238:29 meeting
238:31 here we should be able to see upload and
238:34 soon enough we should able to
238:36 see /i/ process meeting being hit okay/
238:41 API process meeting we are able to see
238:43 our thing processing and slowly slowly
238:47 what's going to happen is we're going to
238:49 see that if we give you a few minutes
238:51 it's going to process it it's going to
238:52 create the issues it's going to update
238:55 it's going to update the issues to be uh
238:57 it's going to update the status to be
238:59 completed and then this is no longer
239:01 going to be processing and it's going to
239:03 be clear and then at that point we can
239:05 go into the meeting notes so let's just
239:07 give you a few minutes while we wait
239:10 okay so I made one little mistake while
239:12 we are creating the issues that stent
239:14 actually be the project project ID right
239:17 because all we need is if we come back
239:18 to our schema Prisma we are only looking
239:21 at the meeting ID we don't need a
239:22 project ID so that was TR an error but
239:25 hopefully now if I just kind of let's
239:27 try again so upload meeting come down
239:30 here and let us just upload this okay
239:34 let's wait for it to
239:35 process and then it should
239:38 refret after
239:40 uploaded nice okay cool cool cool cool
239:44 and
239:45 and in the meantime let's add a delete
239:48 button beside this to delete the meeting
239:50 okay so let's come down to our
239:54 meeting page and going down to your
239:57 project let's create a new function
239:59 called delete meeting that just takes a
240:01 meeting ID and just deletes it right
240:04 pretty simple pretty SM
240:05 query and then come down here beside the
240:08 view meeting let's also have a button
240:11 that calls the deleting delete meeting
240:13 function
240:16 meeting function right so we just delete
240:19 this meeting and then on click we're
240:21 just going to just deleted like this and
240:24 we're going to call delete meeting okay
240:26 but this is a little too big so for the
240:29 both of the buttons I'm going to give
240:30 you a size of SM this two okay cool and
240:35 so now if I press oh by the way here
240:37 look we have finished processing it and
240:39 that's why the processing button is
240:40 wrong off so let us do this so is is
240:46 disabled while delete meeting is is
240:49 pending right and obviously after I
240:52 successfully deleted it I'm going to
240:55 toost and refetch it that's well and we
240:58 can get the refetch function from our
241:01 refetch
241:03 hook so I can delete this delete this
241:07 and nice so now if I view the meeting
241:10 nothing happens because we are in this
241:12 URL that we have not rendered here so
241:14 let's actually render this shall we so
241:17 what we going to do here is just come
241:19 down here go to our meetings create a
241:22 new folder with a bracket meeting ID
241:25 like this and we're going to create a
241:27 page.
241:29 TSX we're going to have a
241:32 tsfc this is going to be the meeting
241:35 Details
241:37 page right and here we're going to have
241:41 a a params this is going to be a uh
241:45 sorry this params is going to be a
241:47 promise so this is a new nextjs 15
241:49 feature right in nextjs 15 you can no
241:52 longer just straight up D structure the
241:53 params you need to is is WRA in the
241:56 promise so in the promise is where you
241:58 can get your meeting ID which meches W
242:00 in the bracket here and then what we can
242:03 do is just destructure the params and
242:05 you can get that uh meeting ID equals to
242:08 just await perms do oh sorry await perms
242:12 like this and you have to Ma this is a
242:14 server
242:15 component so if you have this you can
242:17 then re render the meeting ID if I come
242:20 back here we can now see that the
242:21 meeting ID corresponds to what I have on
242:23 the URL make sense so now we can
242:26 actually render the list of issues okay
242:29 I'm going to create a client component
242:31 here that just kind of shows the uh
242:34 issues list.
242:37 DSX it's going to be a used CL
242:39 component right that's going to take in
242:42 prop the prop is going to have the
242:44 meeting ID sorry yeah meeting ID we got
242:47 be a
242:48 string and then we'll just Destructor
242:50 meeting
242:52 ID going to your project we want to get
242:55 the issues from the meetings right so
242:57 we're going to say get meeting by ID
243:02 right we could get the meeting ID and
243:04 we're just going to return the meeting
243:06 that mates the ID including the issues
243:09 right so if we come back here we can
243:12 then get the meeting like this
243:15 and we can just refetch it if we want to
243:18 which makes sense okay and so finally
243:20 we're going to render this inside our
243:22 meeting page we're going to return a
243:24 issues list passing in the meeting ID so
243:28 everything is good and finally in the
243:30 issues list now let's actually uh map
243:33 through it so if is loading or there's
243:38 no meeting we're going to return a
243:41 loading indicator if not I'm going to
243:44 return a
243:45 diff uh diff with a class name of ping
243:48 of
243:49 eight and then in here we going to have
243:53 is a another div let's see if this makes
243:56 sense
243:58 uh with a class name of MX oo Flex Max
244:03 width of 2
244:04 XL items D sensor justify between g d x
244:11 of 8 border bottom padding bottom of six
244:16 large of mx0 large Max width of none
244:20 okay in this diff we're going to have a
244:22 diff another diff with a class name of
244:24 flex items D Center Gap D X-6
244:29 right in this we have another div with
244:34 a uh class name of rounded four border
244:39 background of white padding of threee
244:41 and here is just where we put a video
244:43 icon
244:46 and in here I don't if the D we're going
244:48 to have a H1 that shows the meeting.
244:50 name
244:52 right
244:53 uh sorry yeah like this sorry no in the
244:59 hit one this has no class name actually
245:02 inside there has a
245:04 div here that says class name of text
245:08 smm leading of
245:10 six text grade of 600
245:15 and then in
245:16 here um we're going to have meeting on
245:20 so we're going to put a time stamp of
245:24 meeting. created at. to local date
245:26 string like this okay and underneath the
245:29 diff we have another
245:32 div with a class name of margin to of
245:35 one
245:37 text base font semi
245:41 bolt leading of six text Gray of 9900
245:46 inside here we'll have the meeting. name
245:48 so let's see how it looks like right now
245:51 cool that Mak sense like this and then
245:55 we're going to come down here below this
245:57 uh below the uh below the second closing
246:01 div basically here uh does it make
246:05 sense yeah outside of the H1 outside the
246:08 div and then here actually no
246:10 everything's fine we want to come out
246:12 all the way to the um let's see the
246:15 outer diff so there's one more diff left
246:18 over here with a height of four and in
246:21 here we're going to have a
246:22 div with a class name of grid grid calls
246:27 of one gap of three small GD calls of
246:32 three and then we have meeting do issues
246:35 do map right for each
246:39 issue right what are we going to do with
246:42 it so we're just going to return a issue
246:45 card so let's create a new component
246:47 below here
246:50 function issue card okay and return
246:54 return issue card so we're going to get
246:56 router outputs right by
246:59 this and then we'll have a non-nullable
247:02 like this so this gives us a type of the
247:05 issues right which is the meeting ID
247:07 summary start and just
247:09 headline so right now we can see that
247:11 there's only one issue I guess right uh
247:14 and then for the issue card what do we
247:17 do with this issue card we're literally
247:19 just going to have
247:20 a um card here inside the card we have a
247:25 class name of
247:27 relative we have a card
247:30 hter card
247:32 title with a class name of text
247:35 Excel with the issue do
247:38 gist okay we have a border bottom diff
247:44 and then with a card
247:47 description inside has the issue.
247:50 headline right also have the cart hater
247:54 with have the card
247:56 content ins the card content with have a
248:00 button right that says details okay
248:06 let's see if this makes
248:08 sense uh
248:14 yeah okay makes sense makes sense so the
248:16 button inside will have a details on
248:19 click we want to set set open to be true
248:23 okay and when do we get this set open we
248:26 have to create our state because we will
248:29 have a dialogue that opens up here so
248:34 let's put everything in this fragment so
248:36 that we can have a
248:38 dialogue with open and open change let's
248:41 have a dialog content dial diog header
248:45 and dialog title like
248:48 this and within here pretty e easy so um
248:53 actually no dialog
248:56 heer dialog title makes sense issue.
249:00 gist and then inside after this dialogue
249:04 description let's put the issue.
249:08 headline so let's see how it looks right
249:11 we can see I can press details right and
249:13 we see see the issue and the
249:16 description and finally we're going to
249:19 just have a underneath the uh
249:22 description we going have a paragraph
249:24 tag that just has the issue dot
249:29 um let's see headline so so if this
249:33 headline this will be the Creator at. to
249:35 local D okay and this just have a text
249:39 gr of
249:40 600 and then underneath here we have a
249:43 Block C
249:45 this block grow has a class name of
249:46 margin of two border left of four border
249:50 grade of 300 background grade of 50
249:53 padding of four right and then inside
249:57 here we have a span right that's a class
249:59 name of text smm text gr of
250:02 600 inside here we have the issue do
250:07 start to issue. n to show the time stamp
250:11 and underneath the span we have a pag
250:14 with a class name of font medium italic
250:19 leading relax text Gray
250:24 900 and this will be the issue do
250:28 summary so let's see how it looks cool
250:31 so we have this nice block quote thing I
250:33 think looks nice looks great and then
250:36 once we have
250:38 this that's pretty much it so then
250:41 obviously because it's a very short clip
250:43 but if you have a longer clip like this
250:44 is 1 minute right but if you have a 30
250:46 minute clip from what I show you in the
250:48 demo you'll have like 16 different
250:51 issues that will show up here so right
250:53 now this has only one issue but if you
250:55 have a longer meeting this will have
250:57 more issues and you can then look
250:58 through the details here yeah cool so
251:02 that's awesome we have finished the
251:03 meetings page we can upload stuff we can
251:05 use assembly AI to generate summaries
251:08 and most importantly we can look at
251:09 details and catch up on the meetings
251:12 that we missed out on that's great so we
251:14 l only left with the final part which is
251:17 implementing the building and
251:18 implementing the uh sorry implementing
251:22 the credit system with stripe so let's
251:25 complete that in the next
251:27 section all right guys we're almost done
251:29 but before we move on to the last part
251:31 of stripe let's actually get this done
251:33 first so we need to show the team
251:34 members uh ability to invite people and
251:37 a button to Archive the project so that
251:39 it doesn't show up in case you're doing
251:41 some testing okay so let's go come down
251:44 to the archive button because it's the
251:45 easiest to do right I'm going to do is
251:48 just come down to our code editor let's
251:50 see uh code editor let's clear up
251:54 everything we have here first come back
251:55 to our project. TS router and let's just
251:58 have a archive project right that takes
252:02 a project ID and you just update it so
252:06 that you set the deleted ad to be
252:07 today's date and remember because when
252:09 we did get projects right we were
252:12 filtering out by deleted ad so naturally
252:14 if we set the create deleted ad to be a
252:16 non-n now value this is automatic going
252:18 to be filtered out on the sidebar okay
252:21 so if we save this okay and if we come
252:24 back to
252:25 our dashboard page where we have this uh
252:29 archive button let's create a new
252:31 component called archive button.
252:37 TSX use client uh
252:40 RFC
252:42 archive button
252:44 and we have a
252:46 archive project to be a API react.
252:49 project. archive project. use
252:52 mutation we'll just have a button here
252:55 right that when you say when you click
252:56 on it right we're going to see con
253:00 confirm equals window.
253:04 confirm are you sure you want to Arch
253:07 project and if they confirm we're going
253:10 to get the cons project ID from use
253:14 project you already know right and
253:17 that's pretty much
253:19 it right and then if it successful we'll
253:22 give a
253:23 toast if there's an error we'll give an
253:26 error State and immediately after that
253:28 we'll just have to
253:30 refetch it so that we can update the
253:32 Side Bar and refetch like this so if you
253:36 come back here to our button that us
253:38 have uh disabled to be archive project
253:41 is loading is pending I mean and we have
253:43 a size of
253:45 small and a variance of
253:49 destructive so let's come back here
253:52 instead of doing this let's have archive
253:57 button and let's see how it looks like
254:01 cool so if I press archive it should ask
254:05 me to confirm if I do you can now see on
254:06 the side barar it's gone right so let me
254:09 archive the projects that are test
254:13 boom boom boom damn we have a lot of
254:16 test
254:17 conversations but it's all right that's
254:19 what the archive button is for so we
254:22 going to slowly kind of delete them side
254:23 by
254:25 side
254:27 this
254:29 refresh and Okay cool so we just left
254:32 with this tree nice we can work with
254:34 that so now let's actually uh have a
254:38 invite button so come down
254:41 here come down to your code editor
254:44 let's create a in sorry invite button.
254:50 TSX use
254:52 client uh RFC invite button so the
254:57 invite button is going to be pretty
254:58 simple is main just returning a dialogue
255:02 so we just need a project ID
255:06 first use
255:08 project and we also need an open State
255:11 and a set open State for the dialog and
255:14 we just want to return a dialog
255:18 here and open on open change and let's
255:22 have a dialog content a dialog header a
255:25 dialog title you know the drill right
255:29 and then under
255:31 here inside the content and P tag that
255:35 says class name of text small text grade
255:39 of 500 say ask them to copy and paste
255:45 this
255:45 link okay and then we loow that we have
255:48 a input F that we
255:50 import the thing is is going to be just
255:53 read
255:54 only we have a class name of margin
255:56 Tower
255:57 4 when we click on this right what do we
256:00 want to do we want to do Navigator do
256:05 clipboard. write text what do we want to
256:08 write so we're going to write
256:10 the uh with window. location.
256:16 origin uh /join SL project
256:19 ID I'm going to just toast. success copy
256:22 to cateb and then the value of this is
256:25 going to just be the same
256:27 URL and below that we'll have a button
256:29 that triggers
256:31 this invite
256:34 member import this
256:36 button a small button like
256:39 this and so now if I import this button
256:43 and you use
256:44 this invite
256:47 button I should press this button now
256:50 and now I can see ask them to copy this
256:53 and we get the correct link here so
256:55 obviously if I go to the link now
256:57 there's nothing we haven't linked up the
256:58 functionality so let's do that now so
257:01 come down to your sitebar and come under
257:04 let's
257:05 see come under protected and do join and
257:09 inside here we have a join I uh sorry
257:11 project ID
257:14 and a page.
257:15 TSX so inside this we're just have
257:19 a um TS
257:22 RFC join Handler so remember what we
257:26 need we need to have a params but this
257:29 pram is going to be a promise that
257:31 returns a project
257:34 ID so we just need to call
257:36 cons uh project ID equals to await props
257:41 params right await the prop promise we
257:44 have to mark this as async but it's okay
257:47 because all we need to do is just uh as
257:49 they
257:51 join let's see does this make
257:54 sense so we just we don't need to return
257:57 anything we just need to make sure that
257:58 we have a user
257:60 ID a wait
258:03 off right I'm going to get a database
258:06 user equals to await db.
258:09 user from database do find Uni where I
258:13 equal user
258:14 ID so if there's no user ID obviously we
258:17 just redirect the sign
258:20 in right so we can get client equals to
258:24 await um clerk client we can get the
258:28 user equals to await client. users do do
258:32 get users get user passing the user
258:35 ID and then if we have no database user
258:38 that means that this is a new user into
258:40 our system we should create a user for
258:43 them the
258:46 create passing in the
258:50 email address image URL first name last
258:53 name like
258:55 this and then outside of this we're
258:58 going to get the project here by the
259:01 project ID that we've got passed in here
259:03 if there's no project we're going to
259:05 return them to the dashboard right and
259:08 then what we're going to do is we're
259:09 going to just do a try catch so we're
259:12 going to try to do db. user. project.
259:14 create that means we're going to create
259:16 we're going to link the users the the
259:18 new user with the project and then
259:20 obviously it's just going to be a
259:21 project ID and the user ID right and if
259:25 there's an error that means that they
259:26 are already in the
259:29 project finally we're just going to
259:31 return redirect to/
259:36 dashboard like
259:39 this cool we don't need this this make
259:43 sense right
259:46 so if I do this if I copy this I go here
259:49 because I'm already in here I should
259:51 just immediately be kicked back to my
259:52 dashboard which I do cool but if I have
259:56 another friend and he lcks in he should
259:58 be able to join here and how do we know
260:00 who our team members are right we can
260:03 just come to the team members component
260:05 here so come back to our project and
260:07 we're just going to get the get team
260:10 members right and it's just going to be
260:13 the project ID and we're just going to
260:15 get the user the user to project finding
260:18 manyu where the project ID equals a uh
260:22 project ID and we're going to get the
260:23 users included in this so This basically
260:25 returns us with a list of users that is
260:27 in a particular
260:29 project we're going to come down here to
260:32 our dashboard page here we're going to
260:35 have a uh Team members.
260:40 TSX use client RFC you already know the
260:44 drill we have done this so many times we
260:46 need the project ID equals to use
260:51 project we need the data do members to
260:54 be API react. project. getet members and
260:58 we just want to map through them map
261:00 over them and instead of showing that we
261:03 just want to show the kind of the uh
261:06 sorry the image so let's have a
261:09 div with a class name of flex I items D
261:14 center cap of
261:15 two members. map for each member going
261:21 to return an
261:22 image with a key of member. ID the
261:25 source of image
261:28 URL the out will just be their first
261:31 name and the class name um like
261:35 this let's give it a size of
261:38 30 so height of 30 width of 30
261:43 right and so if we use this
261:48 component we should be able to see the
261:50 list of members and obviously if there
261:53 are more members and you send people the
261:54 link they'll be able to join this
261:56 project and see everything here as well
261:58 as use the the question answer Bots but
262:01 you also see the avatars here so this
262:03 how you implement kind of project
262:04 settings and member invation to this
262:08 kind of architecture so yeah we're done
262:11 with that and now we're going to go back
262:13 to the last part which is setting up
262:15 stripe all right so now we're in the
262:17 last part of the project so let's ENT
262:20 integrate stripe into this so go into
262:22 your stripe dashboard and sign up for a
262:24 free account if you have not already
262:26 when you Lo to stripe you'll be able to
262:28 come down to your top left corner and
262:29 just create a new account within
262:31 here and so we can create a new
262:34 diagnosis D YouTube account and choose
262:37 your country of operation it really it
262:40 uh depends on where you stay and so
262:43 after you come in here you going to
262:44 press on developers and what you going
262:46 to do is just going to go into your API
262:47 keys and reveiew your publ uh secret key
262:50 and publishable key you're going to need
262:53 this to go into your end folder and you
262:56 need three things you need a stripe
262:58 secret
262:60 key you need a stripe publishable
263:06 key and you need a stripe web hook
263:09 secret so we got a publishable key here
263:13 we got a secret key here and now we need
263:16 a web hook secret but will'll handle
263:17 that later the first thing you have to
263:19 do is just come to your terminal and
263:22 just install
263:25 stripe
263:27 okay with stripe installed come down to
263:30 your folder and create a SL lip uh under
263:34 a SL liip create a stripe.
263:36 TS and inside here you can have a use
263:39 server directive right and you going
263:42 import strip from
263:43 stripe and you're going to have a con
263:45 stripe equal to new stripe passing in
263:47 the stripe secret key right and the API
263:51 version just choose whatever is autoc
263:54 completed for you okay so how this is
263:57 going to work here is okay let me show
263:59 you the the demo if I create a new
264:01 project and I give you a
264:03 name like let's say something like this
264:07 and press check
264:08 credits I'm going to say how much
264:10 credits I'll be charged for the
264:11 repository and and this number is
264:13 basically uh how I'm getting which is
264:16 the number of files that is within the
264:18 project so before I actually create a
264:20 project I need to actually uh get the
264:22 amount of files within it and to check
264:24 whether they have enough credit left and
264:26 so we have a credit system uh based on
264:28 this okay so we're going to allow them
264:31 to buy credits as well right so each
264:33 credit is going to be every 50 credit is
264:37 going to be $1 and we'll just allow them
264:39 to buy like this and we'll going to keep
264:40 track of how much credit they have
264:41 bought uh just for audit show okay and
264:45 every time they create a project we lit
264:47 going to deduct the credits from the
264:48 account so it's a really simple
264:50 implementation but I really like it so
264:53 it's very simple because just we have
264:54 the Asing function create checkout
264:58 session from stripe and we're going to
265:00 say how many how much credits are we
265:02 trying to check out right so the first
265:04 thing is I'm going to get the user ID to
265:05 be await
265:07 off so let's restart our vs
265:10 code okay
265:12 away off from clerk if there's no user
265:17 ID obviously we know that it's
265:19 unauthorized and we're just going to
265:21 have a session to be await stripe.
265:23 checkout. sessions. create the payment
265:27 method types right is only going to be
265:31 card okay for the line items right we're
265:35 going to have only one item in the array
265:38 the price data is something we determine
265:41 ourselves the currency
265:43 USD the product data okay the name is
265:47 going to be uh
265:52 credits dionysis credits so if they
265:55 trying to buy 10 credits it's going to
265:57 show up as 10 dionysis credits okay the
266:00 unit amount is going to be math. round
266:04 right we're going to have credits divide
266:08 by 50 * 100 so because this is in sense
266:12 right if they're trying to buy 50
266:15 credits we need to divide it by the
266:17 amount of credits per dollar and then
266:19 multiply by 100 cents okay hope this
266:21 makes sense and then outside of this
266:25 we're just going to have a quantity of
266:26 one okay and
266:30 lastly uh the customer creation will
266:33 always set it to
266:36 always the mode will be payment okay and
266:41 then other than that that will have a
266:43 success
266:44 URL to be next public app
266:48 URL right/ create and for this is SL
266:52 billing so we need this next public URL
266:55 environment variable so let's come down
266:57 here to be localhost 3000 but when we
266:60 Deploy on verell later this is going to
267:02 be something. ver. app so keep note of
267:04 this and lastly we're going to have a
267:07 client reference ID so that we know who
267:09 made the purchase which is the user id.
267:11 two string
267:13 and finally we want to have metadata to
267:16 keep track of how many credits they
267:17 actually bought right so later in the
267:19 web hook we know who bought it and how
267:22 many credit they bought it and then
267:24 we're just L going to return a
267:27 redirect to session.
267:29 URL like this cool so with this let's
267:34 see we have the strike payment right if
267:37 you come back to our Local Host
267:39 3,000 here if you come down to billing
267:43 let's go down to building and let's
267:44 create a building
267:46 page so under
267:48 app here under protected let's see let's
267:53 create a bilding
267:55 section and have a page.
267:58 TSX so under the building page is really
268:01 simple we just have a use
268:06 client and then we have a rafc and this
268:10 our building page
268:15 okay the first thing is we need to know
268:17 how many credits the user has so let's
268:19 come down to project and let's get get
268:22 my
268:23 credit which is super easy because I
268:25 just need to get the user by the locked
268:27 in contact users ID and get the credits
268:31 out and with this I can get my credits
268:33 from API react like
268:36 this okay and then I can have a credits
268:39 to buy set credits to buy and this is
268:43 going to be the slider
268:45 from how say from sheden so we're going
268:49 to initially just have 100 right so this
268:53 going to be have a be a number array
268:56 okay and so
268:58 credits to buy amount equals to credits
269:03 to buy index zero and this always going
269:06 to be true and the price is going to
269:10 be credits to buy amount divide by 50
269:14 right do to fix two so this 50 is just
269:18 how much credits it will cost per dollar
269:21 okay and then finally we can just return
269:25 div with a H1 inside here saying
269:34 building h to as a spacer and we just
269:37 want to show how much kind of credits
269:39 they left with so text SM text grade
269:43 500 and I say you currently have
269:46 credits uh credits. credit uh credits
269:50 right because this credits is actually a
269:53 user object so maybe we can just name it
269:54 to user so then we can do user. credits
269:58 make sense so if we save this right now
269:60 and we come back here you can see that I
270:02 currently have 150 credits cool and now
270:05 let's actually create a slider okay we
270:06 have a height to
270:10 again and let's actually have a
270:11 disclaimer
270:13 okay and I'll just copy the disclaimer
270:15 down here there's nothing important here
270:17 you can just always copy this right but
270:21 I'm just giving a description of each
270:23 credit allows you to index one file in
270:24 the repository and if your project has
270:26 100 files you need 100 credits to index
270:28 it
270:30 okay and then under this disclosure we
270:33 have a highight of four and we're going
270:34 to have a slider from component slider
270:37 we're going have a default value default
270:40 value of
270:42 100 a Max of 1,000 A Min of 10 a step of
270:49 10 right on value
270:51 change we're going to get the value
270:53 we're going to set credits to buy equal
270:55 to that value and the actual value is
270:57 going to be credits to buy okay we're
270:60 going to have a height of four again and
271:02 then we have a
271:03 button right and this button when we
271:07 click on it what do we want to do we
271:09 want to lead them to the check out page
271:10 right so we have a create checkout
271:13 session passing in the credits to
271:15 buy amount and I'm going to say buy
271:18 credits amount for the
271:20 price and finally now this works so if
271:23 we SL around we can see the number here
271:26 and if we click on this it should
271:27 hopefully redirect us to a strike page
271:30 here specifying the amount of credits
271:33 and the price here so this fully Dynamic
271:36 if I choose like um 10 credits for 20
271:41 cents let's see the issue
271:42 okay so the checkout say that I must at
271:44 least have 50 cents which is okay so
271:46 let's put it like 190 we can see that it
271:49 still works cool
271:51 stuff okay so at this point we want to
271:54 keep a collection of when they purchased
271:56 it so let's come down to uh our schema
271:59 of
272:01 Prisma let's have a model of stripe
272:05 transaction okay so the strip
272:08 transaction is only just to keep track
272:10 of um has an ID obviously we're going to
272:14 see who bought it so we have a user ID
272:17 and we're going to have a credit so how
272:19 much credits they bought and this going
272:20 to obviously going to be linked to a
272:22 user so we going to say strip
272:25 transactions here so each user can have
272:28 made multiple transaction therefore
272:30 going to just do D DB
272:33 push let's restart this server
272:37 okay and so at this point at this point
272:40 if I refresh
272:43 so right now I have 150 credits right
272:45 I'm going to set up a web hook in stripe
272:48 to basically allow me to just allow me
272:51 to kind of uh uh how to say when I when
272:55 I click on this and they enter a test
272:57 amount or like whatever amount they're
272:59 going to send me a web hook right I'm
273:01 going to receive that web hook so the
273:03 web Hook is going to leave
273:05 in so come down to
273:07 app come down to API right
273:12 and I'm going to create a new web hook
273:14 folder I'm going to create a stripe
273:16 folder I'm going to create root. TS so
273:19 this corresponds to/ API web hook stripe
273:22 okay and I'm going to go into my middle.
273:25 ts and just add this web hook to the
273:28 public Roots okay with this I'm going to
273:32 come down
273:34 here to here and what I'm going to do
273:36 here is come down to your stripe account
273:39 okay come down to event destinations
273:42 and you can just do create an invent
273:44 destination and press test in local
273:46 environment so the first step is to
273:48 download the common line interface you
273:49 can do it through just following the
273:51 instruction but since I have it I'm just
273:53 going to run stripe login here to log
273:57 in and then let's
274:00 hope okay they need my authenticator app
274:03 so I'm going to pause this for a little
274:07 bit so after you have granted stripe
274:10 access uh to the Local web hook what you
274:12 going to do is just close the terminal
274:13 come back to your code right and note
274:16 for the look for the kind of web hook
274:18 secret later okay so you can clear this
274:21 out right and then you can run stripe uh
274:24 listen right dash forward to Local Host
274:27 3000 SL API web hook SL stripe okay or
274:32 whatever kind of stripe web hook you set
274:33 up but it must match here okay press
274:36 enter so it's going to try listen it and
274:38 you're going to get the web hook secret
274:40 note this down come down to your do n
274:42 and just copy the web hook Secret in
274:44 here okay and now in your web hook
274:46 stripe you just have to get a post
274:49 request uh from web hook let's see and
274:54 the first thing is we're going to get
274:55 the body equals to await request.
274:59 text
275:00 okay so this going to be a request
275:03 object we're going to get the signature
275:06 which is the web hook signature await
275:08 haers from nextjs doget
275:13 stripe Dash signature as string okay and
275:17 we have a events to be stripe do event
275:21 okay we're going to do a TR catch block
275:23 so we're going to set the event to be
275:25 stripe. web
275:26 hooks so how do we get a stripe we need
275:29 a stripe to be
275:31 from uh new
275:34 stripe passing in your secret key and
275:36 the API
275:38 version right we already have the secret
275:40 key so stripe. web
275:43 hooks do construct
275:45 event passing in the body the signature
275:49 and the web hook secret that you have
275:52 entered from this kind of uh
275:55 terminal and if there's an error that
275:57 means that the web hook secret is wrong
275:59 that mean someone is trying to uh do
276:01 some unauthorized access to your web
276:04 hook so you should just return return
276:05 error and so at this point we have the
276:07 error the event we're going to get the
276:09 session right so session equals to
276:12 events. dat. object as stripe. checkout.
276:16 session okay we could just console.
276:19 loock uh event. type
276:21 okay so we're going to check for only
276:23 one event very simple if event. type equ
276:26 go to check out the session completed
276:28 okay we can get the amount of credits
276:30 that the user bought right which we have
276:32 put in the session
276:37 metadata do credits so remember when we
276:40 check out our stripe
276:42 let's
276:43 see right we put the the credit to
276:45 metadata we can now retrieve it here
276:48 okay and now we need the user ID equals
276:50 to session do session. client reference
276:55 ID right so this client reference ID is
276:56 the user ID that way that the person
276:59 used to initiate the
277:00 checkout at this point we're going to
277:02 say if there's no user ID or no credits
277:05 we're going to say something went wrong
277:07 if not we're going to do db. stripe
277:09 transaction right going to create a the
277:12 session passing in the user ID and the
277:14 and how much they bought this time and
277:16 then we're also going to away update the
277:19 user right and for the credits we l just
277:22 going to increment them by the amount of
277:24 credits they have so this credits come
277:28 from here so imagine they bought five
277:30 credits so we're going to increment the
277:31 current users credits by let's say five
277:34 so this exactly what it does and then in
277:36 the end I'm going to just return a next
277:37 response saying that the credits has
277:39 been added successfully and that's
277:41 pretty much it so now let's actually try
277:44 it out if I come back here and if I go
277:48 back here and I'm going to buy so right
277:52 now I have 150 credits so if I buy 250
277:56 credits I should have $400 right sorry
277:58 it's 400 credits so let's try this I'll
278:00 put in my fake the fake
278:03 data put a card I'm going press pay so
278:07 hopefully I should see some 200 okay so
278:10 you can see that we got the checkout
278:11 session created and we got redirected to
278:14 our create page and if I go into my
278:16 billing you can now see I have 400
278:18 credits so cool it work on the first try
278:20 that means now we can we can properly uh
278:23 use the credits to evaluate and kind of
278:26 uh use that credit system
278:30 cool okay so now that we have credits
278:32 now let's actually implement the the
278:34 system here so whenever they put a
278:36 project named gab URL we don't want to
278:38 actually create a project directly we
278:40 want to show them how much credits he a
278:42 cost to actually create a project and
278:43 allow them to confirm it and obviously
278:45 if they don't have enough credits to buy
278:48 uh to actually create a project we will
278:49 have to force them to kind of buy more
278:51 credits okay so the hardest part is
278:53 actually finding out how much credit a
278:55 project is worth okay so to do this I'm
278:59 going to come down to my GitHub loader
279:00 class remember the GitHub loader right
279:03 I'm going to write a function right that
279:05 is literally going to say um cons check
279:10 credits okay this track credits is going
279:13 to take in a GitHub
279:14 URL and optionally a GitHub token okay
279:18 so the main purpose here is to find out
279:21 find out how many total files are in the
279:24 repository and there is an API from
279:26 octokit so the first thing is actually
279:29 initializing octo kit to be new octo kit
279:32 passing in the GitHub token that we can
279:34 import here right and then we can then
279:39 do cons GitHub owner it goes to uh the
279:44 third item when we split and the GitHub
279:46 repo will be the fourth item when we
279:48 split if no GitHub owner or GitHub repo
279:51 we're going to return zero right and now
279:54 we want to get the file counts how do we
279:56 actually get the file counts we going
279:57 need to write a recursive function here
279:60 okay cons get file count okay it's going
280:04 to take in a path which is a string and
280:06 octo kit octo kit object which is octo
280:10 kit object here
280:13 a GitHub owner which is a string a
280:15 GitHub repository is a string and
280:17 because it's a recursive function we
280:19 need an accumulator to keep track of how
280:22 many total FS we have seen okay the
280:25 first thing is we're going to get the
280:26 data from await
280:30 octokit uh
280:32 octokit do rest. repost do get
280:36 content passing in the owner to be
280:38 GitHub owner the repo to be GitHub repo
280:41 and the path to be path then we're going
280:44 to check if it's not an array so if the
280:47 data is not an
280:49 array and the data. type equals to
280:53 file we're going to add one to the
280:55 accumulator and just return it but if it
280:58 is an array that means there are sub
280:60 folders within the the main folder right
281:03 we then need to get the file count to be
281:05 zero we need to have a list of
281:07 directories to
281:10 visit and and then we're going to do is
281:12 for cons item of data right we're going
281:15 to check if item.
281:17 type equals to D that means is a
281:20 directory that means we have to
281:22 recursively uh uh get into this
281:24 directory so we're going to push this
281:25 into our directories folder if not we're
281:28 just going to increase the file count by
281:30 one and finally after the for Loop if we
281:33 have more than one directory that we
281:35 went through we need to get the
281:38 directory uh direct I see directory
281:41 three counts by doing await promise the
281:45 all right getting the directories the
281:47 map getting the dir
281:50 PA and we have to call the get file com
281:52 again passing in the dir PA this time
281:55 the same octo kit function the G Hub
281:57 owner and we to pass in a
282:01 zero okay and then finally we can just f
282:05 c plus equals to direct three counts
282:08 reduce and we just reduce it and then
282:11 find fin outside of this if we just
282:13 return accumulator plus file count and
282:16 the entire entire uh base case of the
282:19 recursive function we just return the
282:21 whole
282:22 accumulator Okay cool so you just need
282:25 to know that this function works I I I
282:27 spent like a few hours trying to make
282:28 this work and work with a GitHub API I'm
282:31 just giving it up to you for free here
282:33 right if you want to investigate further
282:34 you can just ask kind of Che GPT of how
282:36 this works but yeah so if you put in a
282:40 kind of GitHub URL here we're going to
282:42 tell you how many file we're going to
282:44 get so with this we can then just get
282:48 the cons file count itals to AIT get F
282:51 count we're going to pass in the empty
282:52 string here the ooy object owner and
282:55 going to start with zero and we'll just
282:56 return a file count here okay cool and
282:60 then finally at this point at this point
283:03 we can go back into our create
283:07 project because it's not immediately
283:09 that we want to create right so we're
283:12 going to create a project a another
283:15 function here called check
283:18 credits
283:20 okay this check credits is going to take
283:23 in the exact same stuff but it's going
283:25 to call this check credits function
283:27 passing in the GitHub URL and GitHub
283:30 token
283:31 okay and then what we're going to do is
283:34 we're also going to get the cons credits
283:38 needed or we can just get the file count
283:41 we're going to get the user
283:43 credits right and we're going to get
283:46 back the credits the you the user
283:50 credits to be user.
283:53 credits user credits. credits or zero so
283:57 basically this file count it signifies
284:00 how much credits is needed to actually
284:02 process this repository and we also need
284:05 to get how much credits the does the
284:07 user currently have okay so with this
284:10 function let's come down to our create
284:11 page we need to make some
284:12 modification because when we submit no
284:15 longer we need to just submit we need to
284:17 call this check credits
284:19 function right use
284:24 mutation mutation use mutation right and
284:28 so what this is
284:31 is on this submit
284:33 so we got to check right
284:37 if that is check credits. data right
284:40 that means we we have initiated a credit
284:43 pool what we're going to do
284:46 is we're going to create a
284:48 project okay like this but if we have no
284:53 credit pool that means these are first
284:54 time checking credits we need to do uh
284:58 check
284:59 credit do mutate passing the GitHub URL
285:03 and the GitHub token
285:05 okay and then we return true like
285:09 this and then underneath here
285:12 we're just going to showcase the data so
285:15 we're going to show here below the just
285:18 above the create button here
285:21 okay so obviously if there is check
285:25 credits.
285:28 data we're going to
285:31 Showcase this
285:35 information so we're going to Showcase a
285:37 disclaimer so it's the same disclaimer
285:39 we have showcased before but we're going
285:41 to say you will be charged with the file
285:43 count amount of credits I'm going to
285:45 check for the user credits and going to
285:47 say that you have how many user credits
285:49 remaining so if I do this and I enter
285:52 GitHub
285:53 repository like
285:55 this when I press create
285:57 project okay let's
286:00 see you'll see that you'll be charged 56
286:03 credits and I have 400 credits remaining
286:06 so that means it works right so I'm also
286:09 going to Showcase uh for this button
286:11 here
286:13 I'm going to disable it if it's create
286:14 project or check credits do is
286:19 pending like this and so
286:22 obviously if check credits.
286:26 data if check
286:28 credits. data we're going to say create
286:31 project if not going to ask for check
286:32 credits so this way that if initially
286:35 right we're going to say check credits
286:38 right because we have not pulled the
286:39 credit yet but after pulling the credit
286:42 we're going to allow them to create a
286:43 project but how do we know if they have
286:45 enough credits right so for example here
286:49 we're going to have a variable here that
286:52 says cons has enough credits to be Check
286:57 credits. Dat do user credits so if I
287:01 have user credits I'm going to get the
287:03 check credits. dat. file count is lesser
287:06 or equals to the user credits meaning
287:08 that the credits needed to create this
287:10 project is lesser or equals to the
287:11 amount of credits I have and if not I'm
287:13 going to default to True okay and so
287:18 obviously if I don't have enough credits
287:20 I'm going to disable this button not
287:23 enough credits okay but in this case
287:25 obviously I have enough credits so I
287:26 willon disable it and then finally
287:29 finally when I press create project
287:32 right let's go into our project stuff
287:34 here when we going to create project we
287:37 need to check whether we have even
287:39 enough credits right because not only do
287:41 we need to do front end validation we
287:43 also need to do backend validation so
287:45 here what we're going to do here is
287:47 just uh
287:50 call we're can get the user right and we
287:53 going to get the user
287:55 credit and so if that's no user will
287:57 show an error we're going get the
288:00 current credits equals to user credits
288:04 or zero so we're going get the file
288:07 count equals to await check credits
288:09 passing the GitHub URL and token
288:11 and so if current credits is less than
288:14 the found count that means we have
288:15 insufficient credit so got true an
288:17 error and then finally if everything is
288:20 good we will just continue this okay and
288:23 then at the end at the end of this we
288:25 need to update the user credits to
288:27 decrement it by the file count okay so
288:30 hopefully this makes sense and so if we
288:32 run this if we say test
288:35 credits I'm going to say create project
288:37 so I have 400 credits remaining right so
288:39 hopefully if this Works after creating
288:42 this project I will have about 3 what 44
288:46 project uh credits left right so let's
288:48 give you a while to load you can see
288:50 project created
288:52 successfully and now if I go back to my
288:54 billing I now have 344 credits right so
288:58 now it proves that this works right test
289:01 credit works and I can also create a
289:04 project let's try again so let's try
289:08 this okay see you'll be charge 7even
289:10 credits I have 344 credits left and so
289:13 if I create this project I'll be left
289:15 with
289:17 337 credits right and boom and slowly
289:21 but surely we will continue using out my
289:23 my credits until we have no more credits
289:25 at which point I can then buy more
289:27 credits so congratulation you have made
289:29 this work right you have made this work
289:32 uh you're able to collect money you're
289:33 able to have a credit system and allow
289:36 them to upload it so the last step is to
289:38 deploy this all right so let's deploy
289:41 this
289:41 now so first come back into our project
289:44 go to your next config okay you're going
289:47 to need a few thing you're going to have
289:48 to have a es lens to ignore during
289:51 builds you also have a typescript to
289:54 ignore build errors to be true
289:57 okay with this you're going to come down
289:60 to your github.com
290:02 slne and you're going to create a new
290:05 repository called uh just a uh kind of
290:09 random repository name I'm going to put
290:11 private for now and going to create
290:14 repository we're going to upload our
290:15 code up to GitHub okay so the first step
290:18 here let's just follow the instructions
290:20 so I'm going to just stop my entire
290:23 server
290:24 running I'm going to do get at all get
290:28 commit D am initial
290:30 commit okay and then I'm going to add my
290:33 origin here I'm going to push my changes
290:36 up to the
290:38 repository so pretty standard stuff and
290:41 so after this if I refresh the page I
290:42 should have my repository here let's go
290:45 to versel and let's actually create a
290:47 new
290:48 project so I can just see my dionysis
290:50 Das YouTube was just added recently okay
290:54 uh my environment variables right I'm
290:56 going to copy in everything I have from
290:57 myv here and just copy it in here the
291:01 only thing I need to change here is my
291:03 public URL I need to change it to
291:05 probably
291:07 di- youtube. ver. app right it may pen
291:11 we don't know right and one more thing
291:13 here is the web hook Secrets right so
291:15 come under your strip web hook create a
291:18 new destination event right we need to
291:21 have https golden SL
291:24 dius dionos youtube. ver. app apiweb
291:30 hook stripe and we're going to listen to
291:32 all the events here just in
291:35 case and then we'll just add the
291:38 events the issue is because we need this
291:41 web hook secret to copy this for
291:43 production we're going to replace the
291:45 web hook secrets so there's only two
291:47 things you need to replace remember the
291:49 next public URL and the strip web hook
291:51 secrets for production so hopefully this
291:54 going to deploy it's going to build it's
291:55 going to be successful on first try it
291:58 has never been on first try what am I
291:60 seeing but I can only pray and so after
292:03 it has deployed let's come back together
292:04 and let's see if this will work okay of
292:07 course there's an issue so it's saying
292:09 that there's a error preing bring
292:11 dashboard because the window is not
292:13 defined which is expected so if you come
292:15 back to dashboard the reason why is
292:17 saying that is
292:19 because uh when we are doing let's
292:21 search for window where we doing window
292:23 dot uh let's see window do
292:27 confirm here right uh react. TSX use
292:30 mobile
292:32 sidebar is f invite
292:35 button okay this is probably the issue
292:39 here when it's trying to pre-render the
292:40 invite button is failing here and so
292:43 what we need to do is for the invite
292:45 button we need to come down to this uh
292:48 the dashboard page for the invite button
292:51 we need to dynamically render it without
292:53 server side rendering so we'll just have
292:55 invite button equals to
292:57 Dynamic like this turning SSR to be
293:01 false okay so then this basically won't
293:04 uh face the issues and so going to
293:06 commit this again remove uh Dynamic SSR
293:10 and let's push this up again and because
293:12 it's linked to our repository when we
293:14 push it up verel should automatically
293:16 deploy it like notice that we have a new
293:20 deployment and
293:22 hopefully hopefully you can see that he
293:25 has DET detected
293:26 it right it's going to build oh one more
293:29 thing is I'm going to go down to my
293:30 settings to my functions I'm going to
293:32 just change it to somewhere near my
293:34 database which is Singapore so I'm going
293:37 to save this I'm going to cancel my
293:39 deployment
293:41 okay not yet I'll let it load and then
293:44 because every time I update my settings
293:46 like my my uh my function uh area I have
293:50 to redeploy it so that's what I'm doing
293:53 here okay and it works okay so because
293:58 it works I'm going to redeploy
294:01 this
294:03 here cool so once it redeploys it should
294:06 be fast and uh it should work live and
294:09 boom it's done so now if I go to
294:11 diagosis d.v. apppp hopefully it's going
294:14 to ask us to sign in right and so if I
294:17 continue with Google and loog into my
294:19 account I should still see all my
294:21 projects right let's
294:24 see and so if I go to SL
294:28 dashboard okay nice as you see my my
294:31 projects right commits commits test
294:34 right and so everything works works
294:37 perfectly let's see if I can create a
294:38 new project right let uh say Test Pro
294:43 let's put in a my chat PDF right and
294:46 let's check
294:48 credits and okay cool you re charge 46
294:50 credits for this repo I have 337 looks
294:53 right so I'm going to press create
294:55 project and hopefully it's going to give
294:57 me a success message to show that this
294:59 still
295:03 works cool project created successfully
295:06 so I say test prod if I see test prod I
295:09 can see my uh repository here my
295:12 comments here I can still ask a question
295:16 uh where do I change the uh PDF loading
295:22 logic right I'm going to ask dionysis
295:24 hopefully gives me an answer nice PDF
295:27 viewer how the PDF is loaded makes sense
295:31 I can still save my answer I come down
295:34 with my q q&amp; a it shows up here my
295:37 sidebar looks nice it works right my
295:40 billing still works right I can just
295:42 come down
295:43 here and just do um let's see I can
295:49 still buy 340 credits let's see this
295:51 works on production so let's just try a
295:54 test
295:56 card and hopefully I should increase by
295:60 340
296:02 points let's
296:04 see nice cool and I my credits increase
296:08 the m trp is working uh the AI is
296:11 working the meetings is working well we
296:13 can test it um let's see let's test it
296:17 with
296:20 this so it's uploading 19% this seems to
296:23 be working and so it's going to then
296:25 upload it and I should see a new meeting
296:28 here it's going to be processing so
296:31 we're going to give you a few uh seconds
296:32 or a few minutes and hopefully that it
296:35 returns with the actual uh processed
296:38 processed meeting and boom that's so
296:41 fast and so you see this works perfectly
296:43 I can view meeting here I can view all
296:45 my details of my issues right obviously
296:47 you should upload something longer to
296:49 test that works but everything works
296:51 fine perfectly Q and A I can log out I
296:54 can sign into another account I can
296:56 invite another member Etc so awesome man
296:60 it work first try all kind of but I am
297:03 so excited for to show to actually
297:06 finish this project with you guys um
297:09 yeah
297:11 so if you enjoyed that video please give
297:13 it a thumbs up and share it with my with
297:15 your friends if you find that helpful
297:18 and other than that uh if you want to
297:20 find out how you can support me anywhere
297:22 else you can look check out our starter
297:24 kit right or you can check out a free
297:27 kind of software list that I compile
297:28 every week right these are all the kind
297:31 of best uh and most updated kind of
297:34 Technologies that's out there in the
297:36 world right now regarding full stack
297:38 tutorials and so if you if you are free
297:41 and you are happy to actually check out
297:43 some of these tools you can come down to
297:46 uh starter kit SL sorry start/ starter
297:49 kit / software list to check it out but
297:52 other than that thank you so much for
297:54 watching and this is Elliot peace out